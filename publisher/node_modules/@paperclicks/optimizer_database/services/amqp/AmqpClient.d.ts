import { IAmqpClient } from './IAmqpClient';
import { Options, Connection, ConfirmChannel } from 'amqplib';
export interface AmqpClientOptions {
    /**
     * RPC message receiving queue name
     */
    rpcQueue: string;
    /**
     * Recommended true, if a message is not handled by the rpc consumer, it will be re-queued,
     * so you risk keeping the messages forever in the queue if timed out
     */
    unique: boolean;
    /**
     * Create new channel for this client or use the broker's channel, *recommended
     */
    newChannel: boolean;
    /**
     * Options when asserting the RPC queue
     */
    rpcQueueOptions?: Options.AssertQueue;
}
export declare class AmqpClient implements IAmqpClient {
    private clientOptions;
    private connection;
    channel: ConfirmChannel;
    private uniqueId?;
    private rpcCallbacks;
    private getPayload;
    private convertPayload;
    /**
     * Return full rpcQueue name
     */
    get baseRpcQueue(): string;
    constructor(clientOptions: Partial<AmqpClientOptions>, connection: {
        connection: Connection;
        channel?: ConfirmChannel;
    });
    init(): Promise<void>;
    /**
     * Handle if received a message on the default RPC queue
     * @param msg
     */
    private consumeRpcMessage;
    /**
     * RPC requests, publishes message on the given queue and waits for a response on the default RPC queue
     * @param exchange
     * @param routingKey
     * @param payload
     * @param options
     */
    rpc<TResponse, TPayload>(exchange: string, routingKey: string, payload: TPayload, options?: Options.Publish): Promise<TResponse | undefined>;
    /**
     * Send message directly to the specified queue
     * @param queue
     * @param payload
     * @param options
     */
    sendToQueue<T>(queue: string, payload: T, options?: Options.Publish): Promise<void>;
    /**
     * Publish message to an exchange
     * @param exchange
     * @param payload
     * @param routingKey
     * @param options
     */
    publish<T>(exchange: string, routingKey: string | undefined, payload: T, options?: Options.Publish | undefined): Promise<void>;
    close(): Promise<void>;
}
