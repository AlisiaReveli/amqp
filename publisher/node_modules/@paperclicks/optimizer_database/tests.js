"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const models_1 = require("./models");
const AmqpClient_1 = require("./services/amqp/AmqpClient");
const amqplib_1 = require("amqplib");
const AmqpService_1 = require("./services/amqp/AmqpService");
const ConfigService_1 = require("./services/ConfigService");
const entities_performance_1 = require("./models/entities_performance");
const tracker_performance_1 = require("./models/tracker_performance");
const GoogleAdsPerformance_1 = require("./models/traffic_source_performance/GoogleAdsPerformance");
const Campaign_1 = require("./models/entities/Campaign");
const moment_1 = __importDefault(require("moment"));
const TikTokPerformance_1 = require("./models/traffic_source_performance/TikTokPerformance");
function initConfig() {
    ConfigService_1.ConfigService.instance.insertQueue = 'clickhouse.proxy.insert';
}
async function initAmqp() {
    const connection = await (0, amqplib_1.connect)('amqp://localhost');
    const client = new AmqpClient_1.AmqpClient({ unique: true }, { connection });
    await client.init();
    AmqpService_1.AmqpService.instance.setClient(client);
}
async function testWrite() {
    initConfig();
    await initAmqp();
    const cmp = {
        user_id: 2,
        name: 'elis',
        platform: 'native',
        traffic_source_account_id: 123,
        traffic_source_unique_name: 'Taboola',
        ga_view_ids: [1, 2, 3, 4, 5, 6],
        traffic_source_campaign_id: 'elis',
        bid: 32,
        budget: 3232,
        managed: true,
    };
    await (0, models_1.getModel)('Campaign').upsert([cmp]);
    const cmpPerformance = new entities_performance_1.CampaignPerformance();
    cmpPerformance.timezone = 'America/New_York';
    cmpPerformance.user_id = 2;
    cmpPerformance.date = (0, moment_1.default)(new Date()).format('YYYY-MM-DD');
    cmpPerformance.traffic_source_campaign_id = 'elis';
    cmpPerformance.traffic_source_unique_name = 'Taboola';
    cmpPerformance.traffic_source_account_id = 123;
    cmpPerformance.ts_clicks = 100;
    cmpPerformance.tr_clicks = 20;
    await (0, models_1.getModel)('CampaignPerformance').upsert([cmpPerformance]);
    const gaData = [];
    for (let i = 0; i < 10; i++) {
        const gaPerformance = new tracker_performance_1.GaPerformance();
        gaPerformance.timezone = 'UTC';
        gaPerformance.user_id = 2;
        gaPerformance.date = (0, moment_1.default)(new Date()).format('YYYY-MM-DD');
        gaPerformance.view_id = 9090;
        gaPerformance.ga_goal1Completions = 20;
        gaPerformance.ga_goal2Completions = 30;
        gaPerformance.entityType = 'widget';
        gaPerformance.traffic_source_campaign_id = 'elis';
        gaPerformance.traffic_source_account_id = 123;
        gaPerformance.traffic_source_item_id = `abc_123_${i}`;
        gaPerformance.traffic_source_unique_name = 'Taboola';
        gaPerformance.ga_entrances = 1;
        gaData.push(gaPerformance);
    }
    await (0, models_1.getModel)('GaPerformance').upsert(gaData);
    const data = [];
    for (let i = 0; i < 0; i++) {
        const widgetPerformance = new entities_performance_1.WidgetPerformance();
        widgetPerformance.timezone = 'UTC';
        widgetPerformance.user_id = 2;
        widgetPerformance.date = (0, moment_1.default)(new Date()).format('YYYY-MM-DD');
        widgetPerformance.traffic_source_campaign_id = 'elis';
        widgetPerformance.traffic_source_unique_name = 'Taboola';
        widgetPerformance.traffic_source_account_id = 123;
        widgetPerformance.traffic_source_widget_id = `widget_${i}`;
        widgetPerformance.ts_clicks = Math.floor(Math.random() * 1000);
        widgetPerformance.tr_clicks = Math.floor(Math.random() * 1000);
        widgetPerformance.impressions = Math.floor(Math.random() * 1000);
        widgetPerformance.ts_conversions = Math.floor(Math.random() * 1000);
        widgetPerformance.tr_conversions = Math.floor(Math.random() * 1000);
        widgetPerformance.ts_revenue = Math.random() * 1000;
        widgetPerformance.tr_revenue = Math.random() * 1000;
        widgetPerformance.cost = Math.random() * 1000;
        widgetPerformance.lp_clicks = Math.floor(Math.random() * 1000);
        widgetPerformance.viewable_impressions = Math.floor(Math.random() * 1000);
        data.push(widgetPerformance);
    }
    await (0, models_1.getModel)('WidgetPerformance').upsert(data);
    const ga = new GoogleAdsPerformance_1.GoogleAdsPerformance();
    ga.timezone = 'UTC';
    ga.user_id = 2;
    ga.date = (0, moment_1.default)(new Date()).format('YYYY-MM-DD');
    ga.traffic_source_campaign_id = 'elis';
    ga.traffic_source_account_id = 123;
    ga.traffic_source_item_id;
    ga.entityType = 'widget';
    await (0, models_1.getModel)('GoogleAdsPerformance').upsert([ga]);
}
async function testRead() {
    const requestArgs = {
        conditions: [
            ['campaign_id', '=', '09c240ed818018bc88a92aec3dad67fa'],
            // ['ts_clicks', '<', 12],
            // ['tr_clicks', '>', 100],
            // ['tr_conversions', '>', 25],
            // ['user_id', '=', 2],
            /* ['date', '>', { sqlFunction: 'toDateTime', value: '2021-12-21' }],
            ['date', '<', { sqlFunction: 'toDateTime', value: '2022-12-21' }], */
            // ['ga_pageValue', '>', 0],
            // ['gads_clicks', '>', 5],
            // ['custom_formula_1', '>', 0.1],
            // ['custom_formula_2', '<', 0.5],
            // ['tr_roi', '>', 0.1],
            ['traffic_source_unique_name', '=', 'Taboola'],
            // ['lead_action', '>', 2],
        ],
        fields: [
            'gads_clicks',
            'gads_clicks2',
            'ts_net',
            'tr_roi',
            'id',
            'campaign_id',
            'bid_strategy',
            'ts_clicks',
            'ga_account_id',
            'ga_view_ids',
            'bid',
            'is_whitelist',
            'lead_action',
        ],
        custom_formulas: [
            { name: 'custom_formula_1', formula: 'tr_roi / ts_clicks' },
            { name: 'custom_formula_2', formula: 'tr_conversion / ts_clicks' },
        ],
    };
    Campaign_1.Campaign.getPerformance(requestArgs);
}
async function testCreate() {
    const create = new TikTokPerformance_1.TikTokPerformanceCreate({
        timezone: 'UTC',
        date: (0, moment_1.default)(new Date()).format('YYYY-MM-DD'),
        user_id: 2,
        platform: 'native',
        traffic_source_account_id: 123,
        traffic_source_campaign_id: 'abc',
        traffic_source_item_id: 'item',
        type: 'campaign',
    });
    // const entity = new TikTokPerformance();
    // entity.setValues(create);
    await (0, models_1.getModel)('TikTokPerformance').upsert([create]);
}
// checkModelsIntegrity();
testRead();
// testCreate()
// 	.then(() => console.log('FINISHED'))
// 	.catch(console.error);
//# sourceMappingURL=tests.js.map