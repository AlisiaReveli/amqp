import { ReadQuery } from '../../core/read/sql/ReadQuery';
import { ObjectType } from '../../core/types';
export declare type UpsertOptions = {
    chunkSize?: number;
};
declare enum ConditionType {
    Basic = "basic",
    Date = "date"
}
interface IOrderBy {
    field: string;
    orderType: ReadQuery.OrderByType;
}
export interface ReadRequest {
    fields: string[];
    formulas: {
        [alias: string]: string;
    };
    conditions: Array<{
        conditionType: ConditionType;
        field: string;
        operator: string;
        value: any;
    }>;
    orderBy: Array<IOrderBy>;
    pagination: {
        page: number;
        pageSize: number;
    };
    includeTotals: boolean;
    includeRows: boolean;
}
export declare abstract class Model<TCreate = unknown> {
    abstract get entityType(): string;
    setValues(data: TCreate): void;
    static upsert<E, T extends Model<E>>(this: ObjectType<T>, data: E[], options?: UpsertOptions): Promise<void>;
    static update<E, T extends Model<E>>(this: ObjectType<T>, data: E[], options?: UpsertOptions): Promise<void>;
    static read<T extends Model>(this: ObjectType<T>, request: ReadRequest): Promise<T[]>;
}
export {};
