"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Model = void 0;
const class_transformer_1 = require("class-transformer");
const InsertQueryBuilder_1 = require("../../core/write/InsertQueryBuilder");
const ConfigService_1 = require("../../services/ConfigService");
const InsertService_1 = require("../../services/InsertService");
var ConditionType;
(function (ConditionType) {
    ConditionType["Basic"] = "basic";
    ConditionType["Date"] = "date";
})(ConditionType || (ConditionType = {}));
class Model {
    setValues(data) {
        Object.assign(this, data);
    }
    static async upsert(data, options = {}) {
        const chunkSize = options.chunkSize ||
            ConfigService_1.ConfigService.instance.chunkSize ||
            data.length;
        let startIndex = 0;
        while (startIndex < data.length) {
            const chunk = data.slice(startIndex, startIndex + chunkSize);
            const dataInstances = chunk
                .slice(startIndex, startIndex + chunkSize)
                .map((x) => {
                return (0, class_transformer_1.plainToClass)(this, x);
            });
            const queries = new InsertQueryBuilder_1.InsertQueryBuilder(this)
                .setData(dataInstances)
                .getQueries();
            if (queries.length) {
                await InsertService_1.InsertService.instance.insert(queries);
            }
            startIndex += chunkSize;
        }
    }
    static async update(data, options = {}) {
        return Model.upsert.bind(this)(data, options);
    }
    static async read(request) {
        console.log({ request });
        throw new Error("Not implemented!");
    }
}
exports.Model = Model;
//# sourceMappingURL=Model.js.map