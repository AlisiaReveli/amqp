import { ModelMap } from './index';
import { ObjectType } from '../core/types';
import { Model, ReadRequest, UpsertOptions } from './base/Model';
declare type InstanceType<T> = T extends ObjectType<infer E> ? E : never;
declare type ModelName = keyof typeof ModelMap;
export declare type ModelInstanceType<T extends ModelName> = InstanceType<typeof ModelMap[T]>;
declare type CreateMethodOf<E extends Model> = E['setValues'];
declare type Arg<T> = T extends (arg: infer A) => void ? A : never;
export declare type CreateTypeOf<E extends Model> = Arg<CreateMethodOf<E>>;
export declare type DbModelStatic<T extends Model> = {
    update(data: CreateTypeOf<T>[], options?: UpsertOptions): Promise<void>;
    upsert(data: CreateTypeOf<T>[], options?: UpsertOptions): Promise<void>;
    read(request: ReadRequest): Promise<T[]>;
};
export {};
