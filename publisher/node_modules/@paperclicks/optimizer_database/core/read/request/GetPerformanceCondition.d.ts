import { ReadQuery } from '../sql/ReadQuery';
export declare type ConditionOperator = '=' | '>' | '<' | 'like' | 'ilike' | 'in' | 'not in' | 'is';
declare type SqlFunctionCall = {
    sqlFunction: string;
    value: string;
};
declare type ConditionRightValue = string | number | boolean | null | SqlFunctionCall;
export declare type GetPerformanceConditionArgs = [
    left: string,
    operator: ConditionOperator,
    right: ConditionRightValue
];
export declare class GetPerformanceCondition {
    private readonly _left;
    private readonly _operator;
    private readonly _right;
    toString(): string;
    constructor(...[left, operator, right]: GetPerformanceConditionArgs);
    get left(): string;
    get right(): ConditionRightValue;
    get operator(): ConditionOperator;
    get fields(): string[];
    updateQuery(query: ReadQuery.Query, having?: boolean): ReadQuery.Query;
}
export {};
