"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetPerformanceRequest = void 0;
const GetPerformanceCondition_1 = require("./GetPerformanceCondition");
const constants_1 = require("../constants");
const ConditionSet_1 = require("./ConditionSet");
class GetPerformanceRequest {
    constructor({ conditions, fields, custom_formulas }, _model, _performanceModel) {
        this._model = _model;
        this._conditions = new ConditionSet_1.ConditionSet([]);
        this._customFormulas = [];
        this._fields = fields;
        for (const condition of conditions) {
            this._conditions.add(new GetPerformanceCondition_1.GetPerformanceCondition(...condition));
        }
        this._customFormulas = custom_formulas || [];
        /*
         * Every query must include the entity type discriminator on the tables
         */
        const entityTypeDiscriminator = new _model().entityType;
        this._conditions.add(new GetPerformanceCondition_1.GetPerformanceCondition(constants_1.ENTITY_TYPE_DISCRIMINATOR, '=', _performanceModel
            ? new _performanceModel().entityType ||
                entityTypeDiscriminator
            : entityTypeDiscriminator));
        /*
         * If its a performance table request the performance_type discriminator must be included
         */
        if (_performanceModel) {
            this._conditions.add(new GetPerformanceCondition_1.GetPerformanceCondition(constants_1.PERFORMANCE_TYPE_DISCRIMINATOR, '=', _performanceModel.name));
        }
    }
    static from(current, performanceModel) {
        const performanceRequest = new GetPerformanceRequest({
            conditions: [],
            fields: current._fields,
            custom_formulas: current._customFormulas,
        }, current._model, performanceModel);
        for (const currentCondition of current._conditions.list) {
            performanceRequest._conditions.add(currentCondition);
        }
        return performanceRequest;
    }
    get customFormulas() {
        return this._customFormulas;
    }
    get allFields() {
        const fields = [
            ...this._fields,
            ...this._conditions.list.map((x) => x.fields).flat(),
        ].map((x) => {
            return { value: x, alias: x };
        });
        return fields;
    }
    get selectFields() {
        return this._fields;
    }
    findConditions(field) {
        return this._conditions.findConditions(field);
    }
    get conditions() {
        return this._conditions.list;
    }
    get model() {
        return this._model;
    }
}
exports.GetPerformanceRequest = GetPerformanceRequest;
//# sourceMappingURL=GetPerformanceRequest.js.map