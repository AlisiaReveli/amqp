import { GetPerformanceCondition, GetPerformanceConditionArgs } from './GetPerformanceCondition';
import { EntityModel } from '../../../models/base/EntityModel';
import { PerformanceModel } from '../../../models/base/PerformanceModel';
import { ObjectType } from '../../types';
import { FormulaField } from '../sql/formulas/StaticFormulas';
export declare type GetPerformanceArgs = {
    conditions: GetPerformanceConditionArgs[];
    fields: string[];
    custom_formulas?: FormulaField[];
};
export declare class GetPerformanceRequest {
    private _model;
    private _conditions;
    private _fields;
    private _customFormulas;
    constructor({ conditions, fields, custom_formulas }: GetPerformanceArgs, _model: ObjectType<EntityModel>, _performanceModel?: ObjectType<PerformanceModel>);
    static from(current: GetPerformanceRequest, performanceModel: ObjectType<PerformanceModel>): GetPerformanceRequest;
    get customFormulas(): FormulaField[];
    get allFields(): {
        alias: string;
        value: string;
    }[];
    get selectFields(): string[];
    findConditions(field: string): GetPerformanceCondition[];
    get conditions(): Array<GetPerformanceCondition>;
    get model(): ObjectType<EntityModel>;
}
