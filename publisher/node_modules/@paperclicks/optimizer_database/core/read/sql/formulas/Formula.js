"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Formula = void 0;
const mathjs = __importStar(require("mathjs"));
const StaticFormulas_1 = require("./StaticFormulas");
class Formula {
    constructor(_alias, formula, customFormulas = []) {
        this._alias = _alias;
        this.formula = formula;
        this.expand(customFormulas);
    }
    expand(customFormulas = []) {
        const parsed = mathjs.parse(this.formula);
        this.node = new StaticFormulas_1.StaticFormulas(customFormulas).expandNode(parsed);
    }
    get alias() {
        return this._alias;
    }
    getSql(renameFields, aggregatedFields) {
        return this.buildSql(this.node, renameFields, aggregatedFields);
    }
    getDependencies() {
        const symbols = new Set();
        this.node.traverse((n) => {
            if (n.type === 'SymbolNode') {
                symbols.add(n.name);
            }
        });
        return Array.from(symbols);
    }
    buildSql(node, innerQueryAliases, aggregatedFields) {
        switch (node.type) {
            case 'ConstantNode':
                return node.value;
            case 'ParenthesisNode':
                return `(${this.buildSql(node.content, innerQueryAliases, aggregatedFields)})`;
            case 'SymbolNode': {
                // const isAggregated = aggregatedFields.has(node.name);
                if (!innerQueryAliases[node.name]) {
                    return '0';
                }
                const name = innerQueryAliases[node.name] || node.name;
                return name;
            }
            case 'OperatorNode':
                const [left, right] = node.args;
                if (node.op === '/') {
                    const [left, right] = node.args;
                    return `COALESCE(${this.buildSql(left, innerQueryAliases, aggregatedFields)} ${node.op} NULLIF(${this.buildSql(right, innerQueryAliases, aggregatedFields)}, 0), 0)`;
                }
                if (node.args.length === 1) {
                    return `${node.op} ${this.buildSql(node.args[0], innerQueryAliases, aggregatedFields)}`;
                }
                return `${this.buildSql(left, innerQueryAliases, aggregatedFields)} ${node.op} ${this.buildSql(right, innerQueryAliases, aggregatedFields)}`;
        }
        return '';
    }
}
exports.Formula = Formula;
//# sourceMappingURL=Formula.js.map