import { ReadQuery } from '../sql/ReadQuery';
import { ModelSchema } from '../../schema/model/schema/ModelSchema';
import { ModelSchemaField } from '../../schema/model/schema/ModelSchemaField';
import { TableSchema } from '../../schema/table/schema/TableSchema';
import { TableSchemaField } from '../../schema/table/schema/TableSchemaField';
import { ModelJoin, ModelJoinField } from '../../types';
import { BaseQueryBuilder } from './BaseQueryBuilder';
import { GetPerformanceRequest } from '../request/GetPerformanceRequest';
export declare class PerformanceQueryBuilder extends BaseQueryBuilder {
    private _request;
    private _model;
    private _type;
    constructor(_request: GetPerformanceRequest, _model: ModelJoin, _type: string);
    protected get type(): string;
    protected get modelSchema(): ModelSchema;
    protected get fieldSet(): Set<string>;
    get aggregatedFields(): Set<string>;
    get joinFields(): Array<ModelJoinField>;
    /**
     * Add a particular field to the select clause of the query
     * and if applicable add it to the where/having clauses
     *
     * @protected
     * @param {TableSchemaField} field
     * @param {ModelSchemaField} modelField
     * @param {ReadQuery.Query} query
     * @returns  {ReadQuery.Query}
     * @memberof PerformanceQueryBuilder
     */
    protected addQueryField(field: TableSchemaField, modelField: ModelSchemaField, query: ReadQuery.Query): ReadQuery.Query;
    /**
     * Return the {@link ReadQuery.Query} object for a particular table
     * Since this is the query builder for the performance models
     * if no aggregation field is used in the query return null
     *
     * @protected
     * @param {TableSchema} table
     * @param {Map<TableSchemaField, Array<ModelSchemaField>>} fields
     * @returns  {(ReadQuery.Query | null)}
     * @memberof PerformanceQueryBuilder
     */
    protected buildTableQuery(table: TableSchema, fields: Map<TableSchemaField, Set<ModelSchemaField>>): ReadQuery.Query | null;
}
