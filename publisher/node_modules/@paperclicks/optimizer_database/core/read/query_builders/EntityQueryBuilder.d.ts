import { ReadQuery } from '../sql/ReadQuery';
import { ModelSchema } from '../../schema/model/schema/ModelSchema';
import { ModelSchemaField } from '../../schema/model/schema/ModelSchemaField';
import { TableSchemaField } from '../../schema/table/schema/TableSchemaField';
import { BaseQueryBuilder } from './BaseQueryBuilder';
import { GetPerformanceRequest } from '../request/GetPerformanceRequest';
export declare class EntityQueryBuilder extends BaseQueryBuilder {
    private _request;
    constructor(_request: GetPerformanceRequest);
    /**
     * Save the inner query builders for the performance models
     *
     * @private
     * @type {Array<PerformanceQueryBuilder>}
     * @memberof EntityQueryBuilder
     */
    private _joins;
    /**
     * Return the entity type
     *
     * @readonly
     * @protected
     * @type {string}
     * @memberof EntityQueryBuilder
     */
    protected get type(): string;
    /**
     * Return the ModelSchema for this entity
     *
     * @readonly
     * @protected
     * @type {ModelSchema}
     * @memberof EntityQueryBuilder
     */
    protected get modelSchema(): ModelSchema;
    /**
     * Add a single field to the select clause of the query
     * and if requested to the where clause
     *
     * @protected
     * @param {TableSchemaField} field
     * @param {ModelSchemaField} modelField
     * @param {ReadQuery.Query} query
     * @returns  {ReadQuery.Query}
     * @memberof EntityQueryBuilder
     */
    protected addQueryField(field: TableSchemaField, modelField: ModelSchemaField, query: ReadQuery.Query): ReadQuery.Query;
    /**
     * Return the full query joined with the performance models
     *
     * @returns  {ReadQuery.Query}
     * @memberof EntityQueryBuilder
     */
    getQuery(): ReadQuery.Query;
    addWheresToQuery(query: ReadQuery.Query): ReadQuery.Query;
    /**
     * Return the EntityTable query for this  EntityModel
     *
     * @private
     * @returns  {{
     * 		query: ReadQuery.Query;
     * 		fieldMap: Record<string, string>;
     * 	}}
     * @memberof EntityQueryBuilder
     */
    private getEntityQuery;
    /**
     * Add the applicable fields to the select clause of the query
     *
     * @private
     * @param {ReadQuery.Query} query
     * @returns  {ReadQuery.Query}
     * @memberof EntityQueryBuilder
     */
    private selectFieldsFromQuery;
    /**
     * Return the unique set of requested fields for this query
     *
     * @readonly
     * @protected
     * @type {Set<string>}
     * @memberof EntityQueryBuilder
     */
    protected get fieldSet(): Set<string>;
}
