import 'reflect-metadata';
import { ModelJoinField, ObjectType } from '../../../types';
import { PerformanceModel } from '../../../../models/base/PerformanceModel';
import { FieldTransformFunction } from '../schema/ModelSchemaField';
export declare function AutoField<T>(fields: Array<keyof T>, { required }?: {
    required: boolean;
}): (target: T, propertyKey: string | symbol) => void;
export declare function Required(): (target: Object, propertyKey: string | symbol) => void;
export declare enum AggregateFunction {
    SUM = "sum"
}
export declare type ColumnOptions = {
    aggregate?: AggregateFunction;
    is_int?: boolean;
};
export declare function Column(options?: ColumnOptions): (target: Object, propertyKey: string | symbol) => void;
export declare function OneToMany<TLeft, TRight extends PerformanceModel>(model: ObjectType<TRight>, join_on: Array<ModelJoinField<TLeft, TRight>>): (target: TLeft, propertyKey: string | symbol) => void;
export declare function Transform(fn: FieldTransformFunction): (target: Object, propertyKey: string | symbol) => void;
export declare function TrafficSourceTypes(...types: string[]): (target: Object) => void;
