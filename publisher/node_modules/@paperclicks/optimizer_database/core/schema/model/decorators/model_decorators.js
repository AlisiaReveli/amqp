"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrafficSourceTypes = exports.Transform = exports.OneToMany = exports.Column = exports.AggregateFunction = exports.Required = exports.AutoField = void 0;
/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable no-console */
require("reflect-metadata");
const ModelSchemaCollection_1 = require("../schema/ModelSchemaCollection");
function AutoField(fields, { required } = { required: true }) {
    return (target, propertyKey) => {
        if (typeof propertyKey === 'string') {
            const schemaModel = ModelSchemaCollection_1.AllModelSchemas.getModel(target.constructor);
            schemaModel.addAutoField(propertyKey, fields);
            if (required) {
                schemaModel.getField(propertyKey).required = true;
            }
        }
    };
}
exports.AutoField = AutoField;
function Required() {
    return (target, propertyKey) => {
        if (typeof propertyKey === 'string') {
            const field = ModelSchemaCollection_1.AllModelSchemas.getModel(target.constructor).getField(propertyKey);
            field.required = true;
        }
    };
}
exports.Required = Required;
var AggregateFunction;
(function (AggregateFunction) {
    AggregateFunction["SUM"] = "sum";
})(AggregateFunction = exports.AggregateFunction || (exports.AggregateFunction = {}));
function Column(options) {
    return (target, propertyKey) => {
        if (typeof propertyKey === 'string') {
            const field = ModelSchemaCollection_1.AllModelSchemas.getModel(target.constructor).getField(propertyKey);
            field.column = true;
            if (options) {
                if (options.is_int) {
                    field.int = true;
                }
                if (options.aggregate) {
                    field.aggregateFunction = options.aggregate;
                }
            }
        }
    };
}
exports.Column = Column;
function OneToMany(model, join_on) {
    return (target, propertyKey) => {
        const schemaModel = ModelSchemaCollection_1.AllModelSchemas.getModel(target.constructor);
        const joinModel = ModelSchemaCollection_1.AllModelSchemas.getModel(model);
        schemaModel.addJoinModel(joinModel, join_on);
    };
}
exports.OneToMany = OneToMany;
function Transform(fn) {
    return (target, propertyKey) => {
        if (typeof propertyKey === 'string') {
            ModelSchemaCollection_1.AllModelSchemas.getModel(target.constructor).getField(propertyKey).transformer = fn;
        }
    };
}
exports.Transform = Transform;
function TrafficSourceTypes(...types) {
    return (target) => {
        ModelSchemaCollection_1.AllModelSchemas.getModel(target).addTrafficSourceTypes(types);
    };
}
exports.TrafficSourceTypes = TrafficSourceTypes;
//# sourceMappingURL=model_decorators.js.map