import { AggregateFunction } from '../decorators/model_decorators';
import { ModelSchema } from './ModelSchema';
import { TableSchema } from '../../table/schema/TableSchema';
import { TableSchemaField } from '../../table/schema/TableSchemaField';
export declare type FieldTransformFunction = <T>(value: unknown, context: Record<string, unknown>) => T;
export declare class ModelSchemaField {
    protected _name: string;
    model: ModelSchema;
    constructor(_name: string, model: ModelSchema);
    protected _required?: boolean;
    protected _column?: boolean;
    protected _int?: boolean;
    protected _aggregateFunction?: AggregateFunction;
    protected _tableFields?: Array<TableSchemaField>;
    protected _transformer?: FieldTransformFunction;
    protected _additionalField?: boolean;
    get name(): string;
    set name(value: string);
    set additionalField(value: boolean);
    addTableField(table: TableSchema, field: string): void;
    set required(value: boolean);
    set column(value: boolean);
    set int(value: boolean);
    set aggregateFunction(fn: AggregateFunction | undefined);
    get aggregateFunction(): AggregateFunction | undefined;
    set transformer(fn: FieldTransformFunction);
    get tableFields(): Array<TableSchemaField>;
    /**
     * Extract the default value for this field
     * @protected
     */
    protected get defaultValue(): unknown;
    /**
     * Return the value for this field in a given record
     * Fallback to the default value if it exists (given on the {@link Model} class constructor or field default value)
     * Validate if it exists (if required)
     * @param data
     * @param required
     */
    getValue(data: Record<string, unknown>, required?: boolean | undefined): unknown;
}
export declare class SchemaAutoField extends ModelSchemaField {
    private fields;
    constructor(name: string, model: ModelSchema, fields: string[]);
    static fromExistingField(field: ModelSchemaField, fields: string[]): SchemaAutoField;
    getValue(data: Record<string, unknown>): unknown;
}
