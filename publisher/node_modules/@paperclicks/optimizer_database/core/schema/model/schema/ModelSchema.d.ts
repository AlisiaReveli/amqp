import { Model } from '../../../../models/base/Model';
import { ModelSchemaField } from './ModelSchemaField';
import { ModelJoin, ModelJoinField, ObjectType } from '../../../types';
export declare class ModelSchema {
    modelConstructor: ObjectType<Model>;
    private fieldsMap;
    private joinWithModels?;
    private trafficSourceTypes;
    private get baseClass();
    private get baseModelSchema();
    constructor(modelConstructor: ObjectType<Model>);
    get fields(): ModelSchemaField[];
    addField(name: string): void;
    /**
     * Return true only if this model (not its base class) has the field
     * If we need to override a field this becomes helpful because it redefines the field
     *
     * @param {string} name
     * @returns  {boolean}
     * @memberof ModelSchema
     */
    hasOwnField(name: string): boolean;
    /**
     * Register field as auto filed
     * (when model is evaluated this field is generated by piping the field values
     * with `${field1}|${field2}` and processing the md5 of the pipe result)
     *
     * @param {string} name
     * @param {string[]} fields
     * @memberof ModelSchema
     */
    addAutoField(name: string, fields: string[]): void;
    /**
     * Return or create the field
     * If the field exists on the base class (and its decorated) it returns the base class field
     * otherwise it created the field on this class
     *
     * @param {string} name
     * @returns  {ModelSchemaField}
     * @memberof ModelSchema
     */
    getField(name: string): ModelSchemaField;
    /**
     * Register a relation with the performance models
     *
     * @template TLeft
     * @template TRight
     * @param {ModelSchema} schema
     * @param {ModelJoinField<TLeft, TRight>[]} fields
     * @memberof ModelSchema
     */
    addJoinModel<TLeft, TRight>(schema: ModelSchema, fields: ModelJoinField<TLeft, TRight>[]): void;
    /**
     * Return relations with the performance models
     *
     * @readonly
     * @type {Array<ModelJoin>}
     * @memberof ModelSchema
     */
    get joinModels(): Array<ModelJoin>;
    /**
     * Add traffic source types that this model works with
     *
     * @param {string[]} types
     * @memberof ModelSchema
     */
    addTrafficSourceTypes(types: string[]): void;
}
