import { TableSchemaField } from './TableSchemaField';
import { ObjectType } from '../../../types';
import { Table } from '../../../../tables/base/Table';
/**
 * Database table metadata
 *
 * @export
 * @class TableSchema
 */
export declare class TableSchema {
    tableConstructor: ObjectType<Table>;
    private fieldsMap;
    private _writeTableName;
    private _readTableName;
    constructor(tableConstructor: ObjectType<Table>);
    private get baseClass();
    private get baseTableSchema();
    /**
     * Return all table fields
     *
     * @readonly
     * @type {TableSchemaField[]}
     * @memberof TableSchema
     */
    get fields(): TableSchemaField[];
    /**
     * Set table name
     *
     * @memberof TableSchema
     */
    set writeTableName(value: string);
    /**
     * Table to write data to
     *
     * @readonly
     * @type {string}
     * @memberof TableSchema
     */
    get writeTableName(): string;
    set readTableName(value: string);
    /**
     * Table to read data from (materialized table)
     *
     * @type {string}
     * @memberof TableSchema
     */
    get readTableName(): string;
    /**
     * Check if this table contains a field
     *
     * @private
     * @param {string} name
     * @returns  {boolean}
     * @memberof TableSchema
     */
    private hasOwnField;
    /**
     * Add a field by name
     *
     * @param {string} name
     * @memberof TableSchema
     */
    addField(name: string): void;
    /**
     * Get a single table field
     *
     * @param {string} name
     * @returns  {TableSchemaField}
     * @memberof TableSchema
     */
    getField(name: string): TableSchemaField;
}
