"use strict";
/* eslint-disable @typescript-eslint/ban-types */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToTable = exports.ReadTableName = exports.WriteTableName = exports.FieldType = void 0;
const TableSchemaCollection_1 = require("../schema/TableSchemaCollection");
const ModelSchemaCollection_1 = require("../../model/schema/ModelSchemaCollection");
function FieldType(type) {
    return (target, propertyKey) => {
        if (typeof propertyKey === 'string') {
            const field = TableSchemaCollection_1.AllTableSchemas.getTable(target.constructor).getField(propertyKey);
            field.fieldType = type;
        }
    };
}
exports.FieldType = FieldType;
function WriteTableName(name) {
    return (target) => {
        TableSchemaCollection_1.AllTableSchemas.getTable(target).writeTableName =
            name;
    };
}
exports.WriteTableName = WriteTableName;
function ReadTableName(name) {
    return (target) => {
        TableSchemaCollection_1.AllTableSchemas.getTable(target).readTableName =
            name;
    };
}
exports.ReadTableName = ReadTableName;
function ToTable(t, tableField) {
    return (target, propertyKey) => {
        tableField = tableField || propertyKey;
        if (typeof propertyKey === 'string' && typeof tableField === 'string') {
            const tableSchema = TableSchemaCollection_1.AllTableSchemas.getTable(t);
            const modelField = ModelSchemaCollection_1.AllModelSchemas.getModel(target.constructor).getField(propertyKey);
            modelField.addTableField(tableSchema, tableField);
        }
    };
}
exports.ToTable = ToTable;
//# sourceMappingURL=table_decorators.js.map