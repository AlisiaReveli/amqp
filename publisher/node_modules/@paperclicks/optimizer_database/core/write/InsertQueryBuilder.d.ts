import { Model } from '../../models/base/Model';
import { GoInsertQuery } from './InsertQuery';
import { ObjectType } from '../types';
/**
 * Use this insert query builder to generate {@link InsertQuery} items for each table
 * Usage: new InsertQueryBuilder(Model).setData([]).getQueries()
 * @export
 * @class InsertQueryBuilder
 * @template T
 */
export declare class InsertQueryBuilder<T extends Model> {
    private _modelSchema;
    private _tableData;
    /**
     * Creates an instance of InsertQueryBuilder.
     * @param {ObjectType<T>} model
     * @memberof InsertQueryBuilder
     */
    constructor(model: ObjectType<T>);
    /**
     * Build the local map of Tables keeping an array of dictionaries
     * for each row to be inserted at each particular table
     *
     * @param {T[]} data
     * @returns  {this}
     * @memberof InsertQueryBuilder
     */
    setData(data: T[]): this;
    /**
     * Build queries that encapsulate the items that should be inserted in the database
     *
     * @returns  {GoInsertQuery[]}
     * @memberof InsertQueryBuilder
     */
    getQueries(): GoInsertQuery[];
    /**
     * For a single item generate a map using Tables as a key and a dict
     * as its value to insert
     *
     * @private
     * @param {T} data
     * @returns  {Map<TableSchema, Record<string, unknown>>}
     * @memberof InsertQueryBuilder
     */
    private getModelFieldValues;
}
