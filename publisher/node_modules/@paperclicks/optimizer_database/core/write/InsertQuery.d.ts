import type { InsertQueryColumn, InsertQueryValueItem } from './types';
import { TableSchema } from '../schema/table/schema/TableSchema';
export declare class GoInsertQuery {
    private readonly _table_name;
    private readonly _columns;
    private readonly _values;
    private static _dataTypeConversions;
    /**
     * Converts Clickhouse data type to GoProxy data type
     *
     * @private
     * @param {CHType} type
     * @returns  {GoDataType}
     * @memberof GoInsertQuery
     */
    private convertToGoDataType;
    /**
     * Creates an instance of GoInsertQuery.
     * @param {TableSchema} schema
     * @param {Array<Record<string, InsertQueryValueItem>>} data
     * @memberof GoInsertQuery
     */
    constructor(schema: TableSchema, data: Array<Record<string, InsertQueryValueItem>>);
    /**
     * Table name
     *
     * @readonly
     * @type {string}
     * @memberof GoInsertQuery
     */
    get tableName(): string;
    /**
     * Values columns
     *
     * @readonly
     * @type {Array<InsertQueryColumn>}
     * @memberof GoInsertQuery
     */
    get columns(): Array<InsertQueryColumn>;
    /**
     * Insert values
     *
     * @readonly
     * @type {Array<Array<InsertQueryValueItem>>}
     * @memberof GoInsertQuery
     */
    get values(): Array<Array<InsertQueryValueItem>>;
    /**
     * Return table name
     *
     * @readonly
     * @type {(TableSchema | undefined)}
     * @memberof GoInsertQuery
     */
    get table(): TableSchema | undefined;
    /**
     * Return the full payload to be sent to the insert proxy
     *
     * @readonly
     * @type {{
     * 		table_name: string;
     * 		columns: Array<InsertQueryColumn>;
     * 		values: Array<Array<InsertQueryValueItem>>;
     * 	}}
     * @memberof GoInsertQuery
     */
    get payload(): {
        table_name: string;
        columns: Array<InsertQueryColumn>;
        values: Array<Array<InsertQueryValueItem>>;
    };
}
