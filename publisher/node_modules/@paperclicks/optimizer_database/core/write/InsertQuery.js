"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoInsertQuery = void 0;
const types_1 = require("./types");
const TableSchemaCollection_1 = require("../schema/table/schema/TableSchemaCollection");
class GoInsertQuery {
    /**
     * Creates an instance of GoInsertQuery.
     * @param {TableSchema} schema
     * @param {Array<Record<string, InsertQueryValueItem>>} data
     * @memberof GoInsertQuery
     */
    constructor(schema, data) {
        this._table_name = schema.writeTableName;
        /**
         * Create columns for this table
         */
        this._columns = schema.fields.map((x) => ({
            name: x.name,
            type: this.convertToGoDataType(x.fieldType),
        }));
        /*
         * Unwrap each value ordering the keys as in table columns
         */
        this._values = data.map((item) => {
            return schema.fields.map((field) => {
                return item[field.name] || field.transformValue(null);
            });
        });
    }
    /**
     * Converts Clickhouse data type to GoProxy data type
     *
     * @private
     * @param {CHType} type
     * @returns  {GoDataType}
     * @memberof GoInsertQuery
     */
    convertToGoDataType(type) {
        if (type in GoInsertQuery._dataTypeConversions) {
            return GoInsertQuery._dataTypeConversions[type];
        }
        throw new Error(`Unknown type: ${type}`);
    }
    /**
     * Table name
     *
     * @readonly
     * @type {string}
     * @memberof GoInsertQuery
     */
    get tableName() {
        return this._table_name;
    }
    /**
     * Values columns
     *
     * @readonly
     * @type {Array<InsertQueryColumn>}
     * @memberof GoInsertQuery
     */
    get columns() {
        return this._columns;
    }
    /**
     * Insert values
     *
     * @readonly
     * @type {Array<Array<InsertQueryValueItem>>}
     * @memberof GoInsertQuery
     */
    get values() {
        return this._values;
    }
    /**
     * Return table name
     *
     * @readonly
     * @type {(TableSchema | undefined)}
     * @memberof GoInsertQuery
     */
    get table() {
        return TableSchemaCollection_1.AllTableSchemas.getTableByName(this.tableName);
    }
    /**
     * Return the full payload to be sent to the insert proxy
     *
     * @readonly
     * @type {{
     * 		table_name: string;
     * 		columns: Array<InsertQueryColumn>;
     * 		values: Array<Array<InsertQueryValueItem>>;
     * 	}}
     * @memberof GoInsertQuery
     */
    get payload() {
        const value = {
            table_name: this.tableName,
            columns: this.columns,
            values: this.values,
        };
        return value;
    }
}
exports.GoInsertQuery = GoInsertQuery;
GoInsertQuery._dataTypeConversions = {
    [types_1.CHType.String]: 'string',
    [types_1.CHType.NullableString]: 'string',
    [types_1.CHType.Float32]: 'float32',
    [types_1.CHType.Float64]: 'float64',
    [types_1.CHType.UInt32]: 'uint',
    [types_1.CHType.NullableFloat64]: 'float64',
    [types_1.CHType.Int32]: 'int',
    [types_1.CHType.NullableInt32]: 'int',
    [types_1.CHType.UInt8]: 'bool',
    [types_1.CHType.NullableUInt8]: 'bool',
    [types_1.CHType.DateTime]: 'DateTime',
    [types_1.CHType.Int64]: 'int',
};
//# sourceMappingURL=InsertQuery.js.map