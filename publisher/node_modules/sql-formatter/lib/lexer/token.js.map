{"version":3,"file":"token.js","names":["TokenType","EOF_TOKEN","type","EOF","raw","text","start","Infinity","end","testToken","compareToken","token","isToken","AS","RESERVED_KEYWORD","AND","RESERVED_LOGICAL_OPERATOR","ARRAY","BETWEEN","CASE","RESERVED_CASE_START","CAST","RESERVED_FUNCTION_NAME","BY","END","RESERVED_CASE_END","FROM","RESERVED_COMMAND","LIMIT","SELECT","test","SET","STRUCT","TABLE","WINDOW","WITH","isReserved","RESERVED_PHRASE","RESERVED_DEPENDENT_CLAUSE","RESERVED_SET_OPERATION","RESERVED_JOIN","isParameter","NUMBERED_PARAMETER","NAMED_PARAMETER","POSITIONAL_PARAMETER","QUOTED_PARAMETER"],"sources":["../../src/lexer/token.ts"],"sourcesContent":["/** Token type enum for all possible Token categories */\nexport enum TokenType {\n  QUOTED_IDENTIFIER = 'QUOTED_IDENTIFIER',\n  IDENTIFIER = 'IDENTIFIER',\n  STRING = 'STRING',\n  VARIABLE = 'VARIABLE',\n  RESERVED_KEYWORD = 'RESERVED_KEYWORD',\n  RESERVED_FUNCTION_NAME = 'RESERVED_FUNCTION_NAME',\n  RESERVED_LOGICAL_OPERATOR = 'RESERVED_LOGICAL_OPERATOR',\n  RESERVED_PHRASE = 'RESERVED_PHRASE',\n  RESERVED_DEPENDENT_CLAUSE = 'RESERVED_DEPENDENT_CLAUSE',\n  RESERVED_SET_OPERATION = 'RESERVED_SET_OPERATION',\n  RESERVED_COMMAND = 'RESERVED_COMMAND',\n  RESERVED_JOIN = 'RESERVED_JOIN',\n  RESERVED_CASE_START = 'RESERVED_CASE_START',\n  RESERVED_CASE_END = 'RESERVED_CASE_END',\n  OPERATOR = 'OPERATOR',\n  COMMA = 'COMMA',\n  OPEN_PAREN = 'OPEN_PAREN',\n  CLOSE_PAREN = 'CLOSE_PAREN',\n  LINE_COMMENT = 'LINE_COMMENT',\n  BLOCK_COMMENT = 'BLOCK_COMMENT',\n  NUMBER = 'NUMBER',\n  NAMED_PARAMETER = 'NAMED_PARAMETER',\n  QUOTED_PARAMETER = 'QUOTED_PARAMETER',\n  NUMBERED_PARAMETER = 'NUMBERED_PARAMETER',\n  POSITIONAL_PARAMETER = 'POSITIONAL_PARAMETER',\n  DELIMITER = 'DELIMITER',\n  EOF = 'EOF',\n}\n\n/** Struct to store the most basic cohesive unit of language grammar */\nexport interface Token {\n  type: TokenType;\n  raw: string; // The raw original text that was matched\n  text: string; // Cleaned up text e.g. keyword converted to uppercase and extra spaces removed\n  key?: string;\n  start: number; // 0-based index of the token in the whole query string\n  end: number; // 0-based index of where the token ends in the query string\n  precedingWhitespace?: string; // Whitespace before this token, if any\n}\n\n/**\n * For use as a \"missing token\"\n * e.g. in lookAhead and lookBehind to avoid dealing with null values\n */\nexport const EOF_TOKEN: Token = {\n  type: TokenType.EOF,\n  raw: '«EOF»',\n  text: '«EOF»',\n  start: Infinity,\n  end: Infinity,\n};\n\n/** Checks if two tokens are equivalent */\nexport const testToken =\n  (compareToken: { type: TokenType; text: string }) =>\n  (token: Token): boolean =>\n    token.type === compareToken.type && token.text === compareToken.text;\n\n/** Util object that allows for easy checking of Reserved Keywords */\nexport const isToken = {\n  AS: testToken({ text: 'AS', type: TokenType.RESERVED_KEYWORD }),\n  AND: testToken({ text: 'AND', type: TokenType.RESERVED_LOGICAL_OPERATOR }),\n  ARRAY: testToken({ text: 'ARRAY', type: TokenType.RESERVED_KEYWORD }),\n  BETWEEN: testToken({ text: 'BETWEEN', type: TokenType.RESERVED_KEYWORD }),\n  CASE: testToken({ text: 'CASE', type: TokenType.RESERVED_CASE_START }),\n  CAST: testToken({ text: 'CAST', type: TokenType.RESERVED_FUNCTION_NAME }),\n  BY: testToken({ text: 'BY', type: TokenType.RESERVED_KEYWORD }),\n  END: testToken({ text: 'END', type: TokenType.RESERVED_CASE_END }),\n  FROM: testToken({ text: 'FROM', type: TokenType.RESERVED_COMMAND }),\n  LIMIT: testToken({ text: 'LIMIT', type: TokenType.RESERVED_COMMAND }),\n  SELECT: (token: Token) =>\n    /^SELECT\\b/.test(token.text) && token.type === TokenType.RESERVED_COMMAND,\n  SET: testToken({ text: 'SET', type: TokenType.RESERVED_COMMAND }),\n  STRUCT: testToken({ text: 'STRUCT', type: TokenType.RESERVED_KEYWORD }),\n  TABLE: testToken({ text: 'TABLE', type: TokenType.RESERVED_KEYWORD }),\n  WINDOW: testToken({ text: 'WINDOW', type: TokenType.RESERVED_COMMAND }),\n  WITH: testToken({ text: 'WITH', type: TokenType.RESERVED_COMMAND }),\n};\n\n/** Checks if token is any Reserved Keyword or Command */\nexport const isReserved = (token: Token): boolean =>\n  token.type === TokenType.RESERVED_KEYWORD ||\n  token.type === TokenType.RESERVED_FUNCTION_NAME ||\n  token.type === TokenType.RESERVED_LOGICAL_OPERATOR ||\n  token.type === TokenType.RESERVED_PHRASE ||\n  token.type === TokenType.RESERVED_DEPENDENT_CLAUSE ||\n  token.type === TokenType.RESERVED_COMMAND ||\n  token.type === TokenType.RESERVED_SET_OPERATION ||\n  token.type === TokenType.RESERVED_JOIN ||\n  token.type === TokenType.RESERVED_CASE_START ||\n  token.type === TokenType.RESERVED_CASE_END;\n\n/** checks if token is one of the parameter tokens */\nexport const isParameter = (token: Token): boolean =>\n  token.type === TokenType.NUMBERED_PARAMETER ||\n  token.type === TokenType.NAMED_PARAMETER ||\n  token.type === TokenType.POSITIONAL_PARAMETER ||\n  token.type === TokenType.QUOTED_PARAMETER;\n"],"mappings":"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"}