{"version":3,"file":"Tokenizer.js","names":["Tokenizer","cfg","dialectRules","buildDialectRules","input","paramTypesOverrides","rules","buildParamRules","tokens","TokenizerEngine","tokenize","postProcess","validRules","TokenType","BLOCK_COMMENT","regex","LINE_COMMENT","lineComment","lineCommentTypes","COMMA","OPEN_PAREN","parenthesis","openParens","CLOSE_PAREN","closeParens","QUOTED_IDENTIFIER","string","identTypes","NUMBER","RESERVED_CASE_START","value","v","equalizeWhitespace","toUpperCase","RESERVED_CASE_END","RESERVED_COMMAND","reservedWord","reservedCommands","identChars","RESERVED_SET_OPERATION","reservedSetOperations","RESERVED_DEPENDENT_CLAUSE","reservedDependentClauses","RESERVED_JOIN","reservedJoins","RESERVED_PHRASE","reservedPhrases","RESERVED_LOGICAL_OPERATOR","reservedLogicalOperators","RESERVED_FUNCTION_NAME","reservedFunctionNames","RESERVED_KEYWORD","reservedKeywords","VARIABLE","variableTypes","variable","undefined","STRING","stringTypes","IDENTIFIER","identifier","DELIMITER","OPERATOR","operator","operators","paramTypes","named","quoted","numbered","positional","NAMED_PARAMETER","parameter","identifierPattern","paramChars","key","slice","QUOTED_PARAMETER","stringPattern","tokenKey","quoteChar","replace","RegExp","escapeRegExp","NUMBERED_PARAMETER","POSITIONAL_PARAMETER","Object","fromEntries","entries","filter","_","rule"],"sources":["../../src/lexer/Tokenizer.ts"],"sourcesContent":["import { Token, TokenType } from 'src/lexer/token';\nimport * as regex from 'src/lexer/regexFactory';\nimport { ParamTypes, TokenizerOptions } from 'src/lexer/TokenizerOptions';\nimport TokenizerEngine, { type TokenRule } from 'src/lexer/TokenizerEngine';\nimport { escapeRegExp } from 'src/lexer/regexUtil';\nimport { equalizeWhitespace } from 'src/utils';\n\nexport default class Tokenizer {\n  private dialectRules: Partial<Record<TokenType, TokenRule>>;\n\n  constructor(private cfg: TokenizerOptions) {\n    this.dialectRules = this.buildDialectRules(cfg);\n  }\n\n  public tokenize(input: string, paramTypesOverrides: ParamTypes): Token[] {\n    const rules = {\n      ...this.dialectRules,\n      ...this.buildParamRules(this.cfg, paramTypesOverrides),\n    };\n    const tokens = new TokenizerEngine(rules).tokenize(input);\n    return this.cfg.postProcess ? this.cfg.postProcess(tokens) : tokens;\n  }\n\n  // These rules can be cached as they only depend on\n  // the Tokenizer config options specified for each SQL dialect\n  private buildDialectRules(cfg: TokenizerOptions): Partial<Record<TokenType, TokenRule>> {\n    return this.validRules({\n      [TokenType.BLOCK_COMMENT]: { regex: /(\\/\\*[^]*?(?:\\*\\/|$))/uy },\n      [TokenType.LINE_COMMENT]: {\n        regex: regex.lineComment(cfg.lineCommentTypes ?? ['--']),\n      },\n      [TokenType.COMMA]: { regex: /[,]/y },\n      [TokenType.OPEN_PAREN]: { regex: regex.parenthesis(cfg.openParens ?? ['(']) },\n      [TokenType.CLOSE_PAREN]: { regex: regex.parenthesis(cfg.closeParens ?? [')']) },\n      [TokenType.QUOTED_IDENTIFIER]: { regex: regex.string(cfg.identTypes) },\n      [TokenType.NUMBER]: {\n        regex:\n          /(?:0x[0-9a-fA-F]+|0b[01]+|(?:-\\s*)?[0-9]+(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+(?:\\.[0-9]+)?)?)(?!\\w)/uy,\n      },\n      [TokenType.RESERVED_CASE_START]: {\n        regex: /[Cc][Aa][Ss][Ee]\\b/uy,\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.RESERVED_CASE_END]: {\n        regex: /[Ee][Nn][Dd]\\b/uy,\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.RESERVED_COMMAND]: {\n        regex: regex.reservedWord(cfg.reservedCommands, cfg.identChars),\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.RESERVED_SET_OPERATION]: {\n        regex: regex.reservedWord(cfg.reservedSetOperations, cfg.identChars),\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.RESERVED_DEPENDENT_CLAUSE]: {\n        regex: regex.reservedWord(cfg.reservedDependentClauses, cfg.identChars),\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.RESERVED_JOIN]: {\n        regex: regex.reservedWord(cfg.reservedJoins, cfg.identChars),\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.RESERVED_PHRASE]: {\n        regex: regex.reservedWord(cfg.reservedPhrases ?? [], cfg.identChars),\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.RESERVED_LOGICAL_OPERATOR]: {\n        regex: regex.reservedWord(cfg.reservedLogicalOperators ?? ['AND', 'OR'], cfg.identChars),\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.RESERVED_FUNCTION_NAME]: {\n        regex: regex.reservedWord(cfg.reservedFunctionNames, cfg.identChars),\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.RESERVED_KEYWORD]: {\n        regex: regex.reservedWord(cfg.reservedKeywords, cfg.identChars),\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.VARIABLE]: {\n        regex: cfg.variableTypes ? regex.variable(cfg.variableTypes) : undefined,\n      },\n      [TokenType.STRING]: { regex: regex.string(cfg.stringTypes) },\n      [TokenType.IDENTIFIER]: {\n        regex: regex.identifier(cfg.identChars),\n      },\n      [TokenType.DELIMITER]: { regex: /[;]/uy },\n      [TokenType.OPERATOR]: {\n        regex: regex.operator('+-/*%&|^><=.:$@#?~![]{}', [\n          '<>',\n          '<=',\n          '>=',\n          '!=',\n          ...(cfg.operators ?? []),\n        ]),\n      },\n    });\n  }\n\n  // These rules can't be blindly cached as the paramTypesOverrides object\n  // can differ on each invocation of the format() function.\n  private buildParamRules(\n    cfg: TokenizerOptions,\n    paramTypesOverrides: ParamTypes\n  ): Partial<Record<TokenType, TokenRule>> {\n    // Each dialect has its own default parameter types (if any),\n    // but these can be overriden by the user of the library.\n    const paramTypes = {\n      named: paramTypesOverrides?.named || cfg.paramTypes?.named || [],\n      quoted: paramTypesOverrides?.quoted || cfg.paramTypes?.quoted || [],\n      numbered: paramTypesOverrides?.numbered || cfg.paramTypes?.numbered || [],\n      positional:\n        typeof paramTypesOverrides?.positional === 'boolean'\n          ? paramTypesOverrides.positional\n          : cfg.paramTypes?.positional,\n    };\n\n    return this.validRules({\n      [TokenType.NAMED_PARAMETER]: {\n        regex: regex.parameter(\n          paramTypes.named,\n          regex.identifierPattern(cfg.paramChars || cfg.identChars)\n        ),\n        key: v => v.slice(1),\n      },\n      [TokenType.QUOTED_PARAMETER]: {\n        regex: regex.parameter(paramTypes.quoted, regex.stringPattern(cfg.identTypes)),\n        key: v =>\n          (({ tokenKey, quoteChar }) =>\n            tokenKey.replace(new RegExp(escapeRegExp('\\\\' + quoteChar), 'gu'), quoteChar))({\n            tokenKey: v.slice(2, -1),\n            quoteChar: v.slice(-1),\n          }),\n      },\n      [TokenType.NUMBERED_PARAMETER]: {\n        regex: regex.parameter(paramTypes.numbered, '[0-9]+'),\n        key: v => v.slice(1),\n      },\n      [TokenType.POSITIONAL_PARAMETER]: {\n        regex: paramTypes.positional ? /[?]/y : undefined,\n      },\n    });\n  }\n\n  // filters out rules for token types whose regex is undefined\n  private validRules(\n    rules: Partial<Record<TokenType, TokenRule | { regex: undefined }>>\n  ): Partial<Record<TokenType, TokenRule>> {\n    return Object.fromEntries(Object.entries(rules).filter(([_, rule]) => rule.regex));\n  }\n}\n"],"mappings":"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"}