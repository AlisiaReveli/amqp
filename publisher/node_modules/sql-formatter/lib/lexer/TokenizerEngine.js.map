{"version":3,"file":"TokenizerEngine.js","names":["TokenizerEngine","rules","input","index","tokens","token","length","precedingWhitespace","getWhitespace","getNextToken","Error","slice","push","WHITESPACE_REGEX","lastIndex","matches","exec","undefined","previousToken","matchToken","TokenType","BLOCK_COMMENT","LINE_COMMENT","COMMA","OPEN_PAREN","CLOSE_PAREN","QUOTED_IDENTIFIER","NUMBER","matchReservedWordToken","matchPlaceholderToken","NAMED_PARAMETER","QUOTED_PARAMETER","NUMBERED_PARAMETER","POSITIONAL_PARAMETER","VARIABLE","STRING","IDENTIFIER","DELIMITER","OPERATOR","tokenType","tokenRule","key","text","RESERVED_CASE_START","RESERVED_CASE_END","RESERVED_COMMAND","RESERVED_SET_OPERATION","RESERVED_DEPENDENT_CLAUSE","RESERVED_JOIN","RESERVED_PHRASE","RESERVED_LOGICAL_OPERATOR","RESERVED_FUNCTION_NAME","RESERVED_KEYWORD","rule","match","type","regex","transform","value","matchedToken","outToken","raw","start","end"],"sources":["../../src/lexer/TokenizerEngine.ts"],"sourcesContent":["import { Token, TokenType } from 'src/lexer/token';\nimport { WHITESPACE_REGEX } from './regexUtil';\n\nexport interface TokenRule {\n  regex: RegExp;\n  key?: (token: string) => string;\n  value?: (token: string) => string;\n}\n\nexport default class TokenizerEngine {\n  private rules: Partial<Record<TokenType, TokenRule>>;\n\n  private input = ''; // The input SQL string to process\n\n  private index = 0; // Current position in string\n\n  constructor(rules: Partial<Record<TokenType, TokenRule>>) {\n    this.rules = rules;\n  }\n\n  /**\n   * Takes a SQL string and breaks it into tokens.\n   * Each token is an object with type and value.\n   *\n   * @param {string} input - The SQL string\n   * @returns {Token[]} output token stream\n   */\n  public tokenize(input: string): Token[] {\n    this.input = input;\n    this.index = 0;\n    const tokens: Token[] = [];\n    let token: Token | undefined;\n\n    // Keep processing the string until end is reached\n    while (this.index < this.input.length) {\n      // skip any preceding whitespace\n      const precedingWhitespace = this.getWhitespace();\n\n      if (this.index < this.input.length) {\n        // Get the next token and the token type\n        token = this.getNextToken(token);\n        if (!token) {\n          throw new Error(`Parse error: Unexpected \"${input.slice(this.index, 100)}\"`);\n        }\n\n        tokens.push({ ...token, precedingWhitespace });\n      }\n    }\n    return tokens;\n  }\n\n  private getWhitespace(): string | undefined {\n    WHITESPACE_REGEX.lastIndex = this.index;\n\n    const matches = WHITESPACE_REGEX.exec(this.input);\n    if (matches) {\n      // Advance current position by matched whitespace length\n      this.index += matches[0].length;\n      return matches[0];\n    }\n    return undefined;\n  }\n\n  private getNextToken(previousToken?: Token): Token | undefined {\n    return (\n      this.matchToken(TokenType.BLOCK_COMMENT) ||\n      this.matchToken(TokenType.LINE_COMMENT) ||\n      this.matchToken(TokenType.COMMA) ||\n      this.matchToken(TokenType.OPEN_PAREN) ||\n      this.matchToken(TokenType.CLOSE_PAREN) ||\n      this.matchToken(TokenType.QUOTED_IDENTIFIER) ||\n      this.matchToken(TokenType.NUMBER) ||\n      this.matchReservedWordToken(previousToken) ||\n      this.matchPlaceholderToken(TokenType.NAMED_PARAMETER) ||\n      this.matchPlaceholderToken(TokenType.QUOTED_PARAMETER) ||\n      this.matchPlaceholderToken(TokenType.NUMBERED_PARAMETER) ||\n      this.matchPlaceholderToken(TokenType.POSITIONAL_PARAMETER) ||\n      this.matchToken(TokenType.VARIABLE) ||\n      this.matchToken(TokenType.STRING) ||\n      this.matchToken(TokenType.IDENTIFIER) ||\n      this.matchToken(TokenType.DELIMITER) ||\n      this.matchToken(TokenType.OPERATOR)\n    );\n  }\n\n  private matchPlaceholderToken(tokenType: TokenType): Token | undefined {\n    if (tokenType in this.rules) {\n      const token = this.matchToken(tokenType);\n      const tokenRule = this.rules[tokenType];\n      if (token) {\n        if (tokenRule?.key) {\n          return { ...token, key: tokenRule.key(token.text) };\n        }\n        return token; // POSITIONAL_PARAMETER does not have a key transform function\n      }\n    }\n    return undefined;\n  }\n\n  private matchReservedWordToken(previousToken?: Token): Token | undefined {\n    // A reserved word cannot be preceded by a '.'\n    // this makes it so in \"mytable.from\", \"from\" is not considered a reserved word\n    if (previousToken?.text === '.') {\n      return undefined;\n    }\n\n    // prioritised list of Reserved token types\n    return (\n      this.matchToken(TokenType.RESERVED_CASE_START) ||\n      this.matchToken(TokenType.RESERVED_CASE_END) ||\n      this.matchToken(TokenType.RESERVED_COMMAND) ||\n      this.matchToken(TokenType.RESERVED_SET_OPERATION) ||\n      this.matchToken(TokenType.RESERVED_DEPENDENT_CLAUSE) ||\n      this.matchToken(TokenType.RESERVED_JOIN) ||\n      this.matchToken(TokenType.RESERVED_PHRASE) ||\n      this.matchToken(TokenType.RESERVED_LOGICAL_OPERATOR) ||\n      this.matchToken(TokenType.RESERVED_FUNCTION_NAME) ||\n      this.matchToken(TokenType.RESERVED_KEYWORD)\n    );\n  }\n\n  // Shorthand for `match` that looks up regex from rules\n  private matchToken(tokenType: TokenType): Token | undefined {\n    const rule = this.rules[tokenType];\n    if (!rule) {\n      return undefined;\n    }\n    return this.match({\n      type: tokenType,\n      regex: rule.regex,\n      transform: rule.value,\n    });\n  }\n\n  // Attempts to match RegExp at current position in input\n  private match({\n    type,\n    regex,\n    transform,\n  }: {\n    type: TokenType;\n    regex: RegExp;\n    transform?: (s: string) => string;\n  }): Token | undefined {\n    regex.lastIndex = this.index;\n    const matches = regex.exec(this.input);\n    if (matches) {\n      const matchedToken = matches[0];\n\n      const outToken = {\n        type,\n        raw: matchedToken,\n        text: transform ? transform(matchedToken) : matchedToken,\n        start: this.index,\n        end: this.index + matchedToken.length,\n      };\n\n      // Advance current position by matched token length\n      this.index += matchedToken.length;\n      return outToken;\n    }\n    return undefined;\n  }\n}\n"],"mappings":"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"}