/** Token type enum for all possible Token categories */
export declare enum TokenType {
    QUOTED_IDENTIFIER = "QUOTED_IDENTIFIER",
    IDENTIFIER = "IDENTIFIER",
    STRING = "STRING",
    VARIABLE = "VARIABLE",
    RESERVED_KEYWORD = "RESERVED_KEYWORD",
    RESERVED_FUNCTION_NAME = "RESERVED_FUNCTION_NAME",
    RESERVED_LOGICAL_OPERATOR = "RESERVED_LOGICAL_OPERATOR",
    RESERVED_PHRASE = "RESERVED_PHRASE",
    RESERVED_DEPENDENT_CLAUSE = "RESERVED_DEPENDENT_CLAUSE",
    RESERVED_SET_OPERATION = "RESERVED_SET_OPERATION",
    RESERVED_COMMAND = "RESERVED_COMMAND",
    RESERVED_JOIN = "RESERVED_JOIN",
    RESERVED_CASE_START = "RESERVED_CASE_START",
    RESERVED_CASE_END = "RESERVED_CASE_END",
    OPERATOR = "OPERATOR",
    COMMA = "COMMA",
    OPEN_PAREN = "OPEN_PAREN",
    CLOSE_PAREN = "CLOSE_PAREN",
    LINE_COMMENT = "LINE_COMMENT",
    BLOCK_COMMENT = "BLOCK_COMMENT",
    NUMBER = "NUMBER",
    NAMED_PARAMETER = "NAMED_PARAMETER",
    QUOTED_PARAMETER = "QUOTED_PARAMETER",
    NUMBERED_PARAMETER = "NUMBERED_PARAMETER",
    POSITIONAL_PARAMETER = "POSITIONAL_PARAMETER",
    DELIMITER = "DELIMITER",
    EOF = "EOF"
}
/** Struct to store the most basic cohesive unit of language grammar */
export interface Token {
    type: TokenType;
    raw: string;
    text: string;
    key?: string;
    start: number;
    end: number;
    precedingWhitespace?: string;
}
/**
 * For use as a "missing token"
 * e.g. in lookAhead and lookBehind to avoid dealing with null values
 */
export declare const EOF_TOKEN: Token;
/** Checks if two tokens are equivalent */
export declare const testToken: (compareToken: {
    type: TokenType;
    text: string;
}) => (token: Token) => boolean;
/** Util object that allows for easy checking of Reserved Keywords */
export declare const isToken: {
    AS: (token: Token) => boolean;
    AND: (token: Token) => boolean;
    ARRAY: (token: Token) => boolean;
    BETWEEN: (token: Token) => boolean;
    CASE: (token: Token) => boolean;
    CAST: (token: Token) => boolean;
    BY: (token: Token) => boolean;
    END: (token: Token) => boolean;
    FROM: (token: Token) => boolean;
    LIMIT: (token: Token) => boolean;
    SELECT: (token: Token) => boolean;
    SET: (token: Token) => boolean;
    STRUCT: (token: Token) => boolean;
    TABLE: (token: Token) => boolean;
    WINDOW: (token: Token) => boolean;
    WITH: (token: Token) => boolean;
};
/** Checks if token is any Reserved Keyword or Command */
export declare const isReserved: (token: Token) => boolean;
/** checks if token is one of the parameter tokens */
export declare const isParameter: (token: Token) => boolean;
