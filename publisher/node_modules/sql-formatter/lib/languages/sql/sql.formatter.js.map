{"version":3,"file":"sql.formatter.js","names":["reservedCommands","expandPhrases","reservedSetOperations","reservedJoins","reservedPhrases","SqlFormatter","Tokenizer","reservedDependentClauses","reservedKeywords","keywords","reservedFunctionNames","functions","stringTypes","quote","prefixes","identTypes","paramTypes","positional","Formatter"],"sources":["../../../src/languages/sql/sql.formatter.ts"],"sourcesContent":["import { expandPhrases } from 'src/expandPhrases';\nimport Formatter from 'src/formatter/Formatter';\nimport Tokenizer from 'src/lexer/Tokenizer';\nimport { functions } from './sql.functions';\nimport { keywords } from './sql.keywords';\n\nconst reservedCommands = expandPhrases([\n  // queries\n  'WITH [RECURSIVE]',\n  'SELECT [ALL | DISTINCT]',\n  'FROM',\n  'WHERE',\n  'GROUP BY [ALL | DISTINCT]',\n  'HAVING',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  'FETCH {FIRST | NEXT}',\n  // Data manipulation\n  // - insert:\n  'INSERT INTO',\n  'VALUES',\n  // - update:\n  'UPDATE',\n  'SET',\n  'WHERE CURRENT OF',\n  // - delete:\n  'DELETE FROM',\n  // - truncate:\n  'TRUNCATE TABLE',\n  // Data definition\n  'CREATE [RECURSIVE] VIEW',\n  'CREATE [GLOBAL TEMPORARY | LOCAL TEMPORARY] TABLE',\n  'DROP TABLE',\n  // - alter table:\n  'ALTER TABLE',\n  'ADD COLUMN',\n  'DROP [COLUMN]',\n  'RENAME COLUMN',\n  'RENAME TO',\n  'ALTER [COLUMN]',\n  '{SET | DROP} DEFAULT', // for alter column\n  'ADD SCOPE', // for alter column\n  'DROP SCOPE {CASCADE | RESTRICT}', // for alter column\n  'RESTART WITH', // for alter column\n\n  // other\n  'SET SCHEMA',\n]);\n\nconst reservedSetOperations = expandPhrases([\n  'UNION [ALL | DISTINCT]',\n  'EXCEPT [ALL | DISTINCT]',\n  'INTERSECT [ALL | DISTINCT]',\n]);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN',\n]);\n\nconst reservedPhrases = ['ON DELETE', 'ON UPDATE'];\n\nexport default class SqlFormatter extends Formatter {\n  static operators = [];\n\n  tokenizer() {\n    return new Tokenizer({\n      reservedCommands,\n      reservedSetOperations,\n      reservedJoins,\n      reservedDependentClauses: ['WHEN', 'ELSE'],\n      reservedPhrases,\n      reservedKeywords: keywords,\n      reservedFunctionNames: functions,\n      stringTypes: [{ quote: \"''\", prefixes: ['N', 'X', 'U&'] }],\n      identTypes: [`\"\"`, '``'],\n      paramTypes: { positional: true },\n    });\n  }\n}\n"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,gBAAgB,GAAG,IAAAC,4BAAA,EAAc,CACrC;AACA,kBAFqC,EAGrC,yBAHqC,EAIrC,MAJqC,EAKrC,OALqC,EAMrC,2BANqC,EAOrC,QAPqC,EAQrC,QARqC,EASrC,cATqC,EAUrC,UAVqC,EAWrC,OAXqC,EAYrC,QAZqC,EAarC,sBAbqC,EAcrC;AACA;AACA,aAhBqC,EAiBrC,QAjBqC,EAkBrC;AACA,QAnBqC,EAoBrC,KApBqC,EAqBrC,kBArBqC,EAsBrC;AACA,aAvBqC,EAwBrC;AACA,gBAzBqC,EA0BrC;AACA,yBA3BqC,EA4BrC,mDA5BqC,EA6BrC,YA7BqC,EA8BrC;AACA,aA/BqC,EAgCrC,YAhCqC,EAiCrC,eAjCqC,EAkCrC,eAlCqC,EAmCrC,WAnCqC,EAoCrC,gBApCqC,EAqCrC,sBArCqC,EAqCb;AACxB,WAtCqC,EAsCxB;AACb,iCAvCqC,EAuCF;AACnC,cAxCqC,EAwCrB;AAEhB;AACA,YA3CqC,CAAd,CAAzB;AA8CA,IAAMC,qBAAqB,GAAG,IAAAD,4BAAA,EAAc,CAC1C,wBAD0C,EAE1C,yBAF0C,EAG1C,4BAH0C,CAAd,CAA9B;AAMA,IAAME,aAAa,GAAG,IAAAF,4BAAA,EAAc,CAClC,MADkC,EAElC,oCAFkC,EAGlC,sBAHkC,EAIlC,sBAJkC,EAKlC,4CALkC,CAAd,CAAtB;AAQA,IAAMG,eAAe,GAAG,CAAC,WAAD,EAAc,WAAd,CAAxB;;IAEqBC,Y;;;;;;;;;;;;;WAGnB,qBAAY;MACV,OAAO,IAAIC,qBAAJ,CAAc;QACnBN,gBAAgB,EAAhBA,gBADmB;QAEnBE,qBAAqB,EAArBA,qBAFmB;QAGnBC,aAAa,EAAbA,aAHmB;QAInBI,wBAAwB,EAAE,CAAC,MAAD,EAAS,MAAT,CAJP;QAKnBH,eAAe,EAAfA,eALmB;QAMnBI,gBAAgB,EAAEC,cANC;QAOnBC,qBAAqB,EAAEC,cAPJ;QAQnBC,WAAW,EAAE,CAAC;UAAEC,KAAK,EAAE,IAAT;UAAeC,QAAQ,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,IAAX;QAAzB,CAAD,CARM;QASnBC,UAAU,EAAE,SAAO,IAAP,CATO;QAUnBC,UAAU,EAAE;UAAEC,UAAU,EAAE;QAAd;MAVO,CAAd,CAAP;IAYD;;;;EAhBuCC,sB;;;;gBAArBb,Y,eACA,E"}