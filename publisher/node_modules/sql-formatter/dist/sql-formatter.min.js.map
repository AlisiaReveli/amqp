{"version":3,"file":"sql-formatter.min.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAsB,aAAID,IAE1BD,EAAmB,aAAIC,GACxB,CATD,CASGK,MAAM,I,mBCRT,IAAIC,EAAsB,CCA1BA,EAAwB,CAACL,EAASM,KACjC,IAAI,IAAIC,KAAOD,EACXD,EAAoBG,EAAEF,EAAYC,KAASF,EAAoBG,EAAER,EAASO,IAC5EE,OAAOC,eAAeV,EAASO,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDF,EAAwB,CAACQ,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFT,EAAyBL,IACH,oBAAXkB,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeV,EAASkB,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeV,EAAS,aAAc,CAAEoB,OAAO,GAAO,G,KCExD,SAAUC,EAAaC,GAC3B,MAAwB,gBAApBA,EAAIC,aAAqD,iBAApBD,EAAIC,YACpC,IAAIC,OAAO,IAEhBF,EAAIG,QACC,KAEF,IAAID,OAAOF,EAAII,SACvB,CAKK,SAAUC,EAAeL,GAC7B,MAA2B,gBAApBA,EAAIC,aAAqD,iBAApBD,EAAIC,WACjD,C,4TCrBWK,ECMSC,EAAAA,WAOnB,WAAYC,I,4FAAyC,SACnDC,KAAKD,OAASA,EACdC,KAAKC,MAAQ,CACd,C,wCAOD,YAAwB,IAAlBzB,EAAkB,EAAlBA,IAAK0B,EAAa,EAAbA,KACT,OAAKF,KAAKD,OAINvB,EACMwB,KAAKD,OAAsBvB,GAE7BwB,KAAKD,OAAoBC,KAAKC,SAN7BC,CAOV,M,sEA1BkBJ,IDNrB,SAAYD,GACVA,EAAAA,kBAAAA,oBACAA,EAAAA,WAAAA,aACAA,EAAAA,OAAAA,SACAA,EAAAA,SAAAA,WACAA,EAAAA,iBAAAA,mBACAA,EAAAA,uBAAAA,yBACAA,EAAAA,0BAAAA,4BACAA,EAAAA,gBAAAA,kBACAA,EAAAA,0BAAAA,4BACAA,EAAAA,uBAAAA,yBACAA,EAAAA,iBAAAA,mBACAA,EAAAA,cAAAA,gBACAA,EAAAA,oBAAAA,sBACAA,EAAAA,kBAAAA,oBACAA,EAAAA,SAAAA,WACAA,EAAAA,MAAAA,QACAA,EAAAA,WAAAA,aACAA,EAAAA,YAAAA,cACAA,EAAAA,aAAAA,eACAA,EAAAA,cAAAA,gBACAA,EAAAA,OAAAA,SACAA,EAAAA,gBAAAA,kBACAA,EAAAA,iBAAAA,mBACAA,EAAAA,mBAAAA,qBACAA,EAAAA,qBAAAA,uBACAA,EAAAA,UAAAA,YACAA,EAAAA,IAAAA,KA3BF,EAAYA,IAAAA,EAAS,KA6Cd,IE5CKM,EF4CCC,EAAmB,CAC9BC,KAAMR,EAAUS,IAChBC,IAAK,QACLL,KAAM,QACNM,MAAOC,IACPC,IAAKD,KAIME,EACX,SAACC,GAAD,OACA,SAACC,GAAD,OACEA,EAAMR,OAASO,EAAaP,MAAQQ,EAAMX,OAASU,EAAaV,IADlE,CADA,EAKWY,EAAU,CACrBC,GAAIJ,EAAU,CAAET,KAAM,KAAMG,KAAMR,EAAUmB,mBAC5CC,IAAKN,EAAU,CAAET,KAAM,MAAOG,KAAMR,EAAUqB,4BAC9CC,MAAOR,EAAU,CAAET,KAAM,QAASG,KAAMR,EAAUmB,mBAClDI,QAAST,EAAU,CAAET,KAAM,UAAWG,KAAMR,EAAUmB,mBACtDK,KAAMV,EAAU,CAAET,KAAM,OAAQG,KAAMR,EAAUyB,sBAChDC,KAAMZ,EAAU,CAAET,KAAM,OAAQG,KAAMR,EAAU2B,yBAChDC,GAAId,EAAU,CAAET,KAAM,KAAMG,KAAMR,EAAUmB,mBAC5CU,IAAKf,EAAU,CAAET,KAAM,MAAOG,KAAMR,EAAU8B,oBAC9CC,KAAMjB,EAAU,CAAET,KAAM,OAAQG,KAAMR,EAAUgC,mBAChDC,MAAOnB,EAAU,CAAET,KAAM,QAASG,KAAMR,EAAUgC,mBAClDE,OAAQ,SAAClB,GAAD,MACN,YAAYmB,KAAKnB,EAAMX,OAASW,EAAMR,OAASR,EAAUgC,gBADnD,EAERI,IAAKtB,EAAU,CAAET,KAAM,MAAOG,KAAMR,EAAUgC,mBAC9CK,OAAQvB,EAAU,CAAET,KAAM,SAAUG,KAAMR,EAAUmB,mBACpDmB,MAAOxB,EAAU,CAAET,KAAM,QAASG,KAAMR,EAAUmB,mBAClDoB,OAAQzB,EAAU,CAAET,KAAM,SAAUG,KAAMR,EAAUgC,mBACpDQ,KAAM1B,EAAU,CAAET,KAAM,OAAQG,KAAMR,EAAUgC,oBAIrCS,EAAa,SAACzB,GAAD,OACxBA,EAAMR,OAASR,EAAUmB,kBACzBH,EAAMR,OAASR,EAAU2B,wBACzBX,EAAMR,OAASR,EAAUqB,2BACzBL,EAAMR,OAASR,EAAU0C,iBACzB1B,EAAMR,OAASR,EAAU2C,2BACzB3B,EAAMR,OAASR,EAAUgC,kBACzBhB,EAAMR,OAASR,EAAU4C,wBACzB5B,EAAMR,OAASR,EAAU6C,eACzB7B,EAAMR,OAASR,EAAUyB,qBACzBT,EAAMR,OAASR,EAAU8B,iBAVD,E,uKEhF1B,SAAYxB,GACVA,EAAAA,UAAAA,YACAA,EAAAA,OAAAA,SACAA,EAAAA,cAAAA,gBACAA,EAAAA,cAAAA,gBACAA,EAAAA,gBAAAA,kBACAA,EAAAA,YAAAA,cACAA,EAAAA,kBAAAA,oBACAA,EAAAA,aAAAA,eACAA,EAAAA,qBAAAA,uBACAA,EAAAA,MAAAA,OAVF,EAAYA,IAAAA,EAAQ,K,ICkBCwC,EAAAA,WAGnB,WAAoBC,I,4FAAe,SAAf,KAAAA,OAAAA,EAFZ,KAAA3C,MAAQ,CAEuB,C,yCAEhC,WAGL,IAFA,IACI4C,EADEC,EAA0B,GAExBD,EAAO7C,KAAK+C,aAClBD,EAAWE,KAAKH,GAElB,OAAOC,CACR,G,uBAEO,WAEN,IADA,IAAMG,EAAsB,KACf,CACX,GAAIjD,KAAKkD,OAAO7C,OAASR,EAAUsD,UAEjC,OADAnD,KAAKoD,OACE,CAAE/C,KAAMF,EAAS4C,UAAWE,SAAAA,EAAUI,cAAc,GACtD,GAAIrD,KAAKkD,OAAO7C,OAASR,EAAUS,IACxC,OAAI2C,EAASK,OAAS,EACb,CAAEjD,KAAMF,EAAS4C,UAAWE,SAAAA,EAAUI,cAAc,QAE3D,EAGFJ,EAASD,KAAKhD,KAAKuD,aAEtB,CACF,G,wBAEO,WACN,OACEvD,KAAKwD,eACLxD,KAAKyD,UACLzD,KAAK0D,gBACL1D,KAAK2D,gBACL3D,KAAK4D,kBACL5D,KAAK6D,eACL7D,KAAK8D,oBACL9D,KAAK+D,sBACL/D,KAAKgE,eAER,G,oBAEO,WACN,GAAIhE,KAAKkD,OAAO7C,OAASR,EAAUgC,iBAAkB,CACnD,IAAMoC,EAAOjE,KAAKoD,OACZH,EAAWjD,KAAKkE,4BACtB,MAAO,CAAE7D,KAAMF,EAASsD,OAAQU,UAAWF,EAAMhB,SAAAA,EAClD,CAEF,G,0BAEO,WACN,GAAIjD,KAAKkD,OAAO7C,OAASR,EAAU4C,uBAAwB,CACzD,IAAMwB,EAAOjE,KAAKoD,OACZH,EAAWjD,KAAKkE,4BACtB,MAAO,CAAE7D,KAAMF,EAASiE,cAAeD,UAAWF,EAAMhB,SAAAA,EACzD,CAEF,G,0BAEO,WACN,GAAIjD,KAAKkD,OAAO7C,OAASR,EAAU2B,wBAAgD,MAAtBxB,KAAKkD,KAAK,GAAGhD,KACxE,MAAO,CACLG,KAAMF,EAASkE,cACfF,UAAWnE,KAAKoD,OAChBS,YAAa7D,KAAK6D,cAIvB,G,4BAEO,WACN,IACG7D,KAAKkD,OAAO7C,OAASR,EAAUmB,kBAC9BhB,KAAKkD,OAAO7C,OAASR,EAAUyE,aACX,MAAtBtE,KAAKkD,KAAK,GAAGhD,KAEb,MAAO,CACLG,KAAMF,EAASoE,gBACfC,WAAYxE,KAAKoD,OACjBS,YAAa7D,KAAK6D,cAIvB,G,yBAEO,WACN,GAAI7D,KAAKkD,OAAO7C,OAASR,EAAU4E,WAAY,CAK7C,IAJA,IAAMxB,EAAsB,GAEtByB,EADQ1E,KAAKoD,OACKlD,KACpByE,EAAa,GACV3E,KAAKkD,OAAO7C,OAASR,EAAU+E,aAAe5E,KAAKkD,OAAO7C,OAASR,EAAUS,KAClF2C,EAASD,KAAKhD,KAAKuD,cAKrB,OAHIvD,KAAKkD,OAAO7C,OAASR,EAAU+E,cACjCD,EAAa3E,KAAKoD,OAAOlD,MAEpB,CAAEG,KAAMF,EAAS0D,YAAaZ,SAAAA,EAAUyB,UAAAA,EAAWC,WAAAA,EAC3D,CAEF,G,8BAEO,WACN,GAAI7D,EAAQM,QAAQpB,KAAKkD,SAAWpC,EAAQG,IAAIjB,KAAKkD,KAAK,IACxD,MAAO,CACL7C,KAAMF,EAAS0E,kBACfC,aAAc9E,KAAKoD,OACnB2B,MAAO/E,KAAKoD,OACZ4B,SAAUhF,KAAKoD,OACf6B,MAAOjF,KAAKoD,OAIjB,G,yBAEO,WACN,GAAItC,EAAQgB,MAAM9B,KAAKkD,QAAS,CAC9B,IAAMgC,EAAalF,KAAKoD,OAClB2B,EAAQ/E,KAAKkE,2BAA0B,SAAAiB,GAAC,OAAIA,EAAE9E,OAASR,EAAUuF,KAAzB,IAC9C,GAAIpF,KAAKkD,OAAO7C,OAASR,EAAUuF,MAAO,CACxCpF,KAAKoD,OACL,IAAM6B,EAAQjF,KAAKkE,4BACnB,MAAO,CACL7D,KAAMF,EAASkF,aACfH,WAAAA,EACAI,OAAQP,EACRQ,MAAON,EAEV,CACC,MAAO,CACL5E,KAAMF,EAASkF,aACfH,WAAAA,EACAK,MAAOR,EAGZ,CAEF,G,gCAEO,WACN,GAAyB,MAArB/E,KAAKkD,OAAOhD,MAAgBY,EAAQiB,OAAO/B,KAAKkD,MAAM,IAExD,OADAlD,KAAKoD,OACE,CAAE/C,KAAMF,EAASqF,qBAG3B,G,uCAEO,WAIN,IAHuD,IAAvDC,EAAuD,uDAAX,kBAAM,CAAN,EAEtCxC,EAAsB,GAE1BjD,KAAKkD,OAAO7C,OAASR,EAAUgC,kBAC/B7B,KAAKkD,OAAO7C,OAASR,EAAU4C,wBAC/BzC,KAAKkD,OAAO7C,OAASR,EAAUS,KAC/BN,KAAKkD,OAAO7C,OAASR,EAAU+E,aAC/B5E,KAAKkD,OAAO7C,OAASR,EAAUsD,YAC9BsC,EAAezF,KAAKkD,SAErBD,EAASD,KAAKhD,KAAKuD,cAErB,OAAON,CACR,G,kBAGO,WAAc,IAATyC,EAAS,uDAAD,EACnB,OAAO1F,KAAK4C,OAAO5C,KAAKC,MAAQyF,IAAUtF,CAC3C,G,kBAGO,WACN,OAAOJ,KAAK4C,OAAO5C,KAAKC,UAAYG,CACrC,G,2BAEO,WACN,MAAO,CAAEC,KAAMF,EAASU,MAAOA,MAAOb,KAAKoD,OAC5C,I,yEArLkBT,G,wYCpBd,IAGMgD,EAAO,SAAIC,GAAJ,OAAgCA,EAAIA,EAAItC,OAAS,EAAjD,EAIPuC,EAAmB,SAACC,GAAD,OAC9BA,EAAQC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE3C,OAAS0C,EAAE1C,QAAU0C,EAAEE,cAAcD,EAAjD,GADiB,EAInBE,EAAY,SAACL,GAAD,OACvBA,EAAQM,QAAO,SAACC,EAAKC,GAAN,OAAcC,KAAKF,IAAIA,EAAKC,EAAIhD,OAAhC,GAAyC,EADjC,EAIZkD,EAAqB,SAACC,GAAD,OAAeA,EAAEC,QAAQ,wEAAS,IAAlC,EAYrBC,EAAkB,SAAC7H,GAAD,OA3BR8G,EA4BdlH,OAAOkI,OAAO9H,GAAK+H,O,yWA5BN,CAAuB,IAAIC,IAAIlB,IAA/B,IAACA,CA2BQ,E,0GCxB/B,IAAMmB,EAA6B,wEAKrB,SAAUC,EACtBC,EACAC,EACAC,GAEA,OAkCF,SAAkCC,GAEhC,IADA,IAAMC,EAAqB,GAClBC,EAAI,EAAGA,EAAIF,EAAM9D,OAAQgE,IAAK,CAKrC,IAJA,IAAMC,EAAQ,CAACH,EAAME,IAIdF,EAAME,GAAGE,MAAM,SACpBF,IACAC,EAAMvE,KAAKoE,EAAME,IAEnBD,EAAOrE,KAAKuE,EACb,CACD,OAAOF,CACR,CAhDQI,CAAyBR,EAAMS,MAAM,OACzCC,SAAQ,SAAAC,GACP,GAA0B,IAAtBA,EAAWtE,OACb,OAAOsE,EACF,GAAsB,YAAlBV,EACT,OA8CR,SAAuBU,GACrB,IAAMC,EAAgB1B,EAAUyB,GAChC,OAAOE,EAAmBF,GAAYG,KAAI,SAACC,EAAMV,GAC/C,OAAIA,IAAMM,EAAWtE,OAAS,EACrB0E,EAEFA,EAAO,IAAIvI,OAAOoI,EAAgBG,EAAK1E,OAAS,GAAK,GAC7D,GACF,CAtDc2E,CAAcL,GAChB,GAAsB,WAAlBV,EACT,OAsDR,SAAsBU,EAAsBT,GAC1C,OAAOW,EAAmBF,GAAYG,KAAI,SAACC,EAAMV,GAC/C,OAAU,IAANA,EACKU,EAWb,SAA0BE,EAAoBf,GAC5C,OAAOe,EAAWxB,QAAQ,IAAIyB,OAAOhB,EAAS,KAAM,GACrD,CATKiB,C,k1BAFF,CAAqBJ,EAAKR,MAAMT,IAA+B,CAAC,IAAhE,MAE+BI,GAC7BA,EAAOT,QAAQ,QAAS,MACxBsB,EAAKK,WAER,GACF,CAlEcC,CAAaV,EAAYT,GAEhC,MAAM,IAAIoB,MAAJ,oCAAuCrB,GAEhD,IACAsB,KAAK,KACT,CAkED,SAASV,EAAmBV,GAC1B,OAAOA,EAAMW,KAAI,SAAAC,GAAI,OAAIA,EAAKtB,QAAQ,KAAM,GAAvB,GACtB,C,ogCCzFW+B,ECMSC,EAAAA,WACnB,WAAoBC,I,4FAAuB,SAAvB,KAAAA,gBAAAA,CAA2B,C,iDAMxC,SAAc9E,GACnB,OAAO7D,KAAK4I,YAAY/E,IAAgB7D,KAAK2I,eAC9C,G,yBAEO,SAAY9E,GAClB,IAD0C,EACtCP,EAAS,EAD6B,E,25BAAA,CAGvBO,EAAYZ,UAHW,IAG1C,IAAK,EAAL,qBAAyC,KAA9B4F,EAA8B,QACvC,OAAQA,EAAKxI,MACX,KAAKF,EAASkE,cACZf,GAAUuF,EAAK1E,UAAUjE,KAAKoD,OAAStD,KAAK4I,YAAYC,EAAKhF,aAC7D,MACF,KAAK1D,EAASoE,gBACZjB,GAAUuF,EAAKrE,WAAWtE,KAAKoD,OAAStD,KAAK4I,YAAYC,EAAKhF,aAC9D,MACF,KAAK1D,EAAS0D,YACZP,GAAUtD,KAAK4I,YAAYC,GAC3B,MACF,KAAK1I,EAAS0E,kBACZvB,GAAUtD,KAAK8I,aAAaD,GAC5B,MACF,KAAK1I,EAASsD,OACd,KAAKtD,EAASkF,aACd,KAAKlF,EAASiE,cACZ,OAAO3D,IACT,KAAKN,EAASqF,qBACZlC,GAAU,EACV,MACF,KAAKnD,EAASU,MAEZ,GADAyC,GAAUuF,EAAKhI,MAAMX,KAAKoD,OACtBtD,KAAK+I,iBAAiBF,EAAKhI,OAC7B,OAAOJ,IAMb,GAAI6C,EAAStD,KAAK2I,gBAChB,OAAOrF,CAEV,CApCyC,+BAqC1C,OAAOA,CACR,G,0BAEO,SAAauF,GACnB,OH7Ce,SAACjD,GAClB,IAD2C,EACvCoD,EAAQ,EAD+B,E,+lBAAA,CAE3BpD,GAF2B,IAE3C,IAAK,EAAL,qBACEoD,GADmB,OAFsB,+BAK3C,OAAOA,CACR,CGuCUC,CACL,CAACJ,EAAK/D,aAAc+D,EAAK9D,MAAO8D,EAAK7D,SAAU6D,EAAK5D,OAAO8C,KAAI,SAAAlH,GAAK,OAAIA,EAAMX,KAAKoD,MAAf,IAEvE,G,8BAIO,SAAiBzC,GACvB,OACEA,EAAMR,OAASR,EAAUqB,2BACzBL,EAAMR,OAASR,EAAUqJ,cACzBrI,EAAMR,OAASR,EAAUsJ,eACzBrI,EAAQO,KAAKR,EAEhB,I,yEAlEkB6H,G,uKDNrB,SAAYD,GACVA,EAAAA,EAAAA,MAAAA,GAAAA,QACAA,EAAAA,EAAAA,SAAAA,GAAAA,WACAA,EAAAA,EAAAA,WAAAA,GAAAA,aACAA,EAAAA,EAAAA,QAAAA,GAAAA,UACAA,EAAAA,EAAAA,kBAAAA,GAAAA,oBACAA,EAAAA,EAAAA,OAAAA,GAAAA,SACAA,EAAAA,EAAAA,cAAAA,GAAAA,eAPF,EAAYA,IAAAA,EAAE,K,IAmBOW,EAAAA,WAGnB,WAAmBC,I,4FAAwB,SAAxB,KAAAA,YAAAA,EAFX,KAAAC,MAAsB,EAEiB,C,uCAKxC,WAA6B,2BAAtBA,EAAsB,yBAAtBA,EAAsB,gBAClC,IAAK,IAAL,MAAmBA,EAAnB,eAA0B,CAArB,IAAMC,EAAI,KACb,OAAQA,GACN,KAAKd,EAAGe,MACNxJ,KAAKsJ,MAAMtG,KAAKyF,EAAGe,OACnB,MACF,KAAKf,EAAGgB,SACNzJ,KAAK0J,2BACL,MACF,KAAKjB,EAAGkB,WACN3J,KAAK4J,iBACL,MACF,KAAKnB,EAAGoB,QACN7J,KAAK0J,2BACL1J,KAAK8J,WAAWrB,EAAGoB,SACnB,MACF,KAAKpB,EAAGsB,kBACN/J,KAAK0J,2BACL1J,KAAK8J,WAAWrB,EAAGsB,mBACnB,MACF,KAAKtB,EAAGuB,OACNhK,KAAKiK,iBACL,MACF,KAAKxB,EAAGyB,cACNlK,KAAKsJ,MAAMtG,KAAKyF,EAAGyB,eACnB,MACF,QACElK,KAAKsJ,MAAMtG,KAAKuG,GAErB,CACF,G,sCAEO,WACN,KAAOY,EAAuBxE,EAAK3F,KAAKsJ,SACtCtJ,KAAKsJ,MAAMc,KAEd,G,4BAEO,WACN,KAAOC,EAAsB1E,EAAK3F,KAAKsJ,SACrCtJ,KAAKsJ,MAAMc,KAEd,G,wBAEO,SAAWE,GACjB,GAAItK,KAAKsJ,MAAMhG,OAAS,EACtB,OAAQqC,EAAK3F,KAAKsJ,QAChB,KAAKb,EAAGoB,QACN7J,KAAKsJ,MAAMc,MACXpK,KAAKsJ,MAAMtG,KAAKsH,GAChB,MACF,KAAK7B,EAAGsB,kBAEN,MACF,QACE/J,KAAKsJ,MAAMtG,KAAKsH,GAIvB,G,4BAEO,WACN,IAAK,IAAIhD,EAAI,EAAGA,EAAItH,KAAKqJ,YAAYkB,WAAYjD,IAC/CtH,KAAKsJ,MAAMtG,KAAKyF,EAAGyB,cAEtB,G,sBAKM,WAAQ,WACb,OAAOlK,KAAKsJ,MAAMvB,KAAI,SAAAwB,GAAI,OAAI,EAAKiB,aAAajB,EAAtB,IAA6Bf,KAAK,GAC7D,G,0BAEO,SAAae,GACnB,OAAQA,GACN,KAAKd,EAAGe,MACN,MAAO,IACT,KAAKf,EAAGoB,QACR,KAAKpB,EAAGsB,kBACN,MAAO,KACT,KAAKtB,EAAGyB,cACN,OAAOlK,KAAKqJ,YAAYoB,kBAC1B,QACE,OAAOlB,EAEZ,I,yEA9FkBH,GAiGfe,EAAyB,SAACZ,GAAD,OAC7BA,IAASd,EAAGe,OAASD,IAASd,EAAGyB,aADJ,EAGzBG,EAAwB,SAACd,GAAD,OAC5BA,IAASd,EAAGe,OAASD,IAASd,EAAGyB,eAAiBX,IAASd,EAAGoB,OADlC,E,oqBE7FTa,EAAAA,WAUnB,cAA8E,IAAhEnL,EAAgE,EAAhEA,IAAKQ,EAA2D,EAA3DA,OAAQ4K,EAAmD,EAAnDA,OAAmD,IAA3CC,OAAAA,OAA2C,U,4FAAA,SAJtE,KAAAA,QAAS,EACT,KAAAC,MAAmB,GACnB,KAAA5K,OAAS,EAGfD,KAAKT,IAAMA,EACXS,KAAK4K,OAASA,EACd5K,KAAK8K,YAAc,IAAIpC,EAAY1I,KAAKT,IAAIoJ,iBAC5C3I,KAAKD,OAASA,EACdC,KAAK2K,OAASA,CACf,C,0CAEM,SAAOE,GAGZ,IAFA7K,KAAK6K,MAAQA,EAER7K,KAAKC,MAAQ,EAAGD,KAAKC,MAAQD,KAAK6K,MAAMvH,OAAQtD,KAAKC,QAAS,CACjE,IAAM4I,EAAO7I,KAAK6K,MAAM7K,KAAKC,OAC7B,OAAQ4I,EAAKxI,MACX,KAAKF,EAASkE,cACZrE,KAAK+K,mBAAmBlC,GACxB,MACF,KAAK1I,EAASoE,gBACZvE,KAAKgL,qBAAqBnC,GAC1B,MACF,KAAK1I,EAAS0D,YACZ7D,KAAKiL,kBAAkBpC,GACvB,MACF,KAAK1I,EAAS0E,kBACZ7E,KAAKkL,uBAAuBrC,GAC5B,MACF,KAAK1I,EAASsD,OACZzD,KAAKmL,aAAatC,GAClB,MACF,KAAK1I,EAASiE,cACZpE,KAAKoL,mBAAmBvC,GACxB,MACF,KAAK1I,EAASkF,aACZrF,KAAKqL,kBAAkBxC,GACvB,MACF,KAAK1I,EAASqF,qBACZxF,KAAKsL,yBAAyBzC,GAC9B,MACF,KAAK1I,EAASU,MACZb,KAAKuL,YAAY1C,EAAKhI,OAG3B,CACD,OAAOb,KAAK2K,MACb,G,gCAEO,SAAmB9B,GACzB7I,KAAK2K,OAAOa,IAAIxL,KAAKyL,KAAK5C,EAAK1E,YAC/BnE,KAAKiL,kBAAkBpC,EAAKhF,YAC7B,G,kCAEO,SAAqBgF,GAC3B7I,KAAK2K,OAAOa,IAAIxL,KAAKyL,KAAK5C,EAAKrE,aAC/BxE,KAAKiL,kBAAkBpC,EAAKhF,YAC7B,G,+BAEO,SAAkBgF,GACxB,IAAM+B,EAAS5K,KAAK8K,YAAYY,cAAc7C,GAE1C+B,GACF5K,KAAK2K,OAAOa,IAAI3C,EAAKnE,WACrB1E,KAAK2K,OAAS3K,KAAK2L,oBAAoB9C,EAAK5F,SAAU2H,GACtD5K,KAAK2K,OAAOa,IAAI/C,EAAGgB,SAAUZ,EAAKlE,WAAY8D,EAAGe,SAEjDxJ,KAAK2K,OAAOa,IAAI3C,EAAKnE,UAAW+D,EAAGoB,SAE/BjK,EAAeI,KAAKT,MACtBS,KAAK2K,OAAOa,IAAI/C,EAAGuB,QACnBhK,KAAK2K,OAAS3K,KAAK2L,oBAAoB9C,EAAK5F,SAAU2H,KAEtD5K,KAAK2K,OAAOtB,YAAYuC,qBACxB5L,KAAK2K,OAAOa,IAAI/C,EAAGuB,QACnBhK,KAAK2K,OAAS3K,KAAK2L,oBAAoB9C,EAAK5F,SAAU2H,GACtD5K,KAAK2K,OAAOtB,YAAYwC,sBAG1B7L,KAAK2K,OAAOa,IAAI/C,EAAGoB,QAASpB,EAAGuB,OAAQnB,EAAKlE,WAAY8D,EAAGe,OAE9D,G,oCAEO,SAAuBX,GAC7B7I,KAAK2K,OAAOa,IACVxL,KAAKyL,KAAK5C,EAAK/D,cACf2D,EAAGe,MACHxJ,KAAKyL,KAAK5C,EAAK9D,OACf0D,EAAGe,MACHxJ,KAAK8L,eAAejD,EAAK7D,UACzByD,EAAGe,MACHxJ,KAAKyL,KAAK5C,EAAK5D,OACfwD,EAAGe,MAEN,G,0BAEO,SAAaX,GACfjJ,EAAeI,KAAKT,KACtBS,KAAK2K,OAAOa,IAAI/C,EAAGoB,QAASpB,EAAGuB,OAAQhK,KAAKyL,KAAK5C,EAAK1E,WAAYsE,EAAGe,OAErExJ,KAAK2K,OAAOa,IAAI/C,EAAGoB,QAASpB,EAAGuB,OAAQhK,KAAKyL,KAAK5C,EAAK1E,WAAYsE,EAAGoB,SAEvE7J,KAAK2K,OAAOtB,YAAY0C,mBAEnBnM,EAAeI,KAAKT,MACvBS,KAAK2K,OAAOa,IAAI/C,EAAGuB,QAErBhK,KAAK2K,OAAS3K,KAAK2L,oBAAoB9C,EAAK5F,UAE5CjD,KAAK2K,OAAOtB,YAAY2C,kBACzB,G,gCAEO,SAAmBnD,GACzB7I,KAAK2K,OAAOa,IAAI/C,EAAGoB,QAASpB,EAAGuB,OAAQhK,KAAKyL,KAAK5C,EAAK1E,WAAYsE,EAAGoB,SAErE7J,KAAK2K,OAAOa,IAAI/C,EAAGuB,QACnBhK,KAAK2K,OAAS3K,KAAK2L,oBAAoB9C,EAAK5F,SAC7C,G,+BAEO,SAAkB4F,GACxB7I,KAAK2K,OAAOa,IAAI/C,EAAGoB,QAASpB,EAAGuB,OAAQhK,KAAKyL,KAAK5C,EAAK3D,aACtDlF,KAAK2K,OAAOtB,YAAY0C,mBAEpBlD,EAAKvD,QACPtF,KAAK2K,OAAOa,IAAI/C,EAAGoB,QAASpB,EAAGuB,QAC/BhK,KAAK2K,OAAS3K,KAAK2L,oBAAoB9C,EAAKvD,QAC5CtF,KAAK2K,OAAOa,IAAI/C,EAAGgB,SAAU,IAAKhB,EAAGe,OACrCxJ,KAAK2K,OAAS3K,KAAK2L,oBAAoB9C,EAAKtD,SAE5CvF,KAAK2K,OAAOa,IAAI/C,EAAGoB,QAASpB,EAAGuB,QAC/BhK,KAAK2K,OAAS3K,KAAK2L,oBAAoB9C,EAAKtD,QAE9CvF,KAAK2K,OAAOtB,YAAY2C,kBACzB,G,sCAEO,SAAyBC,GAC/BjM,KAAK2K,OAAOa,IAAI,IAAK/C,EAAGe,MACzB,G,iCAEO,SAAoBqB,GAAsC,IAApBD,EAAoB,uDAAX5K,KAAK4K,OAC1D,OAAO,IAAIF,EAAoB,CAC7BnL,IAAKS,KAAKT,IACVQ,OAAQC,KAAKD,OACb4K,OAAQ3K,KAAK2K,OACbC,OAAAA,IACCsB,OAAOrB,EACX,G,yBAEO,SAAYhK,GAClB,OAAQA,EAAMR,MACZ,KAAKR,EAAUqJ,aACb,OAAOlJ,KAAKmM,kBAAkBtL,GAChC,KAAKhB,EAAUsJ,cACb,OAAOnJ,KAAKoM,mBAAmBvL,GACjC,KAAKhB,EAAU6C,cACb,OAAO1C,KAAKqM,WAAWxL,GACzB,KAAKhB,EAAU2C,0BACb,OAAOxC,KAAKsM,sBAAsBzL,GACpC,KAAKhB,EAAUqB,0BACb,OAAOlB,KAAKuM,sBAAsB1L,GACpC,KAAKhB,EAAUmB,iBACf,KAAKnB,EAAU2B,uBACf,KAAK3B,EAAU0C,gBACb,OAAOvC,KAAKwM,cAAc3L,GAC5B,KAAKhB,EAAUyB,oBACb,OAAOtB,KAAKyM,gBAAgB5L,GAC9B,KAAKhB,EAAU8B,kBACb,OAAO3B,KAAK0M,cAAc7L,GAC5B,KAAKhB,EAAUuF,MACb,OAAOpF,KAAK2M,YAAY9L,GAC1B,KAAKhB,EAAU+M,SACb,OAAO5M,KAAK6M,eAAehM,GAC7B,KAAKhB,EAAUyE,WACf,KAAKzE,EAAUiN,kBACf,KAAKjN,EAAUkN,OACf,KAAKlN,EAAUmN,OACf,KAAKnN,EAAUoN,SACf,KAAKpN,EAAUqN,gBACf,KAAKrN,EAAUsN,iBACf,KAAKtN,EAAUuN,mBACf,KAAKvN,EAAUwN,qBACb,OAAOrN,KAAKsN,cAAczM,GAC5B,QACE,MAAM,IAAI0H,MAAJ,iCAAoC1H,EAAMR,OAErD,G,2BAGO,SAAcQ,GACpBb,KAAK2K,OAAOa,IAAIxL,KAAKyL,KAAK5K,GAAQ4H,EAAGe,MACtC,G,+BAGO,SAAkB3I,GACpB,KAAKmB,KAAKnB,EAAM0M,qBAAuB,IACzCvN,KAAK2K,OAAOa,IAAI/C,EAAGoB,QAASpB,EAAGuB,OAAQhK,KAAKyL,KAAK5K,GAAQ4H,EAAGsB,kBAAmBtB,EAAGuB,QAElFhK,KAAK2K,OAAOa,IAAI/C,EAAGkB,WAAYlB,EAAGe,MAAOxJ,KAAKyL,KAAK5K,GAAQ4H,EAAGsB,kBAAmBtB,EAAGuB,OAEvF,G,gCAGO,SAAmBnJ,GAAY,WACrCb,KAAKwN,kBAAkB3M,EAAMX,MAAMuN,SAAQ,SAAAzF,GACzC,EAAK2C,OAAOa,IAAI/C,EAAGoB,QAASpB,EAAGuB,OAAQhC,EACxC,IACDhI,KAAK2K,OAAOa,IAAI/C,EAAGoB,QAASpB,EAAGuB,OAChC,G,+BAiBO,SAAkB0D,GACxB,OAAOA,EAAQhG,MAAM,MAAMK,KAAI,SAAAC,GAC7B,MAAI,SAAShG,KAAKgG,GACT,IAAMA,EAAKtB,QAAQ,OAAQ,IAE3BsB,EAAKtB,QAAQ,OAAQ,GAE/B,GACF,G,wBAEO,SAAW7F,GACbjB,EAAeI,KAAKT,MAEtBS,KAAK2K,OAAOtB,YAAY2C,mBACxBhM,KAAK2K,OAAOa,IAAI/C,EAAGoB,QAASpB,EAAGuB,OAAQhK,KAAKyL,KAAK5K,GAAQ4H,EAAGe,OAC5DxJ,KAAK2K,OAAOtB,YAAY0C,oBAExB/L,KAAK2K,OAAOa,IAAI/C,EAAGoB,QAASpB,EAAGuB,OAAQhK,KAAKyL,KAAK5K,GAAQ4H,EAAGe,MAE/D,G,2BAKO,SAAc3I,GACpBb,KAAK2K,OAAOa,IAAIxL,KAAKyL,KAAK5K,GAAQ4H,EAAGe,MACtC,G,mCAKO,SAAsB3I,GAC5Bb,KAAK2K,OAAOa,IAAI/C,EAAGoB,QAASpB,EAAGuB,OAAQhK,KAAKyL,KAAK5K,GAAQ4H,EAAGe,MAC7D,G,4BAKO,SAAe3I,GAEF,MAAfA,EAAMX,KAGgB,MAAfW,EAAMX,MAA+B,OAAfW,EAAMX,MAKf,MAAfW,EAAMX,MAAsC,UAAtBF,KAAKT,IAAIoO,UAMpC3N,KAAKT,IAAIqO,eAVX5N,KAAK2K,OAAOa,IAAI/C,EAAGgB,SAAUzJ,KAAKyL,KAAK5K,IAavCb,KAAK2K,OAAOa,IAAIxL,KAAKyL,KAAK5K,GAAQ4H,EAAGe,OAhBrCxJ,KAAK2K,OAAOa,IAAI/C,EAAGgB,SAAUzJ,KAAKyL,KAAK5K,GAAQ4H,EAAGe,MAkBrD,G,mCAKO,SAAsB3I,GACY,WAApCb,KAAKT,IAAIsO,uBACPjO,EAAeI,KAAKT,MAEtBS,KAAK2K,OAAOtB,YAAY2C,mBACxBhM,KAAK2K,OAAOa,IAAI/C,EAAGoB,QAASpB,EAAGuB,OAAQhK,KAAKyL,KAAK5K,GAAQ4H,EAAGe,OAC5DxJ,KAAK2K,OAAOtB,YAAY0C,oBAExB/L,KAAK2K,OAAOa,IAAI/C,EAAGoB,QAASpB,EAAGuB,OAAQhK,KAAKyL,KAAK5K,GAAQ4H,EAAGe,OAG9DxJ,KAAK2K,OAAOa,IAAIxL,KAAKyL,KAAK5K,GAAQ4H,EAAGoB,QAASpB,EAAGuB,OAEpD,G,6BAEO,SAAgBnJ,GACtBb,KAAK2K,OAAOtB,YAAYuC,qBACxB5L,KAAK2K,OAAOa,IAAIxL,KAAKyL,KAAK5K,GAAQ4H,EAAGoB,QAASpB,EAAGuB,OAClD,G,2BAEO,SAAcnJ,GACpBb,KAAK8N,wBAAwBjN,EAC9B,G,qCAEO,SAAwBA,GAC9Bb,KAAK2K,OAAOtB,YAAYwC,qBAExB7L,KAAK2K,OAAOa,IAAI/C,EAAGoB,QAASpB,EAAGuB,OAAQhK,KAAKyL,KAAK5K,GAAQ4H,EAAGe,MAC7D,G,yBAKO,SAAY3I,GACbb,KAAK4K,OAGR5K,KAAK2K,OAAOa,IAAI/C,EAAGgB,SAAUzJ,KAAKyL,KAAK5K,GAAQ4H,EAAGe,OAFlDxJ,KAAK2K,OAAOa,IAAI/C,EAAGgB,SAAUzJ,KAAKyL,KAAK5K,GAAQ4H,EAAGoB,QAASpB,EAAGuB,OAIjE,G,kBAEO,SAAKnJ,GACX,OClVE,SAAyBA,GAC7B,OACEA,EAAMR,OAASR,EAAUqB,2BACzBL,EAAMR,OAASR,EAAU2C,2BACzB3B,EAAMR,OAASR,EAAUgC,kBACzBhB,EAAMR,OAASR,EAAU4C,wBACzB5B,EAAMR,OAASR,EAAU6C,aAE5B,CD0UOqL,CAAelN,GCzWT,SAA0BmN,EAAmBxO,GACzD,GAAoB,aAAhBA,EACF,OAAOwO,EAGT,I,EAAIC,EAAO,GACX,GAAID,EAAU1K,QAAU,IAAM0K,EAAUE,SAAS,KAAM,O,4CAE9BF,EAAUtG,MAAM,O,2LAAtCsG,EAFoD,KAEtCC,EAFsC,UAGtD,CAQD,OALED,EADkB,gBAAhBxO,EACUwO,EAAUG,OAAO,EAAG,KAEpBH,EAAUI,SAAS,EAAG,MAGjB,CAAC,IAAD,O,0PAAA,CAAQH,IAAMzF,KAAK,IACvC,CDwVY6F,CAAgBrO,KAAKsO,UAAUzN,GAAQb,KAAKT,IAAIC,aAEhDQ,KAAKsO,UAAUzN,EAEzB,G,4BAGO,SAAeA,GACrB,OAAOb,KAAKsO,UAAUzN,EACvB,G,uBAGO,SAAUA,GAChB,IAAIyB,EAAWzB,GASR,ORxSgB,SAACA,GAAD,OACzBA,EAAMR,OAASR,EAAUuN,oBACzBvM,EAAMR,OAASR,EAAUqN,iBACzBrM,EAAMR,OAASR,EAAUwN,sBACzBxM,EAAMR,OAASR,EAAUsN,gBAJA,CQwSZoB,CAAY1N,GACdb,KAAKD,OAAOlB,IAAIgC,GAEhBA,EAAMX,KAXb,OAAQF,KAAKT,IAAIiP,aACf,IAAK,WACH,OAAOhI,EAAmB3F,EAAMN,KAClC,IAAK,QACH,OAAOM,EAAMX,KACf,IAAK,QACH,OAAOW,EAAMX,KAAKuO,cAOzB,I,yEA7WkB/D,G,sKE7BrB,IAAMgE,EAAwB,YAWTC,EAAAA,WAMnB,WAAoBxH,I,4FAAc,SAAd,KAAAA,OAAAA,EALZ,KAAAyH,YAAwB,EAKM,C,oDAKtC,WACE,OAAO5O,KAAKmH,MACb,G,uBAMD,WACE,OAAOnH,KAAKmH,OAAO1H,OAAOO,KAAK4O,YAAYtL,OAC5C,G,sBAKD,WACE,OAAOtD,KAAK4O,YAAYtL,MACzB,G,8BAKD,WACEtD,KAAK4O,YAAY5L,KAAK0L,EACvB,G,gCAKD,WACE1O,KAAK4O,YAAY5L,KAnDW,cAoD7B,G,8BAMD,WACMhD,KAAK4O,YAAYtL,OAAS,GAAKqC,EAAK3F,KAAK4O,eAAiBF,GAC5D1O,KAAK4O,YAAYxE,KAEpB,G,gCAOD,WACE,KAAOpK,KAAK4O,YAAYtL,OAAS,GAClBtD,KAAK4O,YAAYxE,QACjBsE,IAIhB,G,8BAGD,WACE1O,KAAK4O,YAAc,EACpB,M,sEAvEkBD,G,0LCEAE,EAAAA,WAInB,WAAYtP,I,4FAAkB,SAC5BS,KAAKT,IAAMA,EACXS,KAAKD,OAAS,IAAID,EAAOE,KAAKT,IAAIQ,OACnC,C,8CAKS,WACR,MAAM,IAAIwI,MAAM,0CACjB,G,6BAKO,WACN,IAAMuG,EAAkD9O,KAAK+O,YAI7D,OAHKD,EAAIE,kBACPF,EAAIE,gBAAkBhP,KAAKiP,aAEtBH,EAAIE,eACZ,G,oBAOM,SAAO/H,GACZ,IAAMrE,EAAS5C,KAAKgP,kBAAkBE,SAASjI,EAAOjH,KAAKT,IAAI4P,YAAc,CAAC,GACxEC,EAAM,IAAIzM,EAAOC,GAAQyM,QACzBC,EAAiBtP,KAAKuP,UAAUH,GAGtC,OAFmBpP,KAAKwP,WAAWF,GAEjBG,SACnB,G,uBAEO,SAAU3M,GAAuB,WACvC,OAAOA,EACJiF,KAAI,SAAAlF,GAAI,OAAI,EAAK6M,gBAAgB7M,EAAzB,IACR2F,KAAK,KAAK/I,OAAOO,KAAKT,IAAIoQ,oBAAsB,GACpD,G,6BAEO,SAAgB5M,GACtB,IAAM4H,EAAS,IAAID,EAAoB,CACrCnL,IAAKS,KAAKT,IACVQ,OAAQC,KAAKD,OACb4K,OAAQ,IAAIvB,EAAO,IAAIuF,EAAYrP,EAAaU,KAAKT,SACpD2M,OAAOnJ,EAAUE,UASpB,OAPKF,EAAUM,eAEJrD,KAAKT,IAAIqQ,uBAClBjF,EAAOa,IAAI/C,EAAGoB,QAAS,KAEvBc,EAAOa,IAAI/C,EAAGkB,WAAY,MAErBgB,EAAOkF,UACf,G,wBAEO,SAAW5I,GAQjB,OAPIjH,KAAKT,IAAIuQ,gBACX7I,EC5EQ,SAA+BA,GAI3C,IAHA,IAAMG,EAAQH,EAAMS,MAAM,MAEtBqI,EAAqB,GAChBzI,EAAI,EAAGA,EAAIF,EAAM9D,OAAQgE,IAE5BF,EAAME,GAAGE,MAAM,gBAAgB,wBACjC,IAAIwI,EAAuB,GAC3B,GAAI5I,EAAME,GAAGE,MAAM,QACjBwI,EAAa,CAAC5I,EAAME,QACf,CAEL,GADAyI,EAAS/M,KAAKoE,EAAME,IAChBF,EAAME,GAAGE,MAAM,0BACjB,iBAEFwI,EAAWhN,KAAKoE,IAAQE,GACzB,CAGD,KAAOF,EAAME,KAAKE,MAAM,SACtBwI,EAAWhN,KAAKoE,EAAME,IAIxB,IAAM2I,EAAaD,EAChBjI,KAAI,SAAAC,GAAI,MAAK,CAAEA,KAAAA,EAAMkI,QAASlI,EAAKR,MAAM,4BAAjC,IACRO,KAAI,YAAsB,IAAnBC,EAAmB,EAAnBA,KAAMkI,EAAa,EAAbA,QACZ,OAAKA,EAGE,CACLC,cAAeD,EAAQ,GACvBE,GAAIF,EAAQ,GACZG,MAAOH,EAAQ,IALR,CAAEC,cAAenI,EAO3B,IAGGsI,EAAiBnK,EACrB8J,EAAWlI,KAAI,qBAAGoI,cAAkCzJ,QAAQ,WAAY,GAAzD,KAGjBsJ,EAAaC,EAAWlI,KACtB,gBAAGoI,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,GAAIC,EAAtB,EAAsBA,MAAtB,OACEF,GACCE,EAAQ,IAAI5Q,OAAO6Q,EAAiBH,EAAc7M,OAAS,IAAM8M,QAAAA,EAAM,IAAMC,EAAQ,GAFxF,IAIFN,EAAW,GAAH,SAAOA,GAAP,EAAoBC,GAzCK,KA2CnCD,EAAS/M,KAAKoE,EAAME,IAGtB,OAAOyI,EAASvH,KAAK,KACtB,CDuBa+H,CAAqBtJ,IAEA,WAA3BjH,KAAKT,IAAI2H,eAAyD,YAA3BlH,KAAKT,IAAI2H,gBAClDD,EAAQD,EAAqBC,EAAOjH,KAAKT,IAAI2H,cAAe5H,EAAaU,KAAKT,OAGzE0H,CACR,M,sEAzEkB4H,GEZR2B,EAAe,SAACC,GAAD,OAAoBA,EAAO/J,QAAQ,2BAAwB,OAA3D,EAEfgK,GAAmB,IAAH,+FAEhBC,GAAiB,SAACC,GAAD,OAA6B,IAAIzI,OAAJ,aAAiByI,EAAjB,KAA6B,KAA1D,EAGjBC,GAA2B,SAACC,GAAD,OACtCA,EACGpJ,MAAM,IACNK,KAAI,YAAI,MAAK,KAAM/F,KAAK+O,GAAQ,OAAnB,WAAgCA,EAAKC,eAArC,OAAqDD,EAAKtC,cAA1D,IAAL,IACRjG,KAAK,GAJ8B,EAO3ByI,GAAc,SAACC,GAC1B,OAAqB,IAAjBA,EAAM5N,OAEDkN,EAAaU,GAGb,MAAQV,EAAaU,GAAS,KAExC,EAEYC,GAAa,SAACP,GAAD,OAA6BA,EAAU,OAASA,EAAU,IAA1D,E,8NCXnB,IA+DCQ,GAWAC,GAIAC,GAEAC,GAzEK1N,GAAc,SAAC2N,GAAD,OACzBb,GAAea,EAAOzJ,IAAIkJ,IAAazI,KAAK,KADnB,EAoBrBiJ,GAA0B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,OAC9BD,GAAQC,EAAR,cAAwBD,GAAQ,IAAhC,OAAqCC,EAAS,IAAM,GAApD,MAA6D,EAD/B,EAMnBC,GAAe,SAACC,GAAmE,IAAvCC,EAAuC,uDAAd,CAAC,EACjF,GAAgC,IAA5BD,EAAiBvO,OACnB,MAAO,OAGT,IAAMyO,EAAkBN,GAAwBK,GAE1CE,EAA0BnM,EAAiBgM,GAC9C9J,IAAI8I,IACJrI,KAAK,KACL9B,QAAQ,KAAO,QAElB,OAAO,IAAIyB,OAAJ,aAAiB6J,EAAjB,YAA4CD,EAA5C,OAAkE,MAC1E,EAOYE,GAAY,SAAC9C,EAAsByB,GAC9C,GAAKzB,EAAW7L,OAAhB,CAGA,IAAM4O,EAAa/C,EAAWpH,IAAIyI,GAAchI,KAAK,KAErD,OAAOmI,GAAe,MAAD,OAAOuB,EAAP,eAAwBtB,EAAxB,KAHpB,CAIF,EAsCYuB,GAAgB,CAC3B,KAAM,qBACN,KAAMC,OAAO7R,IAAb,wGACA,KAAM6R,OAAO7R,IAAb,kGACA,KAAM6R,OAAO7R,IAAb,kGACA,GAAM6R,OAAO7R,IAAb,8FACA,WAAY6R,OAAO7R,IAAnB,kGACA,WAAY6R,OAAO7R,IAAnB,kGACA,KAAM6R,OAAO7R,IAAb,8DACA,OA5CM6Q,GAAsB,CAC1B,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KAODC,GAAc3S,OAAO2T,QAAQjB,IAAqBrJ,KAAI,gB,IAAA,G,EAAA,E,4CAAA,I,kxBAAEuK,EAAF,KAAQC,EAAR,WAHtC,mCAIN7L,QAAQ,UAAW8J,EAAa8B,IAAO5L,QAAQ,WAAY8J,EAAa+B,GAD5B,IAItDjB,GAAoBd,EAAa9R,OAAO8T,KAAKpB,IAAqB5I,KAAK,KAEvE+I,GAA2Ba,OAAO7R,IAAV,yGAA2B+Q,IAGlC,WAAH,OAAcC,GAAd,YAA0CF,GAAY7I,KAAK,KAA3D,QA2BhBiK,GAAqB,SAACC,GAC1B,MAA0B,iBAAfA,EACFP,GAAcO,IDlGSC,GAAF,ECoGLD,GDpGOC,SAAUC,EAAb,EAAaA,cAAb,aACvBD,EAAS5K,IAAI8I,IAA0BrI,KAAK,MADrB,OAC4BoK,EAAgB,GAAK,IADjD,KCoGUT,GAAcO,EAAWG,QDpGnC,IAAC,EAAEF,EAAUC,CCsG3C,EAWYE,GAAgB,SAACJ,GAAD,OAC3BA,EAAW3K,IAAI0K,IAAoBjK,KAAK,IADb,EAIhBiI,GAAS,SAACiC,GAAD,OACpB/B,GAAemC,GAAcJ,GADT,EAMTK,GAAa,eAACC,EAAD,uDAA4B,CAAC,EAA7B,OACxBrC,GAAesC,GAAkBD,GADT,EAMbC,GAAoB,WAKH,6DAAd,CAAC,EAJfC,EAI4B,EAJ5BA,MACAxB,EAG4B,EAH5BA,KACAC,EAE4B,EAF5BA,OACAwB,EAC4B,EAD5BA,qBAGMC,EAAS,4BAETC,EAAS,sBAETC,EAAa9C,EAAa0C,QAAAA,EAAS,IACnCK,EAAY/C,EAAakB,QAAAA,EAAQ,IAEjCd,EAAUuC,EAAoB,WAC5BC,GAD4B,OACnBC,GADmB,OACVC,EADU,aACKF,GADL,OACcC,GADd,OACuBE,EADvB,iBAE5BH,GAF4B,OAEnBE,EAFmB,aAEJF,GAFI,OAEKC,GAFL,OAEcE,EAFd,MAIpC,OAAO5B,EAASR,GAAWP,GAAWA,CACvC,E,2KCzKoB4C,GAAAA,WAOnB,WAAYC,I,4FAA4C,SAJhD,KAAAC,MAAQ,GAER,KAAAzT,MAAQ,EAGdD,KAAKyT,MAAQA,CACd,C,6CASM,SAASC,GACd1T,KAAK0T,MAAQA,EACb1T,KAAKC,MAAQ,EAKb,IAJA,IACIY,EADE+B,EAAkB,GAIjB5C,KAAKC,MAAQD,KAAK0T,MAAMpQ,QAAQ,CAErC,IAAMiK,EAAsBvN,KAAK2T,gBAEjC,GAAI3T,KAAKC,MAAQD,KAAK0T,MAAMpQ,OAAQ,CAGlC,KADAzC,EAAQb,KAAK4T,aAAa/S,IAExB,MAAM,IAAI0H,MAAJ,mCAAsCmL,EAAMG,MAAM7T,KAAKC,MAAO,KAA9D,MAGR2C,EAAOI,KAAItE,OAAAA,OAAAA,OAAAA,OAAAA,CAAAA,EAAMmC,GAAK,CAAE0M,oBAAAA,IACzB,CACF,CACD,OAAO3K,CACR,G,2BAEO,WACN8N,GAAiBoD,UAAY9T,KAAKC,MAElC,IAAMiQ,EAAUQ,GAAiBqD,KAAK/T,KAAK0T,OAC3C,GAAIxD,EAGF,OADAlQ,KAAKC,OAASiQ,EAAQ,GAAG5M,OAClB4M,EAAQ,EAGlB,G,0BAEO,SAAa8D,GACnB,OACEhU,KAAKiU,WAAWpU,EAAUsJ,gBAC1BnJ,KAAKiU,WAAWpU,EAAUqJ,eAC1BlJ,KAAKiU,WAAWpU,EAAUuF,QAC1BpF,KAAKiU,WAAWpU,EAAU4E,aAC1BzE,KAAKiU,WAAWpU,EAAU+E,cAC1B5E,KAAKiU,WAAWpU,EAAUiN,oBAC1B9M,KAAKiU,WAAWpU,EAAUmN,SAC1BhN,KAAKkU,uBAAuBF,IAC5BhU,KAAKmU,sBAAsBtU,EAAUqN,kBACrClN,KAAKmU,sBAAsBtU,EAAUsN,mBACrCnN,KAAKmU,sBAAsBtU,EAAUuN,qBACrCpN,KAAKmU,sBAAsBtU,EAAUwN,uBACrCrN,KAAKiU,WAAWpU,EAAUoN,WAC1BjN,KAAKiU,WAAWpU,EAAUkN,SAC1B/M,KAAKiU,WAAWpU,EAAUyE,aAC1BtE,KAAKiU,WAAWpU,EAAUsD,YAC1BnD,KAAKiU,WAAWpU,EAAU+M,SAE7B,G,mCAEO,SAAsBwH,GAC5B,GAAIA,KAAapU,KAAKyT,MAAO,CAC3B,IAAM5S,EAAQb,KAAKiU,WAAWG,GACxBC,EAAYrU,KAAKyT,MAAMW,GAC7B,GAAIvT,EACF,OAAIwT,aAAS,EAATA,EAAW7V,KACN,OAAP,wBAAYqC,GAAK,CAAErC,IAAK6V,EAAU7V,IAAIqC,EAAMX,QAEvCW,CAEV,CAEF,G,oCAEO,SAAuBmT,GAG7B,GAA4B,OAAxBA,aAAa,EAAbA,EAAe9T,MAKnB,OACEF,KAAKiU,WAAWpU,EAAUyB,sBAC1BtB,KAAKiU,WAAWpU,EAAU8B,oBAC1B3B,KAAKiU,WAAWpU,EAAUgC,mBAC1B7B,KAAKiU,WAAWpU,EAAU4C,yBAC1BzC,KAAKiU,WAAWpU,EAAU2C,4BAC1BxC,KAAKiU,WAAWpU,EAAU6C,gBAC1B1C,KAAKiU,WAAWpU,EAAU0C,kBAC1BvC,KAAKiU,WAAWpU,EAAUqB,4BAC1BlB,KAAKiU,WAAWpU,EAAU2B,yBAC1BxB,KAAKiU,WAAWpU,EAAUmB,iBAE7B,G,wBAGO,SAAWoT,GACjB,IAAME,EAAOtU,KAAKyT,MAAMW,GACxB,GAAKE,EAGL,OAAOtU,KAAKwH,MAAM,CAChBnH,KAAM+T,EACNG,MAAOD,EAAKC,MACZC,UAAWF,EAAKjV,OAEnB,G,mBAGO,YAQP,IAPCgB,EAOD,EAPCA,KACAkU,EAMD,EANCA,MACAC,EAKD,EALCA,UAMAD,EAAMT,UAAY9T,KAAKC,MACvB,IAAMiQ,EAAUqE,EAAMR,KAAK/T,KAAK0T,OAChC,GAAIxD,EAAS,CACX,IAAMuE,EAAevE,EAAQ,GAEvBwE,EAAW,CACfrU,KAAAA,EACAE,IAAKkU,EACLvU,KAAMsU,EAAYA,EAAUC,GAAgBA,EAC5CjU,MAAOR,KAAKC,MACZS,IAAKV,KAAKC,MAAQwU,EAAanR,QAKjC,OADAtD,KAAKC,OAASwU,EAAanR,OACpBoR,CACR,CAEF,M,uEAzJkBlB,G,grBCFAmB,GAAAA,WAGnB,WAAoBpV,I,4FAAqB,SAArB,KAAAA,IAAAA,EAClBS,KAAK4U,aAAe5U,KAAK6U,kBAAkBtV,EAC5C,C,6CAEM,SAASmU,EAAeoB,GAC7B,IAAMrB,EAAQ,OAAH,wBACNzT,KAAK4U,cACL5U,KAAK+U,gBAAgB/U,KAAKT,IAAKuV,IAE9BlS,EAAS,IAAI4Q,GAAgBC,GAAOvE,SAASwE,GACnD,OAAO1T,KAAKT,IAAIyV,YAAchV,KAAKT,IAAIyV,YAAYpS,GAAUA,CAC9D,G,+BAIO,SAAkBrD,GAAqB,M,YFMA0V,EAwGxBC,EAvHGC,E,EEUxB,OAAOnV,KAAKoV,YAAL,QACJvV,EAAUsJ,cAAgB,CAAEoL,MAAO,IAAF,yDAD7B,KAEJ1U,EAAUqJ,aAAe,CACxBqL,OFboBY,EEayB,QAApB,EAAA5V,EAAI4V,wBAAgBE,IAAAA,EAAAA,EAAI,CAAC,MFZxD,IAAIlN,OAAJ,aAAiBgN,EAAiBpN,IAAIyI,GAAchI,KAAK,KAAzD,wBAAqF,SES5E,KAKJ3I,EAAUuF,MAAQ,CAAEmP,MAAO,IAAF,oBALrB,KAMJ1U,EAAU4E,WAAa,CAAE8P,MAAOA,GAAgC,QAAd,EAAAhV,EAAI+V,kBAAUC,IAAAA,EAAAA,EAAI,CAAC,QANjE,KAOJ1V,EAAU+E,YAAc,CAAE2P,MAAOA,GAAiC,QAAf,EAAAhV,EAAIiW,mBAAWC,IAAAA,EAAAA,EAAI,CAAC,QAPnE,KAQJ5V,EAAUiN,kBAAoB,CAAEyH,MAAOA,GAAahV,EAAImW,cARpD,KASJ7V,EAAUmN,OAAS,CAClBuH,MAAK,sNAVF,KAaJ1U,EAAUyB,oBAAsB,CAC/BiT,MAAO,IAAF,kCACLlV,MAAO,SAAAsW,GAAC,OAAInP,EAAmBmP,EAAE3E,cAAzB,IAfL,KAiBJnR,EAAU8B,kBAAoB,CAC7B4S,MAAO,IAAF,8BACLlV,MAAO,SAAAsW,GAAC,OAAInP,EAAmBmP,EAAE3E,cAAzB,IAnBL,KAqBJnR,EAAUgC,iBAAmB,CAC5B0S,MAAOA,GAAmBhV,EAAIqW,iBAAkBrW,EAAIuS,YACpDzS,MAAO,SAAAsW,GAAC,OAAInP,EAAmBmP,EAAE3E,cAAzB,IAvBL,KAyBJnR,EAAU4C,uBAAyB,CAClC8R,MAAOA,GAAmBhV,EAAIsW,sBAAuBtW,EAAIuS,YACzDzS,MAAO,SAAAsW,GAAC,OAAInP,EAAmBmP,EAAE3E,cAAzB,IA3BL,KA6BJnR,EAAU2C,0BAA4B,CACrC+R,MAAOA,GAAmBhV,EAAIuW,yBAA0BvW,EAAIuS,YAC5DzS,MAAO,SAAAsW,GAAC,OAAInP,EAAmBmP,EAAE3E,cAAzB,IA/BL,KAiCJnR,EAAU6C,cAAgB,CACzB6R,MAAOA,GAAmBhV,EAAIwW,cAAexW,EAAIuS,YACjDzS,MAAO,SAAAsW,GAAC,OAAInP,EAAmBmP,EAAE3E,cAAzB,IAnCL,KAqCJnR,EAAU0C,gBAAkB,CAC3BgS,MAAOA,GAAsC,QAAnB,EAAAhV,EAAIyW,uBAAeC,IAAAA,EAAAA,EAAI,GAAI1W,EAAIuS,YACzDzS,MAAO,SAAAsW,GAAC,OAAInP,EAAmBmP,EAAE3E,cAAzB,IAvCL,KAyCJnR,EAAUqB,0BAA4B,CACrCqT,MAAOA,GAA+C,QAA5B,EAAAhV,EAAI2W,gCAAwBC,IAAAA,EAAAA,EAAI,CAAC,MAAO,MAAO5W,EAAIuS,YAC7EzS,MAAO,SAAAsW,GAAC,OAAInP,EAAmBmP,EAAE3E,cAAzB,IA3CL,KA6CJnR,EAAU2B,uBAAyB,CAClC+S,MAAOA,GAAmBhV,EAAI6W,sBAAuB7W,EAAIuS,YACzDzS,MAAO,SAAAsW,GAAC,OAAInP,EAAmBmP,EAAE3E,cAAzB,IA/CL,KAiDJnR,EAAUmB,iBAAmB,CAC5BuT,MAAOA,GAAmBhV,EAAIsS,iBAAkBtS,EAAIuS,YACpDzS,MAAO,SAAAsW,GAAC,OAAInP,EAAmBmP,EAAE3E,cAAzB,IAnDL,KAqDJnR,EAAUoN,SAAW,CACpBsH,MAAOhV,EAAI8W,eFuDMnB,EEvDyB3V,EAAI8W,cFwDpD1F,GACEuE,EACGnN,KAAI,SAAAuO,GAAO,MAAK,UAAWA,EAAUA,EAAQ/B,MAAQ9B,GAAmB6D,EAA7D,IACX9N,KAAK,YE3D2D+N,IAtD5D,KAwDJ1W,EAAUkN,OAAS,CAAEwH,MAAOA,GAAahV,EAAIiX,eAxDzC,KAyDJ3W,EAAUyE,WAAa,CACtBiQ,MAAOA,GAAiBhV,EAAIuS,cA1DzB,KA4DJjS,EAAUsD,UAAY,CAAEoR,MAAO,IAAF,kBA5DzB,KA6DJ1U,EAAU+M,SAAW,CACpB2H,OAAsB,0BFzDmBU,EEyDlC,CACL,KACA,KACA,KACA,MAJK,Q,EAKY,QAAb,EAAA1V,EAAIkX,iBAASC,IAAAA,EAAAA,EAAI,G,0VF7D7B/F,GACE,UAAG9K,EAAiBoP,GAAiBlN,IAAIyI,GAAchI,KAAK,KAA5D,gBEuD0B,0BFtDLd,MAAM,IAAIK,IAAIyI,GAAchI,KAAK,IADtD,SEPO,GAuER,G,6BAIO,SACNjJ,EACAuV,GAA+B,M,QAIzB3F,EAAa,CACjBwH,OAAO7B,aAAmB,EAAnBA,EAAqB6B,SAAuB,QAAd,EAAApX,EAAI4P,kBAAUkG,IAAAA,OAAA,EAAAA,EAAEsB,QAAS,GAC9DC,QAAQ9B,aAAmB,EAAnBA,EAAqB8B,UAAwB,QAAd,EAAArX,EAAI4P,kBAAUoG,IAAAA,OAAA,EAAAA,EAAEqB,SAAU,GACjEC,UAAU/B,aAAmB,EAAnBA,EAAqB+B,YAA0B,QAAd,EAAAtX,EAAI4P,kBAAUsG,IAAAA,OAAA,EAAAA,EAAEoB,WAAY,GACvEC,WAC6C,kBAApChC,aAAmB,EAAnBA,EAAqBgC,YACxBhC,EAAoBgC,WACN,QAAd,EAAAvX,EAAI4P,kBAAU8G,IAAAA,OAAA,EAAAA,EAAEa,YAGxB,OAAO9W,KAAKoV,YAAL,QACJvV,EAAUqN,gBAAkB,CAC3BqH,MAAOA,GACLpF,EAAWwH,MACXpC,GAAwBhV,EAAIwX,YAAcxX,EAAIuS,aAEhDtT,IAAK,SAAAmX,GAAC,OAAIA,EAAE9B,MAAM,EAAZ,IANH,KAQJhU,EAAUsN,iBAAmB,CAC5BoH,MAAOA,GAAgBpF,EAAWyH,OAAQrC,GAAoBhV,EAAImW,aAClElX,IAAK,SAAAmX,GAAC,OACUqB,GAAb,EACgF,CAC/EC,SAAUtB,EAAE9B,MAAM,GAAI,GACtBmD,UAAWrB,EAAE9B,OAAO,KAHRmD,UAAb,EAAGC,SACOvQ,QAAQ,IAAIyB,OAAOqI,EAAa,KAAOwG,GAAY,MAAOA,GADpE,MAAaA,CADV,IAVH,KAiBJnX,EAAUuN,mBAAqB,CAC9BmH,MAAOA,GAAgBpF,EAAW0H,SAAU,UAC5CrY,IAAK,SAAAmX,GAAC,OAAIA,EAAE9B,MAAM,EAAZ,IAnBH,KAqBJhU,EAAUwN,qBAAuB,CAChCkH,MAAOpF,EAAW2H,WAAX,2BAAiCP,IAtBrC,GAyBR,G,wBAGO,SACN9C,GAEA,OAAO/U,OAAOwY,YAAYxY,OAAO2T,QAAQoB,GAAO0D,QAAO,gB,IAAA,G,EAAA,E,4CAAA,I,sfAAA,iBAAoB5C,KAApB,IACxD,M,uEA9IkBI,G,+fCJd,IAAMyC,GAAgB,SAACC,GAAD,OAAiCA,EAAQ1P,QAAQ2P,GAAjD,EAgBhBA,GAAqB,SAACC,GAAD,OAChCC,GAAkBC,GAAYF,IAASxP,KAAI,SAAA7H,GAAI,OAAIA,EAAKwX,MAAT,GADf,EAa5BC,GAAgB,IAAH,yBACbC,GAAiB,IAAH,wBACdC,GAAiB,IAAH,wBAEdJ,GAAc,SAACvX,GAGnB,IAFA,IAAID,EAAQ,EACN6X,EAAuB,GACtB7X,EAAQC,EAAKoD,QAAQ,CAE1BqU,GAAc7D,UAAY7T,EAC1B,IAAM8X,EAAgBJ,GAAc5D,KAAK7T,GACrC6X,IACFD,EAAO9U,KAAK,CAAC+U,EAAc,GAAGL,SAC9BzX,GAAS8X,EAAc,GAAGzU,QAI5BuU,GAAe/D,UAAY7T,EAC3B,IAAM+X,EAAqBH,GAAe9D,KAAK7T,GAC/C,GAAI8X,EAAoB,CACtB,IAAMC,EAAUD,EAAmB,GAChCnE,MAAM,GAAI,GACVnM,MAAM,KACNK,KAAI,SAAAtB,GAAC,OAAIA,EAAEiR,MAAN,IACRI,EAAO9U,KAAP,CAAa,IAAb,O,gDAAoBiV,I,0LACpBhY,GAAS+X,EAAmB,GAAG1U,MAChC,CAGDsU,GAAe9D,UAAY7T,EAC3B,IAAMiY,EAAqBN,GAAe7D,KAAK7T,GAC/C,GAAIgY,EAAoB,CACtB,IAAMD,EAAUC,EAAmB,GAChCrE,MAAM,GAAI,GACVnM,MAAM,KACNK,KAAI,SAAAtB,GAAC,OAAIA,EAAEiR,MAAN,IACRI,EAAO9U,KAAKiV,GACZhY,GAASiY,EAAmB,GAAG5U,MAChC,CAED,IAAKyU,IAAkBC,IAAuBE,EAC5C,MAAM,IAAI3P,MAAJ,qCAAwCrI,GAEjD,C,MACD,OAAO4X,CACR,EAEKN,GAAoB,SAApBA,EAAqB,GAA4C,I,EAAA,E,4CAAA,I,6LAA3CtE,EAA2C,KAAjCxB,EAAiC,WACrE,YAAc6E,IAAVrD,EACK,CAAC,IAEHsE,EAAkB9F,GAAM/J,SAAQ,SAAAsG,GAAI,OACzCiF,EAAMnL,KAAI,SAAAoQ,GAAI,OAAIA,EAAKT,OAAS,IAAMzJ,EAAKyJ,MAA7B,GAD2B,GAG5C,ECpFYU,GAAWzR,EAAgB,CAEtCyR,SAAU,CACR,MACA,MACA,MACA,QACA,KACA,MACA,uBACA,KACA,UACA,KACA,OACA,OACA,UACA,WACA,SACA,QACA,OACA,UACA,UACA,SACA,OACA,WACA,OACA,MACA,OACA,SACA,SACA,UACA,SACA,UACA,QACA,QACA,YACA,MACA,OACA,OACA,QACA,WACA,SACA,OACA,SACA,KACA,SACA,KACA,QACA,YACA,WACA,OACA,KACA,OACA,UACA,OACA,OACA,QACA,SACA,QACA,UACA,MACA,KACA,MACA,OACA,QACA,KACA,KACA,KACA,QACA,QACA,OACA,YACA,YACA,QACA,QACA,YACA,UACA,QACA,SACA,OACA,SACA,MACA,OACA,SACA,QACA,cACA,OACA,KACA,QACA,OACA,YACA,QACA,SACA,QACA,OACA,QACA,SACA,OACA,UAEFC,UAAW,CACT,QACA,OACA,QACA,OACA,WACA,YACA,WACA,QACA,MACA,WACA,UACA,SACA,UACA,UACA,UACA,UACA,aACA,aACA,UACA,SACA,SACA,OACA,YAGFC,aAAc,CAAC,MAAO,QAAS,UAAW,QAAS,QAAS,QAC5DC,KAAM,CAAC,QAEPC,IAAK,CACH,OACA,OACA,QACA,KACA,MACA,QACA,UACA,WACA,UACA,WACA,mBC5ISC,GAAY9R,EAAgB,CAEvC+R,KAAM,CACJ,kBACA,8BACA,qBACA,sBACA,eACA,oBACA,wBACA,sBACA,qBACA,sBAGFC,kBAAmB,CACjB,YACA,YACA,MACA,OACA,QACA,UACA,YACA,aACA,MACA,MACA,mBACA,aACA,cACA,aACA,MACA,UACA,YAGFC,UAAW,CACT,YACA,YACA,mBACA,MACA,UACA,SACA,UACA,QACA,UACA,cACA,aACA,MACA,MACA,aACA,OAGFC,qBAAsB,CACpB,wBACA,mBACA,mBACA,kBAGFC,MAAO,CAEL,eACA,eACA,kBACA,iBACA,sBACA,2BACA,gBACA,SACA,cACA,UACA,gBAGFC,QAAS,CAAC,aAEVC,WAAY,CAEV,mBACA,gBACA,aAGFC,KAAM,CACJ,eACA,UACA,OACA,WACA,WACA,YACA,aACA,sBACA,cACA,WACA,aACA,aAGFC,SAAU,CACR,mBACA,WACA,UACA,eACA,eACA,gBACA,iBACA,kBACA,WACA,kBAGFC,UAAW,CAAC,SAEZC,eAAgB,CAAC,kBAEjBC,UAAW,CACT,qBACA,qBACA,WACA,UACA,cACA,eACA,YACA,aACA,cACA,iBACA,YACA,yBACA,cACA,kBACA,kBACA,mBACA,cACA,gBACA,eACA,YACA,gBACA,eACA,cACA,cACA,UACA,aACA,cACA,YACA,YACA,kBACA,cACA,qBACA,kBACA,iBACA,eACA,0BACA,aACA,kBACA,mBACA,kBACA,gBACA,mBACA,kBACA,aACA,YACA,cACA,iBACA,yBACA,iBACA,aACA,mBACA,eACA,eACA,YACA,cACA,gBACA,gBACA,aACA,WACA,eACA,YACA,OACA,QAGFC,KAAM,CAAC,mBAAoB,MAAO,OAAQ,SAAU,UAEpDC,IAAK,CAAC,iBAAkB,kBAAmB,0BAA2B,qBAEtEC,SAAU,CAAC,gBAAiB,UAAW,eAAgB,gBAAiB,oBAExEC,KAAM,CACJ,eACA,aACA,sBACA,aACA,qBACA,mBACA,4BACA,mBACA,kBAGFC,KAAM,CACJ,MACA,OACA,SACA,SACA,cACA,OACA,OACA,MACA,QACA,MACA,KACA,MACA,QACA,WACA,QACA,MACA,cACA,gBACA,cACA,WACA,gBACA,MACA,QACA,QACA,OACA,UACA,QACA,MACA,OACA,OACA,QACA,MACA,OACA,OACA,QACA,MACA,OACA,OACA,QACA,QACA,gBAGFC,WAAY,CACV,cACA,aACA,YACA,OACA,MACA,kBACA,mBAGFC,IAAK,CACH,qBACA,0BACA,mBACA,kBACA,eACA,sBACA,oBACA,WACA,oBACA,kBAGFC,UAAW,CAAC,OAAQ,aAAc,eAAgB,YAAa,QAAS,cAExEC,SAAU,CAAC,gBAEXC,qBAAsB,CACpB,OACA,YACA,aACA,aACA,cACA,SACA,UACA,WACA,YAGFtJ,OAAQ,CACN,QACA,cACA,cACA,mBACA,MACA,uBACA,wBACA,SACA,kBACA,YACA,SACA,cACA,cACA,WACA,UACA,QACA,OACA,SACA,OACA,QACA,QACA,YACA,yBACA,eACA,kBACA,iBACA,qBACA,eACA,iBACA,gBACA,UACA,SACA,UACA,QACA,OACA,QACA,+BACA,UACA,QACA,cACA,SACA,SACA,YACA,YACA,YACA,iBACA,SACA,YACA,OACA,UACA,SAGFuJ,KAAM,CACJ,eACA,OACA,UACA,WACA,WACA,YACA,aACA,cACA,cAGFC,UAAW,CACT,oBACA,UACA,SACA,YACA,gBACA,gBACA,iBACA,kBACA,mBACA,kBACA,oBACA,mBACA,mBACA,eACA,cACA,eAGFC,KAAM,CAAC,iBAEPC,YAAa,CAAC,WAAY,KAAM,SAAU,UAE1CC,gBAAiB,CACf,MACA,UACA,SACA,UACA,OACA,QACA,YACA,aACA,uBACA,QACA,eACA,wBACA,OACA,MACA,MACA,OACA,MACA,YACA,SACA,aACA,cACA,MACA,MACA,SACA,WACA,UACA,YAEFC,cAAe,CAAC,aAChBC,cAAe,CAAC,UAAW,QAAS,OAAQ,QAAS,aAAc,UAAW,UAC9EC,iBAAkB,CAEhB,WACA,WACA,SACA,SACA,SACA,wBACA,QACA,OAEFC,eAAgB,CACd,eACA,eACA,oBACA,OACA,WACA,WACA,MACA,YACA,YACA,kBACA,OACA,SACA,QACA,oBACA,MACA,iBACA,UACA,mBACA,SACA,oBACA,OACA,YACA,oBACA,mBACA,oBACA,oBACA,kBACA,mBACA,oBACA,mBACA,mBACA,OACA,QAEFC,SAAU,CAAC,YAAa,WAAY,mBAAoB,mBACxDC,WAAY,CAAC,eAAgB,uBAC7BC,WAAY,CACV,MACA,OACA,QACA,OACA,QACA,OACA,QACA,QACA,OACA,MACA,OACA,UACA,MACA,QACA,KACA,MACA,OACA,QACA,KACA,MACA,UACA,OACA,QACA,MACA,OACA,OACA,MACA,QAEFC,YAAa,CAAC,eAAgB,iBAAkB,kBAChDC,aAAc,CACZ,SAEA,QACA,OACA,SACA,QACA,OACA,QACA,UACA,QACA,OACA,QACA,QACA,SACA,SAEFC,oBAAqB,CAAC,mBAAoB,0BAA2B,eACrEC,UAAW,CAAC,OAAQ,SAAU,OAC9BC,aAAc,CACZ,MACA,QACA,MACA,MACA,SACA,MACA,YACA,aACA,cACA,MACA,aACA,OACA,YACA,QACA,eACA,kBACA,kBACA,OACA,kBACA,cAEFC,WAAY,CACV,eACA,QACA,cACA,OACA,mBACA,KACA,WACA,OACA,OACA,aAEFC,MAAO,CAAC,iBAAkB,gCAC1B1C,IAAK,CAAC,WACN2C,MAAO,CAAC,QAAS,WAGjBC,UAAW,CAAC,QAAS,UAAW,UAAW,aAAc,aAAc,Y,kiCCvhBzE,IAAMxF,GAAmBwB,GAAc,CAErC,mBACA,iDACA,OACA,QACA,WACA,SACA,UACA,SACA,eACA,WACA,QACA,SACA,iBAGA,gBACA,SAEA,SACA,MAEA,gBAEA,iBAEA,eACA,oDACA,aAEA,0DACA,+EACA,+CAEA,0BACA,6BACA,0BACA,YACA,2BACA,sBACA,cACA,gBACA,gBAEA,gCACA,kBACA,aACA,wBACA,kBACA,yBACA,sEACA,yBACA,gBACA,gDACA,wDACA,WACA,eACA,kBACA,UACA,qBACA,oBACA,sCACA,2BAEA,wCACA,oBACA,0BACA,uCACA,oCACA,6BACA,yBACA,+BACA,4BACA,+BACA,8BACA,gCACA,mBAEA,QACA,SAEA,UACA,oBACA,OACA,WACA,SACA,aACA,QACA,YACA,QACA,QACA,WACA,UACA,MACA,UACA,QACA,oBACA,qBACA,uBACA,QACA,SACA,OAEA,SAEA,gBAGIvB,GAAwBuB,GAAc,CAC1C,yBACA,kBACA,uBAGIrB,GAAgBqB,GAAc,CAClC,OACA,qCACA,yBAGIpB,GAAkB,CAEtB,qBAEA,WACA,cACA,qBAImBqF,GAAAA,SAAAA,I,8xBAInB,WACE,OAAO,IAAI1G,GAAU,CACnBiB,iBAAAA,GACAC,sBAAAA,GACAE,cAAAA,GACAD,yBAA0B,CAAC,OAAQ,QACnCE,gBAAAA,GACAnE,iBAAkBuG,GAClBhC,sBAAuBqC,GACvBnD,WAAY,CAAC,IAAK,KAClBE,YAAa,CAAC,IAAK,KACnBgB,YAAa,CAGX,CAAE3D,MAAO,WAAYF,SAAU,CAAC,IAAK,IAAK,KAAM,OAChD,CAAEE,MAAO,WAAYF,SAAU,CAAC,IAAK,IAAK,KAAM,OAChD,CAAEE,MAAO,KAAMF,SAAU,CAAC,IAAK,IAAK,KAAM,OAC1C,CAAEE,MAAO,KAAMF,SAAU,CAAC,IAAK,IAAK,KAAM,QAE5C+C,WAAY,CAAC,MACb5D,WAAY,CAAEH,QAAQ,GACtBxC,WAAY,CAAE2H,YAAY,EAAMH,MAAO,CAAC,KAAMC,OAAQ,CAAC,MACvDzB,iBAAkB,CAAC,KAAM,KACzBsB,UAAW4E,EAAkB5E,UAC7BzB,YAAAA,IAEH,M,uEA9BkBqG,CAA0BxM,GAiC/C,SAASmG,GAAYpS,GACnB,OAKF,SAA+BA,GAC7B,IAAI0Y,EAAYlb,EAChB,OAAOwC,EAAOmF,KAAI,SAAAlH,GAChB,MAAmB,WAAfA,EAAMX,MAAwC,MAAnBob,EAAUpb,MACvCob,EAAYza,EACL,OAAP,wBAAYA,GAAK,CAAER,KAAMR,EAAU2B,2BAEnC8Z,EAAYza,EACLA,EAEV,GACF,CAhBQ0a,CAmBT,SAAmC3Y,GAEjC,I,MADM4Y,EAAqB,GAClBlU,EAAI,EAAGA,EAAI1E,EAAOU,OAAQgE,IAAK,CACtC,IAAMzG,EAAQ+B,EAAO0E,GAErB,IAAKxG,EAAQK,MAAMN,IAAUC,EAAQoB,OAAOrB,KAAmC,OAAX,QAAb,EAAA+B,EAAO0E,EAAI,UAAE+N,IAAAA,OAAA,EAAAA,EAAEnV,MAAc,CAClF,IAAMub,EAAWC,GAA6B9Y,EAAQ0E,EAAI,GACpDqU,EAAgB/Y,EAAOiR,MAAMvM,EAAGmU,EAAW,GACjDD,EAAUxY,KAAK,CACb3C,KAAMR,EAAUyE,WAChB/D,IAAKob,EAAc5T,IAAI6T,GAAmB,QAAQpT,KAAK,IACvDtI,KAAMyb,EAAc5T,IAAI6T,GAAmB,SAASpT,KAAK,IACzDhI,MAAOK,EAAML,MACbE,IAAKG,EAAMH,IAAMib,EAAc5T,KAAI,SAAA5C,GAAC,OAAIA,EAAEjF,KAAKoD,MAAX,IAAmB8C,QAAO,SAACJ,EAAGC,GAAJ,OAAUD,EAAIC,CAAd,MAEhEqB,EAAImU,CACL,MACCD,EAAUxY,KAAKnC,EAElB,CACD,OAAO2a,CACR,CAxC8BK,CAA0BjZ,GACxD,CAlCQyY,GAAAA,UAAY,CAAC,IAAK,KAAM,KAAM,MA2EvC,IAAMO,GACJ,SAACpd,GAAD,OACA,SAACqC,GACC,OAAIA,EAAMR,OAASR,EAAUyE,YAAczD,EAAMR,OAASR,EAAUuF,MAC3DvE,EAAMrC,GAAO,IAEbqC,EAAMrC,EAEhB,CAPD,EASF,SAASkd,GAA6B9Y,EAAiBkZ,GAErD,IADA,IAAIC,EAAQ,EACHzU,EAAIwU,EAAYxU,EAAI1E,EAAOU,OAAQgE,IAAK,CAC/C,IAAMzG,EAAQ+B,EAAO0E,GAQrB,GAPmB,MAAfzG,EAAMX,KACR6b,IACwB,MAAflb,EAAMX,KACf6b,IACwB,OAAflb,EAAMX,OACf6b,GAAS,GAEG,IAAVA,EACF,OAAOzU,CAEV,CACD,OAAO1E,EAAOU,OAAS,CACxB,CC9OM,IAAMmV,GAAY9R,EAAgB,CAEvCiS,UAAW,CACT,YACA,MACA,OACA,cACA,QACA,YACA,YACA,aACA,QACA,aACA,kBACA,YACA,WACA,UACA,MACA,SACA,MACA,kBACA,kBACA,eACA,YACA,YACA,aACA,iBACA,YACA,UACA,aACA,WACA,WACA,WACA,aACA,SACA,cACA,MACA,UACA,WACA,MACA,WACA,gBACA,UAGFoD,OAAQ,CACN,MACA,SACA,OACA,WACA,aACA,eACA,cACA,aACA,aACA,cACA,aACA,QACA,YACA,YACA,WACA,OACA,OACA,QACA,QACA,SACA,SACA,SACA,YACA,QACA,SACA,SACA,OACA,QACA,cACA,iBACA,UACA,OACA,OACA,QACA,mBACA,cACA,MACA,OACA,WACA,gBACA,mBACA,SACA,WACA,MACA,OACA,OACA,MACA,aACA,YACA,gBACA,YACA,OACA,eACA,SACA,WACA,kBACA,mBACA,UACA,MACA,SACA,iBACA,cACA,eACA,aACA,yBACA,sBACA,uBACA,yBACA,0BACA,0BACA,0BACA,6BACA,UACA,aACA,SACA,mBACA,SACA,kBACA,aACA,aACA,kBACA,eACA,MACA,UACA,QACA,QACA,kBACA,yBACA,UACA,cACA,UACA,WACA,OACA,aACA,WACA,YACA,cACA,MACA,OACA,qBACA,SACA,SACA,QACA,UACA,MACA,aACA,WACA,QACA,QACA,OACA,SACA,KACA,SACA,mBACA,QACA,QACA,OACA,QACA,MACA,kBACA,cACA,mBACA,MACA,SACA,MACA,QACA,iBACA,SACA,aACA,YACA,gBACA,SACA,eACA,WACA,aACA,qBACA,mBACA,SACA,MACA,UACA,OACA,WACA,SACA,QACA,MACA,WACA,UACA,UACA,cACA,SACA,OACA,OACA,eACA,eACA,cACA,iBACA,gBACA,SACA,UACA,MACA,QACA,QACA,kBACA,QACA,OACA,QACA,QACA,SACA,OACA,MACA,OACA,WACA,UACA,YACA,YACA,aACA,aACA,QACA,OACA,QACA,UACA,SACA,WACA,SACA,YACA,MACA,OACA,OACA,YACA,eACA,gBACA,mBACA,gBACA,eACA,UACA,UACA,UACA,YACA,aACA,eACA,YACA,OACA,aACA,WACA,QACA,kBACA,QACA,UACA,cACA,SACA,QACA,QACA,YACA,UACA,WACA,qBACA,iBACA,aACA,wBACA,uBACA,uCACA,OACA,WACA,OACA,gBACA,aACA,YACA,cACA,aACA,YACA,YACA,gBACA,WACA,QACA,WACA,eACA,UACA,iBACA,eACA,QAGFC,MAAO,CACL,kBACA,oBACA,oBACA,mBACA,YACA,gBACA,eACA,mBACA,YAGFC,IAAK,CAAC,UAENC,KAAM,CAAC,cAAe,MAAO,aAAc,OAAQ,YAAa,QAAS,mBAEzEC,KAAM,CAAC,UChTIhE,GAAWzR,EAAgB,CAEtC0V,SAAU,CACR,MACA,WACA,QACA,WACA,MACA,KACA,QACA,eACA,aACA,YACA,UACA,KACA,QACA,MACA,YACA,SACA,QACA,UACA,aACA,KACA,UACA,WACA,OACA,QACA,YACA,QACA,QACA,UACA,aACA,SACA,SACA,YACA,aACA,aACA,UACA,WACA,SACA,OACA,UACA,eACA,mBACA,eACA,iBACA,eACA,oBACA,UACA,SACA,OACA,WACA,SACA,UACA,UACA,aACA,gBACA,UACA,WACA,WACA,KACA,WACA,SACA,UACA,WACA,WACA,aACA,SACA,WACA,QACA,SACA,YACA,SACA,OACA,WACA,SACA,YACA,QACA,QACA,MACA,OACA,OACA,WACA,YACA,MACA,SACA,OACA,QACA,UACA,OACA,QACA,KACA,YACA,KACA,YACA,QACA,UACA,QACA,QACA,cACA,OACA,KACA,SACA,UACA,MACA,OACA,MACA,WACA,OACA,WACA,QACA,OACA,QACA,SACA,UACA,WACA,OACA,UACA,WACA,OACA,OACA,aACA,eACA,eACA,gBACA,WACA,SACA,OACA,UACA,KACA,OACA,MACA,OACA,QACA,WACA,OACA,KACA,MACA,KACA,eACA,WACA,QACA,eACA,MACA,QACA,UACA,YACA,OACA,SACA,YACA,cACA,eACA,OACA,YACA,SACA,OACA,YACA,UACA,QACA,SACA,aACA,YACA,UACA,OACA,SACA,QACA,UACA,QACA,aACA,WACA,WACA,SACA,qBACA,SACA,UACA,OACA,SACA,gBACA,aACA,cACA,kBACA,kBACA,gBACA,WACA,MACA,SACA,SACA,aACA,UACA,SACA,WACA,WACA,YACA,eACA,SACA,OACA,SACA,WACA,WACA,SACA,YACA,OACA,WACA,SACA,QACA,UACA,UACA,UACA,SACA,eACA,QACA,aACA,OACA,KACA,UACA,OACA,OACA,SACA,QACA,OACA,QACA,YACA,WACA,UACA,OACA,aACA,OACA,WACA,UACA,QACA,MACA,YACA,UACA,QACA,U,kiCCtOJ,IAAMzG,GAAmBwB,GAAc,CAErC,OACA,0BACA,OACA,QACA,WACA,SACA,4BACA,cAGA,cACA,SAEA,SACA,MACA,mBACA,2BAEA,cAEA,mBAEA,aACA,4BACA,aACA,SAEA,2BACA,kCACA,yBAEA,cACA,eACA,gBACA,kBACA,iBACA,gBACA,eACA,oDAGA,kBACA,iBACA,iBACA,cACA,aACA,mBACA,kBACA,iBACA,iBACA,mBACA,gBACA,wBACA,aACA,qBACA,wBACA,OACA,QACA,UACA,SACA,UACA,eACA,yBACA,kBACA,kBACA,gCACA,eACA,wBACA,cACA,oBACA,mBACA,cACA,kBACA,kBACA,iBACA,oBACA,iBACA,yBACA,cACA,kBACA,iBACA,iCACA,oBACA,gBACA,mBACA,kBACA,iBACA,kBACA,qBACA,iBACA,OACA,sBACA,WACA,UACA,oBACA,UACA,QACA,eACA,kBACA,QACA,eACA,UACA,QACA,aACA,OACA,UACA,UACA,UACA,oBACA,SACA,SACA,WACA,YACA,cACA,iBACA,0BACA,wCACA,0CACA,yBACA,qCACA,qBACA,2BACA,gCACA,8BACA,sDACA,gCACA,2BACA,yBACA,wBACA,iCACA,6CACA,0BACA,8BACA,oBACA,oBACA,qCACA,mCACA,0BACA,WACA,aACA,wBACA,SACA,cACA,WAEA,QACA,KACA,uBAGIvB,GAAwBuB,GAAc,CAAC,cAAe,eAAgB,oBAEtErB,GAAgBqB,GAAc,CAClC,OACA,qCACA,yBAGIpB,GAAkB,CAAC,YAAa,aAGjBsG,GAAAA,SAAAA,I,8xBAGnB,WACE,OAAO,IAAI3H,GAAU,CACnBiB,iBAAAA,GACAC,sBAAAA,GACAE,cAAAA,GACAD,yBAA0B,CAAC,OAAQ,OAAQ,UAC3CE,gBAAAA,GACAnE,iBAAkBuG,GAClBhC,sBAAuBqC,GACvBjC,YAAa,CAAC,CAAE3D,MAAO,KAAMF,SAAU,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,QACzE+C,WAAY,CAAC,MACbvG,WAAY,CAAE2H,YAAY,EAAMH,MAAO,CAAC,MACxCI,WAAY,CAAE7D,MAAO,MAAOxB,KAAM,OAClC+E,UAAW6F,EAAa7F,WAE3B,M,uEAlBkB6F,CAAqBzN,GACjCyN,GAAAA,UAAY,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MCxKnD,IAAM7D,GAAY9R,EAAgB,CAEvC+S,KAAM,CACJ,MACA,OACA,OACA,OACA,MACA,SACA,OACA,OACA,UACA,OACA,MACA,UAEA,MACA,YACA,QACA,WACA,MACA,QACA,KACA,MACA,QACA,OACA,WACA,KACA,OACA,WACA,MACA,QACA,UACA,OACA,QACA,YACA,aACA,qBACA,OACA,MACA,OACA,MACA,QACA,gBAEFZ,MAAO,CAAC,iBAAkB,WAAY,aAAc,OAAQ,cAC5DE,WAAY,CAAC,SAAU,QACvBC,KAAM,CACJ,aACA,OACA,WACA,cACA,WACA,WACA,MACA,UACA,aACA,YACA,UACA,gBACA,qBACA,OACA,WACA,SACA,QACA,iBACA,WACA,UACA,SACA,YACA,UACA,mBACA,QACA,iBACA,aACA,QAEFkB,YAAa,CAAC,cAAe,WAAY,KAAM,YAAa,SAAU,SAAU,OAChF1J,OAAQ,CACN,QACA,SACA,mBACA,MACA,SACA,YACA,iBACA,SACA,MACA,SACA,QACA,cACA,gBACA,kBACA,UACA,UACA,QACA,QACA,SACA,cACA,SACA,QACA,OACA,QACA,SACA,eACA,YACA,SACA,QACA,iBACA,iBACA,SACA,UACA,OACA,QACA,YACA,UACA,QACA,QACA,aACA,SACA,YACA,YACA,OACA,QACA,WACA,SAEF8L,QAAS,CACP,OACA,eACA,YACA,cACA,oBACA,oBAEFhE,KAAM,CACJ,cACA,cACA,QACA,mBACA,eACA,OACA,cACA,iBACA,MACA,UACA,MACA,OACA,OACA,gBACA,WAEFK,UAAW,CACT,MACA,eACA,cACA,OACA,QACA,YACA,aACA,oBACA,MACA,MACA,QACA,aACA,oBACA,YACA,YACA,aACA,iBACA,UACA,aACA,WACA,WACA,WACA,aACA,cACA,MACA,UACA,WACA,YAEFqD,MAAO,CAAC,UAAW,SAAU,aAAc,kBAAmB,aAAc,SAE5EO,OAAQ,CACN,OACA,MACA,cACA,aACA,OACA,aACA,aACA,YACA,eACA,SAMFpB,UAAW,CAAC,UAAW,UAAW,UAAW,UCxMlChD,GAAWzR,EAAgB,CAGtC8V,YAAa,CACX,MACA,QACA,QACA,UACA,UACA,MACA,SACA,SACA,UACA,UACA,SACA,UACA,YACA,gBACA,aACA,UACA,UACA,UACA,cACA,UACA,cACA,WACA,OACA,YACA,WACA,MACA,eACA,WACA,UACA,YACA,aACA,OACA,cACA,YACA,UACA,aACA,YACA,SACA,UACA,YACA,UACA,SACA,SACA,OACA,aACA,QACA,SACA,YACA,YACA,eACA,OACA,gBACA,SACA,QACA,UACA,SACA,cACA,cACA,QACA,MACA,OACA,WACA,QACA,QACA,OACA,WACA,OACA,QACA,UACA,OACA,UACA,eACA,WACA,QACA,SACA,QACA,OACA,SACA,UACA,UACA,SACA,eACA,eACA,YACA,QACA,cACA,aACA,OACA,SACA,aACA,aACA,QACA,OACA,WACA,UACA,eACA,eACA,SACA,SACA,SACA,UACA,cACA,WACA,UACA,OACA,QACA,SACA,UACA,SACA,OACA,QACA,kBACA,SACA,OACA,SACA,OACA,gBACA,SACA,OACA,SACA,MACA,aACA,SACA,cACA,SACA,SACA,SACA,gBACA,YACA,aACA,UACA,QACA,eACA,YACA,OACA,YACA,SACA,QACA,WACA,MACA,MACA,MACA,eACA,aACA,OACA,QACA,OACA,aACA,YACA,QACA,SACA,WACA,cACA,OACA,QACA,QACA,MACA,OACA,SACA,aACA,QACA,OACA,WACA,SACA,MACA,aACA,WACA,UACA,UACA,gBACA,OACA,QACA,SACA,QACA,OACA,QACA,UACA,UACA,cACA,QAEFC,SAAU,CACR,MACA,QACA,MACA,QACA,KACA,gBACA,UACA,SACA,SACA,UACA,OACA,KACA,OACA,OACA,OACA,SACA,OACA,SACA,QACA,OACA,UACA,eACA,oBACA,SACA,WACA,OACA,UACA,SACA,WACA,WACA,SACA,OACA,OACA,MACA,WACA,SACA,WACA,WACA,QACA,QACA,QACA,YACA,MACA,OACA,OACA,WACA,QACA,QACA,WACA,SACA,KACA,SACA,KACA,QACA,SACA,MACA,YACA,WACA,OACA,KACA,OACA,UACA,OACA,OACA,OACA,QACA,QACA,MACA,OACA,OACA,MACA,OACA,KACA,KACA,KACA,QACA,MACA,QACA,OACA,cACA,YACA,UACA,YACA,WACA,YACA,QACA,QACA,SACA,SACA,QACA,SACA,MACA,OACA,SACA,MACA,WACA,QACA,cACA,OACA,YACA,KACA,YACA,UACA,OACA,WACA,YACA,QACA,aACA,SACA,OACA,QACA,eACA,SACA,UACA,OACA,QACA,SACA,OACA,SACA,OACA,SACA,QACA,WACA,QACA,QACA,aACA,UACA,UACA,aACA,YACA,UACA,QACA,UACA,YACA,QACA,OACA,UACA,QAEFC,UAAW,CACT,WACA,eACA,MACA,MACA,MACA,UACA,OACA,SACA,WACA,cACA,kB,kiCC5UJ,IAAM/G,GAAmBwB,GAAc,CAErC,OACA,0BACA,OACA,QACA,WACA,SACA,SACA,eACA,WACA,UACA,aACA,gBACA,QAKA,sBACA,SAEA,SACA,MAEA,cAEA,mBAEA,aACA,4BACA,aACA,kBAGA,qCAGA,2BACA,yBAEA,6CACA,sDACA,yBAEA,cACA,YAGA,QACA,SACA,MACA,WACA,OACA,QACA,aACA,OAEA,YACA,YACA,eAGIvB,GAAwBuB,GAAc,CAAC,2BAEvCrB,GAAgBqB,GAAc,CAClC,OACA,qCACA,uBAEA,mBAImBwF,GAAAA,SAAAA,I,8xBAGnB,WACE,OAAO,IAAIjI,GAAU,CACnBiB,iBAAAA,GACAC,sBAAAA,GACAE,cAAAA,GACAD,yBAA0B,CAAC,OAAQ,QACnCjE,iBAAkBuG,GAClBhC,sBAAuBqC,GACvBnD,WAAY,CAAC,IAAK,KAClBE,YAAa,CAAC,IAAK,KACnBgB,YAAa,CAAC,KAAM,MACpBd,WAAY,CAAC,MACbW,cAAe,CAAC,CAAExD,MAAO,KAAMF,SAAU,CAAC,KAAMC,eAAe,IAC/D6D,UAAWmG,EAAcnG,WAE5B,M,uEAlBkBmG,CAAsB/N,GAClC+N,GAAAA,UAAY,CAAC,MAAO,KAAM,MC/E5B,IAAMxE,GAAWzR,EAAgB,CAEtCkW,IAAK,CACH,aACA,UACA,SACA,MACA,QACA,QACA,UACA,YACA,MACA,YACA,QACA,SACA,UACA,MACA,MACA,KACA,MACA,QACA,aACA,KACA,SACA,UACA,iBACA,kBACA,OACA,MACA,iBACA,SACA,SACA,QACA,UACA,SACA,SACA,SACA,MACA,OACA,QACA,OACA,OACA,UACA,OACA,QACA,KACA,OACA,QACA,OACA,UACA,WACA,OACA,eACA,QACA,SACA,UACA,OACA,YACA,UACA,QACA,aACA,WACA,SACA,eACA,SACA,OACA,QACA,WACA,OACA,UACA,YACA,SACA,cACA,UACA,aACA,eACA,gBACA,gBACA,aACA,UACA,SACA,YACA,UACA,aACA,aACA,aACA,YACA,aACA,aACA,aACA,qBACA,kBACA,oBACA,WACA,UACA,WACA,eACA,UACA,MACA,SACA,QACA,OACA,UACA,eACA,cACA,eACA,eACA,oBACA,eACA,SACA,cACA,QACA,OACA,WACA,YACA,WACA,OACA,WACA,MACA,WACA,kBACA,aACA,aACA,aACA,MACA,UACA,UACA,UACA,UACA,UACA,kBACA,SACA,mBACA,OACA,WACA,eACA,gBACA,cACA,YACA,UACA,UACA,OACA,WACA,cACA,MACA,KACA,SACA,gBACA,OACA,OACA,WACA,YACA,UACA,OACA,OACA,SACA,QACA,QACA,SACA,WACA,MACA,OACA,SACA,UACA,OACA,QACA,SACA,SACA,UACA,QACA,SACA,QACA,WACA,SACA,WACA,UACA,UACA,YACA,SACA,OACA,YACA,SACA,SACA,UACA,WACA,cACA,QACA,OACA,SACA,YACA,QACA,SACA,OACA,QACA,QACA,QACA,SACA,SACA,QACA,YACA,UACA,MACA,QACA,UACA,SACA,QACA,OACA,OACA,WACA,WACA,UACA,YACA,aACA,MACA,SACA,OACA,QACA,SACA,QACA,UACA,OACA,OACA,SACA,OACA,gBACA,UACA,OACA,QACA,OACA,mBACA,cACA,cAEA,aACA,KACA,SACA,UACA,oBACA,oBACA,YACA,SACA,YACA,KACA,YACA,QACA,UACA,SACA,eACA,QACA,QACA,cACA,SACA,gBACA,UACA,MACA,OACA,OACA,OACA,OACA,OACA,UACA,WACA,YACA,OACA,KACA,YACA,MACA,KACA,YACA,SACA,SACA,UACA,UACA,OACA,OACA,aACA,MACA,OACA,iBACA,OACA,WACA,OACA,aACA,UACA,UACA,QACA,SACA,OACA,OACA,QACA,OACA,QACA,SACA,QACA,OACA,OACA,QACA,YACA,iBACA,OACA,SACA,QACA,UACA,OACA,OACA,WACA,WACA,OACA,eACA,SACA,uBACA,eACA,kBACA,cACA,kBACA,iBACA,kBACA,cACA,mBACA,aACA,gBACA,oBACA,kBACA,oBACA,iBACA,qBACA,iBACA,gCACA,cACA,kBACA,0BACA,QACA,2BACA,uBACA,WACA,WACA,qBACA,uBACA,uBACA,WACA,SACA,aACA,YACA,aACA,SACA,QACA,eACA,cACA,YACA,UACA,QACA,SACA,qBACA,gBACA,WACA,WACA,MACA,OACA,WACA,SACA,UACA,QACA,QACA,QACA,cACA,OACA,QACA,WACA,UACA,QACA,SACA,QACA,MACA,OACA,UACA,KACA,aACA,aACA,UACA,UACA,UACA,SACA,YACA,OACA,MACA,WACA,qBACA,OACA,SACA,UACA,WACA,KACA,SACA,eACA,KACA,MACA,SACA,OACA,OACA,WACA,UACA,SACA,aACA,KACA,QACA,aACA,SACA,MACA,QACA,UACA,OACA,WACA,QACA,UACA,YACA,OACA,gBACA,SACA,kBACA,OACA,SACA,UACA,YACA,eACA,aACA,WACA,aACA,QACA,SACA,UACA,OACA,UACA,WACA,YACA,YACA,UACA,WACA,OACA,WACA,UACA,aACA,YACA,UACA,cACA,UACA,WACA,QACA,QACA,UACA,QACA,QACA,QACA,QACA,MACA,OACA,YACA,aACA,QACA,OACA,UACA,UACA,YACA,mBACA,WACA,YACA,aACA,SACA,QACA,WACA,iBACA,gBACA,eACA,UACA,SACA,SACA,SACA,aACA,SACA,aACA,UACA,SACA,UACA,WACA,cACA,cACA,SACA,UACA,QACA,WACA,UACA,UACA,WACA,SACA,oBACA,SACA,YACA,UACA,QACA,UACA,SACA,QACA,QACA,OACA,WACA,SACA,UACA,MACA,WACA,SACA,OACA,UACA,YACA,aACA,QACA,YACA,WACA,SACA,cACA,UACA,SACA,qBACA,WACA,SACA,YACA,YACA,WACA,SACA,eACA,UACA,SACA,MACA,SACA,QACA,OACA,WACA,SACA,SACA,SACA,OACA,QACA,SACA,YACA,OACA,WACA,WACA,SACA,OACA,OACA,SACA,SACA,SACA,QACA,SACA,UACA,WACA,gBACA,MACA,eACA,WACA,aACA,iBACA,oBACA,YACA,sBACA,eACA,mBACA,aACA,iBACA,iBACA,eACA,cACA,eACA,gBACA,kBACA,eACA,MACA,QACA,WACA,SACA,YACA,oBACA,mBACA,qBACA,SACA,OACA,UACA,gBACA,SACA,kBACA,UACA,eACA,gBACA,QACA,UACA,QACA,WACA,UACA,SACA,cACA,QACA,aACA,SACA,aACA,iBACA,YACA,YACA,aACA,OACA,OACA,OACA,OACA,OACA,YACA,eACA,gBACA,WACA,UACA,WACA,KACA,WACA,cACA,gBACA,UACA,UACA,WACA,OACA,WACA,OACA,QACA,YACA,cACA,YACA,mBACA,WACA,OACA,UACA,QACA,SACA,UACA,SACA,YACA,WACA,QACA,SACA,UACA,QACA,MACA,OACA,iBACA,UACA,QACA,WACA,WACA,gBACA,QACA,SACA,YACA,UACA,eACA,WACA,YACA,UACA,MACA,OACA,UACA,UACA,aACA,OACA,WACA,OACA,gBACA,OACA,QACA,QACA,SACA,OACA,SACA,UACA,OACA,UACA,QACA,OACA,MACA,KACA,MACA,OACA,aACA,cC/qBSpE,GAAY9R,EAAgB,CAEvCkW,IAAK,CACH,UACA,aACA,UACA,SACA,UACA,OACA,QACA,YACA,UACA,UACA,WACA,WACA,cACA,SACA,aACA,UACA,cACA,eACA,gBACA,iBACA,MACA,OACA,MACA,SACA,MACA,MACA,MACA,YACA,QACA,WACA,eACA,kBACA,kBACA,OACA,aACA,eACA,MACA,SACA,aACA,cACA,UACA,SACA,YACA,MACA,cACA,OACA,cACA,WACA,UACA,WACA,MACA,OACA,UACA,cACA,cACA,OACA,OACA,QACA,YACA,MACA,kBACA,YACA,aACA,OACA,UACA,mBACA,cACA,MACA,eACA,eACA,gBACA,cACA,cACA,WACA,SACA,yBACA,YACA,gBACA,OACA,aACA,MACA,MACA,QACA,WACA,UACA,aACA,YACA,YACA,UACA,mBACA,gBACA,cACA,cACA,MACA,SACA,UACA,MACA,aACA,eACA,QACA,cACA,QACA,SACA,aACA,cACA,YACA,gBACA,WACA,WACA,MACA,SACA,QACA,SACA,eACA,eACA,aACA,oBACA,oBACA,eACA,gBACA,qBACA,aACA,gBACA,cACA,eACA,cACA,YACA,cACA,aACA,aACA,mBACA,sBACA,aACA,aACA,cACA,cACA,eACA,WACA,cACA,YACA,eACA,aACA,aACA,WACA,iBACA,QACA,QACA,SACA,UACA,KACA,YACA,SACA,MACA,QACA,OACA,QACA,OACA,cACA,QACA,eACA,WACA,WACA,WACA,mBACA,kBACA,MACA,YACA,aACA,MACA,OACA,MACA,eACA,MACA,aACA,cACA,KACA,MACA,QACA,QACA,eACA,iBACA,gBACA,UACA,OACA,oBACA,eACA,iBACA,UACA,QACA,OACA,cACA,QACA,eACA,cACA,MACA,OACA,OACA,OACA,MACA,QACA,UACA,QACA,OACA,SACA,cACA,gBACA,kBACA,UACA,WACA,MACA,WACA,cACA,cACA,YACA,UACA,UACA,aACA,QACA,aACA,sBACA,QACA,iBACA,YACA,QACA,OACA,aACA,UACA,UACA,aACA,0BACA,uBACA,4BACA,WAEA,WACA,SAGA,UACA,WACA,YACA,MACA,UACA,SACA,UACA,MACA,UACA,QAEA,QACA,SACA,mBACA,OACA,MACA,SACA,OACA,OACA,gBACA,YACA,OACA,YACA,UACA,mBAEA,OACA,WACA,YACA,U,kiCCzQJ,IAAMjH,GAAmBwB,GAAc,CAErC,mBACA,wCACA,OACA,QACA,WACA,SACA,WACA,QACA,SACA,uBAGA,kEACA,0CACA,SAEA,iCACA,MAEA,8CAEA,mBAEA,yFACA,wDACA,qCAEA,4CACA,+BACA,yCACA,4BACA,cACA,gBACA,iBACA,uBACA,4BAGA,iBACA,yBACA,cACA,iBACA,kBACA,eACA,uBACA,iBACA,eACA,aACA,aACA,UACA,gBACA,cACA,eACA,gBACA,QACA,SACA,cACA,OACA,mBACA,cACA,aACA,iBACA,SACA,4BACA,kBACA,eACA,kBACA,eACA,mBACA,cACA,kBACA,gBACA,uBACA,iBACA,sBACA,cACA,qBACA,WACA,KACA,gBACA,aACA,gBACA,aACA,eACA,iBACA,YACA,gBACA,cACA,eACA,YACA,YACA,UACA,UACA,QACA,kBACA,4BACA,QACA,UACA,OACA,iBACA,iBACA,OACA,mBACA,wBACA,kBACA,aACA,iBACA,UACA,oBACA,oBACA,oBACA,eACA,cACA,eACA,cACA,eACA,oBACA,gBACA,cACA,WACA,YACA,SACA,WACA,YACA,SACA,oBACA,mBACA,yBACA,YACA,eACA,WACA,gBACA,kBACA,OACA,2BACA,yBACA,eACA,mBACA,qBACA,qBACA,qBACA,yBACA,iBACA,eACA,oBACA,uBACA,oBACA,uBACA,sBACA,2BACA,wBACA,uBACA,oBACA,sBACA,mBACA,mBACA,iBACA,cACA,4BACA,eACA,cACA,cACA,eACA,qBACA,uBACA,cACA,aACA,eACA,wBACA,YACA,eACA,mBACA,qBACA,mBACA,yBACA,2BACA,sBACA,eACA,sBACA,kBACA,sBACA,wBACA,mBACA,eACA,gBACA,2BACA,uBACA,eACA,qBACA,sBACA,eACA,aACA,mBACA,oBACA,cACA,uBACA,oBACA,cACA,gBACA,uBACA,iBACA,gBACA,wBACA,oBACA,WACA,SACA,qBACA,mBACA,gBACA,cACA,oBACA,oBACA,kBACA,eACA,aACA,mBACA,mBACA,eACA,MACA,WACA,YACA,SACA,aACA,aACA,cACA,aAGIvB,GAAwBuB,GAAc,CAC1C,yBACA,0BACA,6BACA,2BAGIrB,GAAgBqB,GAAc,CAClC,OACA,8BACA,uBACA,eACA,sCAEA,kBAGIpB,GAAkB,CAAC,YAAa,YAAa,iBAG9B8G,GAAAA,SAAAA,I,8xBAGnB,WACE,OAAO,IAAInI,GAAU,CACnBiB,iBAAAA,GACAC,sBAAAA,GACAE,cAAAA,GACAD,yBAA0B,CAAC,OAAQ,OAAQ,SAAU,SACrDE,gBAAAA,GACAE,yBAA0B,CAAC,MAAO,KAAM,OACxCrE,iBAAkBuG,GAClBhC,sBAAuBqC,GAEvBjC,YAAa,CACX,CAAE3D,MAAO,KAAMF,SAAU,CAAC,IAAK,MAC/B,CAAEE,MAAO,KAAMF,SAAU,CAAC,IAAK,OAEjC+C,WAAY,CAAC,MACb5D,WAAY,CAAEoB,MAAO,IAAKxB,KAAM,IAAKyB,sBAAsB,GAC3DkD,cAAe,CACb,CAAE9B,MAAO,oBACT,CAAE1B,MAAO,KAAMF,SAAU,CAAC,KAAMC,eAAe,GAC/C,CAAEC,MAAO,KAAMF,SAAU,CAAC,KAAMC,eAAe,GAC/C,CAAEC,MAAO,KAAMF,SAAU,CAAC,KAAMC,eAAe,IAEjDzD,WAAY,CAAE2H,YAAY,GAC1B3B,iBAAkB,CAAC,KAAM,KACzBsB,UAAWqG,EAAiBrG,UAC5BzB,YAAAA,IAEH,M,uEA/BkB8H,CAAyBjO,GAkC9C,SAASmG,GAAYpS,GACnB,OAAOA,EAAOmF,KAAI,SAAClH,EAAOyG,GACxB,IAAMyV,EAAYna,EAAO0E,EAAI,IAAMlH,EACnC,OAAIU,EAAQmB,IAAIpB,IAA6B,MAAnBkc,EAAU7c,KAE3B,OAAP,wBAAYW,GAAK,CAAER,KAAMR,EAAU2B,yBAE9BX,CACR,GACF,CA1CQic,GAAAA,UAAY,CAAC,KAAM,KAAM,KAAM,MAAO,KAAM,MChQ9C,IAAM1E,GAAWzR,EAAgB,CAEtCkW,IAAK,CACH,aACA,UACA,SACA,SACA,MACA,QACA,QACA,UACA,YACA,YACA,MACA,QACA,SACA,UACA,MACA,MACA,QACA,KACA,MACA,QACA,aACA,KACA,YACA,iBACA,kBACA,iBACA,MACA,iBACA,SACA,SACA,QACA,UACA,SACA,SACA,SACA,MACA,OACA,QACA,OACA,UACA,OACA,QACA,UACA,KACA,OACA,QACA,OACA,UACA,WACA,OACA,eACA,QACA,qBACA,SACA,UACA,UACA,OACA,YACA,UACA,QACA,WACA,SACA,eACA,SACA,QACA,QACA,WACA,OACA,UACA,YACA,SACA,UACA,gBACA,cACA,UACA,SACA,YACA,UACA,aACA,YACA,aACA,cACA,aACA,YACA,aACA,aACA,aACA,qBACA,kBACA,oBACA,WACA,UACA,WACA,UACA,MACA,SACA,QACA,OACA,YACA,UACA,eACA,eACA,oBACA,eACA,SACA,cACA,OACA,WACA,YACA,WACA,OACA,WACA,MACA,WACA,kBACA,aACA,aACA,aACA,MACA,UACA,UACA,UACA,eACA,UACA,aACA,UACA,kBACA,SACA,aACA,OACA,WACA,cACA,gBACA,cACA,YACA,UACA,UACA,OACA,WACA,cACA,MACA,KACA,SACA,OACA,OACA,WACA,YACA,UACA,OACA,OACA,SACA,QACA,SACA,WACA,aACA,MACA,OACA,WACA,SACA,UACA,mBACA,OACA,QACA,SACA,SACA,UACA,QACA,SACA,QACA,SACA,WACA,UACA,UACA,SACA,OACA,YACA,SACA,UACA,SACA,WACA,cACA,SACA,wBACA,QACA,OACA,SACA,QACA,SACA,OACA,kBACA,SACA,SACA,QACA,cACA,QACA,QACA,SACA,SACA,QACA,YACA,UACA,MACA,QACA,UACA,SACA,QACA,OACA,OACA,WACA,WACA,UACA,YACA,iBACA,WACA,qBACA,MACA,aACA,wBACA,wBACA,SACA,QACA,SACA,QACA,WACA,SACA,oBACA,YACA,UACA,OACA,SACA,OACA,gBACA,YACA,UACA,OACA,QACA,OACA,mBACA,cACA,cACA,aACA,KACA,SACA,oBACA,SACA,KACA,WACA,QACA,UACA,SACA,UACA,eACA,WACA,QACA,QACA,cACA,SACA,gBACA,UACA,WACA,KACA,MACA,OACA,OACA,OACA,OACA,OACA,UACA,YACA,WACA,OACA,YACA,UACA,KACA,iBACA,kBACA,YACA,MACA,KACA,YACA,SACA,UACA,OACA,OACA,aACA,aACA,MACA,UACA,OACA,iBACA,OACA,MACA,WACA,OACA,aACA,UACA,OACA,UACA,QACA,SACA,OACA,OACA,QACA,OACA,QACA,SACA,QACA,aACA,OACA,OACA,QACA,YACA,iBACA,OACA,SACA,QACA,UACA,OACA,OACA,WACA,WACA,OACA,eACA,SACA,uBACA,cACA,gCACA,uBACA,eACA,0BACA,cACA,kBACA,iBACA,kBACA,cACA,yBACA,qBACA,aACA,gBACA,oBACA,kBACA,oBACA,iBACA,qBACA,iBACA,gCACA,0BACA,qBACA,cACA,gCACA,QACA,WACA,2BACA,uBACA,WACA,WACA,uBACA,uBACA,SACA,aACA,YACA,aACA,SACA,SACA,QACA,eACA,cACA,YACA,UACA,SACA,qBACA,gBACA,WACA,MACA,OACA,WACA,SACA,QACA,kBACA,aACA,eACA,QACA,cACA,OACA,QACA,WACA,UACA,QACA,MACA,aACA,SACA,oBACA,QACA,MACA,OACA,KACA,YACA,OACA,MACA,SACA,UACA,qBACA,YACA,QACA,OACA,QACA,SACA,UACA,WACA,KACA,MACA,SACA,KACA,MACA,KACA,MACA,OACA,OACA,WACA,kBACA,SACA,WACA,aACA,UACA,KACA,QACA,aACA,eACA,SACA,MACA,QACA,UACA,OACA,QACA,YACA,OACA,SACA,UACA,YACA,eACA,aACA,WACA,qBACA,OACA,eACA,UACA,eACA,QACA,SACA,UACA,aACA,QACA,UACA,OACA,WACA,YACA,YACA,UACA,WACA,OACA,UACA,aACA,wBACA,YACA,UACA,cACA,UACA,WACA,QACA,QACA,UACA,QACA,QACA,SACA,QACA,OACA,OACA,QACA,YACA,aACA,OACA,UACA,UACA,YACA,mBACA,YACA,YACA,aACA,SACA,eACA,QACA,WACA,iBACA,gBACA,eACA,UACA,SACA,SACA,SACA,aACA,SACA,SACA,aACA,UACA,UACA,WACA,kBACA,qBACA,sBACA,yBACA,uBACA,0BACA,8BACA,cACA,UACA,qBACA,QACA,WACA,WACA,UACA,UACA,UACA,WACA,SACA,SACA,SACA,oBACA,YACA,UACA,QACA,UACA,SACA,QACA,QACA,OACA,WACA,SACA,SACA,UACA,MACA,OACA,YACA,aACA,aACA,QACA,YACA,WACA,SACA,UACA,cACA,SACA,YACA,mBACA,6BACA,iBACA,mBACA,qBACA,WACA,SACA,YACA,YACA,SACA,eACA,SACA,UACA,MACA,QACA,OACA,WACA,SACA,SACA,SACA,OACA,QACA,OACA,WACA,WACA,SACA,OACA,SACA,SACA,SACA,uBACA,cACA,gCACA,uBACA,eACA,0BACA,cACA,kBACA,iBACA,kBACA,cACA,yBACA,qBACA,aACA,gBACA,oBACA,kBACA,oBACA,iBACA,qBACA,iBACA,gCACA,0BACA,qBACA,cACA,gCACA,UACA,WACA,MACA,eACA,WACA,aACA,kBACA,qBACA,mBACA,iBACA,oBACA,sBACA,eACA,mBACA,aACA,cACA,eACA,iBACA,gBACA,kBACA,iBACA,eACA,eACA,OACA,MACA,UACA,QACA,WACA,SACA,oBACA,mBACA,qBACA,SACA,OACA,UACA,SACA,gBACA,SACA,SACA,kBACA,UACA,eACA,gBACA,QACA,UACA,QACA,WACA,SACA,QACA,SACA,aACA,iBACA,aACA,YACA,YACA,aACA,OACA,OACA,OACA,kBACA,OACA,OACA,YACA,eACA,gBACA,WACA,UACA,WACA,MACA,KACA,WACA,cACA,UACA,WACA,OACA,WACA,OACA,QACA,YACA,cACA,YACA,OACA,WACA,mBACA,UACA,YACA,QACA,SACA,UACA,SACA,aACA,WACA,QACA,SACA,UACA,QACA,MACA,OACA,iBACA,UACA,QACA,WACA,WACA,gBACA,aACA,QACA,SACA,YACA,UACA,eACA,YACA,UACA,OACA,OACA,UACA,UACA,OACA,WACA,OACA,gBACA,OACA,QACA,QACA,SACA,OACA,UACA,OACA,UACA,QACA,OACA,KACA,MACA,MACA,MACA,OACA,aACA,WACA,UC5uBSpE,GAAY9R,EAAgB,CAEvCkW,IAAK,CACH,MACA,OACA,UACA,UACA,cACA,cAEA,YACA,QACA,OACA,OACA,QACA,MACA,YACA,MACA,cACA,SACA,UACA,YACA,aACA,SACA,UACA,oBACA,sBACA,mBACA,kBACA,kBACA,OACA,OACA,UACA,OACA,cACA,mBACA,UACA,WACA,eACA,YACA,WACA,SACA,YACA,gBACA,OACA,UACA,aACA,MACA,MACA,QACA,QACA,YACA,UACA,eACA,eACA,eACA,oBACA,eACA,UACA,WACA,OACA,WACA,cACA,WACA,WACA,MACA,UACA,aACA,YACA,YACA,UACA,UACA,aACA,MACA,MACA,MACA,aACA,UACA,eACA,QACA,cACA,cACA,QACA,SACA,eACA,mBACA,aACA,cACA,YACA,gBACA,iBACA,qBACA,2BACA,wBACA,+BACA,aACA,WACA,WACA,eACA,WACA,cACA,gBACA,MACA,OACA,cACA,KACA,SAEA,YACA,YACA,aACA,aACA,SACA,QACA,0BACA,0BACA,sBACA,oBACA,qBACA,uBACA,0BACA,gCACA,iCACA,wBACA,wBACA,qCACA,oCACA,wBACA,2BACA,6BACA,yBACA,2BACA,sBACA,uBACA,WACA,KACA,eACA,UACA,iBACA,iBACA,UACA,SACA,cACA,UACA,eACA,UACA,SACA,aACA,oBACA,oBACA,gBACA,gBACA,qBACA,aACA,eACA,cACA,YACA,cACA,aACA,mBACA,sBACA,cACA,iBACA,gBACA,cACA,aACA,cACA,eACA,oBACA,gCACA,cACA,WACA,oBACA,oBACA,aACA,YACA,eACA,aACA,aACA,MACA,WACA,iBACA,aACA,QACA,OACA,QACA,OACA,SACA,OACA,aACA,KACA,YACA,YACA,iBACA,SACA,MACA,QACA,OACA,QACA,OACA,QACA,WACA,WACA,WACA,kBACA,QACA,MACA,cACA,eACA,YACA,cACA,YACA,gBACA,cACA,aACA,YACA,MACA,YACA,cACA,MACA,MACA,SACA,MACA,QACA,YACA,kBACA,aACA,eACA,aACA,MACA,SACA,WACA,aACA,MACA,YACA,QACA,SACA,MACA,eAEA,MACA,eACA,aACA,cACA,KACA,QACA,UACA,WACA,MACA,QACA,uBACA,eACA,UACA,QACA,UACA,OACA,eACA,OACA,SACA,eACA,cACA,iBACA,gBACA,oBACA,eACA,SACA,UACA,UACA,QACA,QACA,gBACA,QACA,YACA,aACA,OACA,QACA,SACA,cACA,SACA,eACA,OACA,OACA,OACA,MACA,QACA,UACA,cACA,kBACA,QACA,OACA,UACA,cACA,eACA,YACA,YACA,qBACA,cACA,aACA,cACA,gBACA,aACA,gBACA,eACA,cACA,cACA,qBACA,cACA,cACA,YACA,kBACA,qBACA,aACA,sBACA,qBACA,eACA,kBACA,qBACA,kBACA,iBACA,uBACA,mBACA,kBACA,gBACA,cACA,aACA,cACA,aACA,oBACA,cACA,YACA,kBACA,iBACA,0BACA,2BACA,qBACA,eACA,kBACA,mBACA,kBACA,oBACA,mBACA,mBACA,kBACA,mBACA,qBACA,eACA,cACA,qBACA,sBACA,mBACA,kBACA,YACA,kBACA,iBACA,cACA,UACA,gBACA,YACA,mBACA,aACA,eACA,WACA,cACA,YACA,OACA,OACA,mBACA,wBACA,MACA,SACA,aACA,cACA,cACA,SACA,UACA,SACA,YACA,kBACA,UACA,MACA,UACA,cACA,MACA,OACA,cACA,cACA,WACA,YACA,eACA,gBACA,YACA,UACA,aACA,OACA,WACA,QACA,aACA,sBACA,QACA,iBACA,YACA,QACA,OACA,WACA,WACA,gBACA,OACA,aACA,cACA,6BACA,SACA,UACA,WACA,WACA,UACA,6BACA,oCACA,OACA,UACA,aACA,gBAEA,OACA,WAGA,MACA,UACA,WACA,YACA,MACA,UACA,SACA,UACA,MACA,UACA,QACA,QACA,SACA,mBACA,OACA,WACA,YACA,OACA,OACA,OACA,gBACA,UACA,mBACA,SACA,YACA,OACA,OACA,U,kiCChcJ,IAAMjH,GAAmBwB,GAAc,CAErC,mBACA,wCACA,OACA,QACA,WACA,SACA,SACA,eACA,WACA,QACA,SAGA,kEACA,0CACA,SAEA,iCACA,MAEA,8CAEA,mBAEA,yFACA,2CACA,qCAEA,cACA,eACA,6BACA,gBACA,mBACA,gBACA,iBACA,uBAGA,iBACA,cACA,iBACA,iBACA,sBACA,kBACA,uBACA,eACA,mBACA,aACA,aACA,gBACA,SACA,cACA,OACA,mBACA,4BACA,+BACA,cACA,iBACA,QACA,SACA,kBACA,eACA,kBACA,kBACA,eACA,uBACA,mBACA,wBACA,cACA,gBACA,kCACA,oBACA,iBACA,cACA,qBACA,WACA,KACA,gBACA,aACA,gBACA,gBACA,aACA,qBACA,iBACA,sBACA,YACA,cACA,gCACA,kBACA,eACA,YACA,YACA,UACA,UACA,QACA,QACA,UACA,OACA,eACA,oBACA,iBACA,OACA,YACA,wBACA,WACA,2BACA,cACA,kBACA,iBACA,UACA,oBACA,oBACA,eACA,cACA,eACA,QACA,eACA,gBACA,gBACA,cACA,UACA,SACA,WACA,wBACA,YACA,oBACA,mBACA,YACA,eACA,qBACA,WACA,kBACA,OACA,mBACA,qBACA,qBACA,iBACA,eACA,uBACA,oBACA,uBACA,wBACA,oBACA,sBACA,mBACA,mBACA,iBACA,cACA,eACA,cACA,cACA,qBACA,uBACA,cACA,aACA,qBACA,mBACA,eACA,kBACA,sBACA,wBACA,mBACA,eACA,gBACA,uBACA,sBACA,gBACA,aACA,mBACA,cACA,oBACA,cACA,gBACA,iBACA,gBACA,WACA,kBACA,0BACA,gBACA,cACA,oBACA,yBACA,eACA,aACA,QACA,sBACA,mBACA,kBACA,gBACA,MACA,KAGA,UACA,QACA,OACA,SACA,SACA,UAGIvB,GAAwBuB,GAAc,CAAC,2BAEvCrB,GAAgBqB,GAAc,CAClC,OACA,8BACA,uBACA,uBACA,sCAEA,kBAGIpB,GAAkB,CAAC,YAAa,YAAa,iBAG9BgH,GAAAA,SAAAA,I,8xBAGnB,WACE,OAAO,IAAIrI,GAAU,CACnBiB,iBAAAA,GACAC,sBAAAA,GACAE,cAAAA,GACAD,yBAA0B,CAAC,OAAQ,OAAQ,UAC3CE,gBAAAA,GACAE,yBAA0B,CAAC,MAAO,KAAM,OACxCrE,iBAAkBuG,GAClBhC,sBAAuBqC,GAEvBjC,YAAa,CACX,CAAE3D,MAAO,KAAMF,SAAU,CAAC,IAAK,IAAK,MACpC,CAAEE,MAAO,KAAMF,SAAU,CAAC,IAAK,IAAK,OAEtC+C,WAAY,CAAC,MACb5D,WAAY,CAAEoB,MAAO,IAAKxB,KAAM,IAAKyB,sBAAsB,GAC3DkD,cAAe,CACb,CAAE9B,MAAO,oBACT,CAAE1B,MAAO,KAAMF,SAAU,CAAC,KAAMC,eAAe,GAC/C,CAAEC,MAAO,KAAMF,SAAU,CAAC,KAAMC,eAAe,GAC/C,CAAEC,MAAO,KAAMF,SAAU,CAAC,KAAMC,eAAe,IAEjDzD,WAAY,CAAE2H,YAAY,GAC1B3B,iBAAkB,CAAC,KAAM,KACzBsB,UAAWuG,EAAevG,UAC1BzB,YAAAA,IAEH,M,uEA/BkBgI,CAAuBnO,GAkC5C,SAASmG,GAAYpS,GACnB,OAAOA,EAAOmF,KAAI,SAAClH,EAAOyG,GACxB,IAAMyV,EAAYna,EAAO0E,EAAI,IAAMlH,EACnC,OAAIU,EAAQmB,IAAIpB,IAA6B,MAAnBkc,EAAU7c,KAE3B,OAAP,wBAAYW,GAAK,CAAER,KAAMR,EAAU2B,yBAE9BX,CACR,GACF,CA1CQmc,GAAAA,UAAY,CAAC,IAAK,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,OChO/D,IAAMvE,GAAY9R,EAAgB,CAEvCkW,IAAK,CACH,QACA,MACA,OACA,UACA,YACA,YACA,eACA,YACA,sBACA,eACA,iBACA,cACA,iBACA,eACA,gBACA,eACA,eACA,kBACA,eACA,YACA,YACA,aACA,iBACA,gBACA,YACA,cACA,eACA,eACA,gBACA,gBACA,aACA,aACA,YACA,gBACA,iBACA,iBACA,cACA,OACA,OACA,QACA,MACA,SACA,gBACA,gBACA,UACA,YACA,UACA,SACA,UACA,YACA,WACA,UACA,OACA,cACA,eACA,YACA,WACA,YACA,WACA,SACA,UACA,WACA,iBACA,sBACA,wBACA,MACA,QACA,QACA,SACA,YACA,OACA,kBACA,eACA,mBACA,gBACA,kBACA,mBACA,gBACA,oBACA,iBACA,oBACA,iBACA,SACA,cACA,UACA,aACA,kBAEA,eACA,cACA,MACA,cACA,QACA,WACA,YACA,QACA,YACA,kBACA,QACA,aACA,SACA,UACA,UACA,SACA,WACA,YACA,WACA,WACA,WACA,MACA,aACA,OACA,QACA,SACA,KACA,MACA,QACA,QACA,MACA,OACA,SACA,OACA,SACA,kBACA,gBACA,eACA,gBACA,sBACA,MACA,YACA,QACA,WACA,YACA,aACA,UACA,SACA,UACA,YACA,QACA,SACA,MACA,OACA,aACA,gBACA,qBACA,sBACA,gBACA,eACA,eACA,aACA,gBACA,gBACA,iBACA,gBACA,gBACA,QACA,eACA,KACA,cACA,WACA,WACA,QACA,UACA,SACA,OACA,kBACA,kBACA,cACA,iBACA,kBACA,iBACA,eACA,iBACA,aACA,gBACA,iBACA,gBACA,cACA,SACA,UACA,UACA,QACA,aACA,QACA,SACA,cACA,eACA,OACA,MACA,QACA,OACA,SACA,aACA,cACA,kBACA,gBACA,YACA,aACA,mBACA,SACA,WACA,MACA,MACA,QACA,UACA,SACA,YACA,SACA,SACA,WACA,WACA,WACA,OACA,QAEA,QACA,OACA,WACA,eACA,gBACA,UACA,WACA,iBACA,cAIA,UCtOSzE,GAAWzR,EAAgB,CAEtCkW,IAAK,CACH,SACA,MACA,QACA,UACA,MACA,MACA,QACA,KACA,MACA,KACA,QACA,UACA,SACA,UACA,QACA,SACA,QACA,KACA,OACA,OACA,OACA,UACA,UACA,aACA,SACA,YACA,UACA,WACA,aACA,QACA,SACA,UACA,WACA,UACA,YACA,UACA,YACA,SACA,UACA,OACA,WACA,WACA,KACA,OACA,OACA,UACA,OACA,MACA,QACA,SACA,UACA,UACA,SACA,UACA,QACA,QACA,SACA,QACA,UACA,QACA,YACA,MACA,QACA,OACA,MACA,WACA,SACA,QACA,QACA,SACA,MACA,OACA,SACA,KACA,YACA,SACA,QACA,KACA,UACA,YACA,QACA,QACA,SACA,QACA,SACA,YACA,OACA,KACA,aACA,OACA,MACA,OACA,WACA,QACA,WACA,OACA,OACA,MACA,UACA,QACA,OACA,QACA,MACA,MACA,UACA,UACA,eACA,QACA,QACA,UACA,YACA,OACA,KACA,KACA,MACA,YACA,OACA,QACA,SACA,SACA,SACA,KACA,SACA,UACA,KACA,QACA,SACA,QACA,OACA,QACA,YACA,WACA,OACA,OACA,YACA,UACA,UACA,UACA,YACA,QACA,YACA,SACA,QACA,MACA,QACA,SACA,SACA,UACA,SACA,YACA,SACA,QACA,OACA,WACA,MACA,OACA,YACA,YACA,SACA,QACA,SACA,OACA,OACA,MACA,OACA,OACA,QACA,aACA,SACA,SACA,OACA,OACA,KACA,OACA,cACA,UACA,OACA,WACA,YACA,QACA,QACA,SACA,UACA,SACA,QACA,SACA,SACA,MACA,OACA,QACA,WACA,QACA,SACA,SACA,MACA,OACA,OACA,QACA,QACA,SACA,OACA,SACA,OACA,S,kiCC1MJ,IAAMjH,GAAmBwB,GAAc,CAErC,OACA,0BACA,OACA,QACA,WACA,SACA,SACA,eACA,WACA,QACA,SAGA,cACA,SAEA,SACA,MAEA,cAEA,aACA,0BACA,aACA,SAEA,SACA,cACA,oBACA,cACA,qBACA,oBACA,kBACA,eACA,uBACA,eACA,kBACA,gBACA,aACA,qBACA,aACA,UACA,mBACA,UACA,QACA,QACA,UACA,YACA,SACA,uBACA,YACA,kBACA,oBACA,SAEA,MACA,OACA,qBACA,aACA,OACA,SACA,aAGIvB,GAAwBuB,GAAc,CAAC,cAAe,eAAgB,oBAEtErB,GAAgBqB,GAAc,CAAC,OAAQ,8BAA+B,eAGvD6F,GAAAA,SAAAA,I,8xBAGnB,WACE,OAAO,IAAItI,GAAU,CACnBiB,iBAAAA,GACAC,sBAAAA,GACAE,cAAAA,GACAD,yBAA0B,CAAC,OAAQ,QACnCI,yBAA0B,CAAC,MAAO,KAAM,OACxCrE,iBAAkBuG,GAClBhC,sBAAuBqC,GAIvBjC,YAAa,CAAC,KAAM,MACpBd,WAAY,CAAC,MACbJ,WAAY,CAAC,IAAK,IAAK,KACvBE,YAAa,CAAC,IAAK,IAAK,KACxBrG,WAAY,CAAE2H,YAAY,EAAMD,SAAU,CAAC,KAAMF,MAAO,CAAC,MACzDxB,iBAAkB,CAAC,IAAK,MACxBsB,UAAWwG,EAAcxG,WAE5B,M,uEAvBkBwG,CAAsBpO,GAClCoO,GAAAA,UAAY,CAAC,KAAM,MC5ErB,IAAM7E,GAAWzR,EAAgB,CAEtCkW,IAAK,CAEH,MACA,QACA,YACA,MACA,QACA,MACA,MACA,QACA,QACA,KACA,MACA,KACA,YACA,SACA,MACA,QACA,UACA,aACA,SACA,YACA,QACA,OACA,OACA,QACA,OACA,KACA,OAEA,OACA,UACA,UACA,OACA,OACA,YACA,YACA,UACA,cACA,YACA,QACA,YACA,QACA,UACA,WACA,UACA,UACA,UACA,UACA,SACA,YACA,WACA,WACA,UACA,WACA,cACA,UACA,UACA,QACA,QACA,SACA,UACA,SACA,cACA,WACA,OACA,OACA,YACA,MACA,UACA,UACA,UACA,SACA,SACA,OACA,gBACA,WACA,SACA,OACA,WACA,UACA,OACA,QACA,QACA,MACA,SACA,SACA,YACA,aACA,YACA,UACA,SACA,OACA,WACA,QACA,QACA,QACA,QACA,MACA,SACA,QACA,OACA,OACA,WACA,UACA,OACA,QACA,QACA,OACA,SACA,OACA,SACA,OACA,aACA,KACA,YACA,KACA,YACA,QACA,UACA,YACA,UACA,WACA,SACA,eACA,MACA,YACA,YACA,WACA,OACA,aACA,KACA,YACA,OACA,WACA,QACA,UACA,SACA,QACA,UACA,OACA,QACA,QACA,QACA,QACA,UACA,QACA,OACA,OACA,OACA,MACA,MACA,SACA,SACA,QACA,MACA,QACA,SACA,MACA,OACA,SACA,QACA,WACA,OACA,MACA,WACA,SACA,QACA,MACA,aACA,SACA,MACA,SACA,OACA,cACA,SACA,UACA,UACA,cACA,cACA,cACA,gBACA,YACA,SACA,SACA,eACA,WACA,YACA,UACA,KACA,KACA,OACA,SACA,OACA,WACA,SACA,KACA,SACA,UACA,QACA,WACA,eACA,SACA,UACA,SACA,MACA,aACA,UACA,kBACA,YACA,aACA,YACA,SACA,OACA,YACA,SACA,YACA,QACA,UACA,YACA,SACA,QACA,QACA,MACA,OACA,SACA,MACA,YACA,MACA,YACA,SACA,WACA,SACA,SACA,YACA,UACA,SACA,WACA,MACA,SACA,OACA,YACA,MACA,MACA,MACA,SACA,UACA,SACA,OACA,WACA,WACA,eACA,MACA,QACA,QACA,OACA,SACA,OACA,SACA,MACA,UACA,UACA,UACA,WACA,WACA,QACA,SACA,SACA,SACA,SACA,SACA,QACA,cACA,eACA,gBACA,UACA,MACA,UACA,UACA,QACA,MACA,MACA,OACA,OACA,YACA,gBACA,gBACA,kBACA,kBACA,KACA,WACA,UACA,gBACA,UACA,OACA,MACA,MACA,MACA,QACA,QACA,SACA,WACA,YACA,SACA,MACA,QACA,SACA,QACA,SACA,WACA,WACA,SACA,UACA,OACA,QACA,OACA,OACA,QACA,QACA,OACA,OACA,UACA,QACA,OACA,UCtUSpE,GAAY9R,EAAgB,CAEvCuW,QAAS,CACP,MACA,OACA,OACA,OACA,QACA,SACA,OACA,MACA,OACA,MACA,QACA,KACA,MACA,MACA,QACA,QACA,YACA,QACA,OACA,MACA,OACA,OACA,MACA,OACA,QACA,gBAEFC,UAAW,CACT,MACA,SACA,UACA,QACA,OACA,QACA,cACA,YACA,UACA,YACA,iBACA,gBACA,UACA,OACA,QACA,UACA,SACA,YACA,QACA,OACA,QAEA,uBACA,iBACA,mBAEA,QACA,QACA,SACA,gBAEFjE,SAAU,CACR,aACA,eACA,oBACA,aACA,UACA,UACA,WACA,iBACA,iBACA,WACA,WACA,kBACA,kBACA,QACA,kBACA,kBACA,UACA,eACA,UACA,eACA,kBACA,gBACA,gBACA,QACA,aAEFkE,WAAY,CAAC,WAAY,SACzBpE,WAAY,CACV,WACA,aACA,OACA,cACA,UACA,UACA,YACA,WACA,kBACA,kBACA,WACA,YACA,cACA,eACA,mBACA,mBACA,mBACA,kBACA,UACA,UACA,UACA,gBACA,SACA,gBACA,WACA,WACA,YACA,gBACA,iBACA,eACA,kBACA,gBACA,gBACA,YACA,UAEFqE,YAAa,CAAC,YAAa,cAAe,cAC1CC,WAAY,CAAC,cAAe,UAAW,gBAAiB,+BAAgC,OACxFC,aAAc,CAAC,uBACfC,WAAY,CACV,aACA,sBACA,cACA,aACA,cACA,gBACA,aACA,kBACA,qBACA,yBACA,kBAEFC,IAAK,CACH,iBACA,YACA,QACA,UACA,aACA,eACA,iBACA,kBACA,OACA,eACA,aACA,aACA,YACA,SACA,WACA,eACA,aACA,YACA,YACA,WACA,QACA,WACA,UACA,cACA,eACA,WACA,gBAEFC,SAAU,CAAC,SAAU,OAAQ,WAAY,SACzCC,YAAa,CAAC,WAAY,QAAS,SAAU,MAAO,QACpDC,IAAK,CAAC,cAAe,WAAY,aAAc,MAAO,OAAQ,WAC9DhF,UAAW,CACT,MACA,UACA,OACA,SACA,SACA,QACA,YACA,aACA,YACA,aACA,QACA,WACA,WACA,cACA,OACA,MACA,SACA,MACA,kBACA,kBACA,eACA,OACA,aACA,iBACA,aACA,UACA,YACA,YACA,WACA,WACA,WACA,sBACA,iBACA,eACA,gBACA,aACA,gBACA,sBACA,mBACA,sBACA,qBACA,sBACA,iBACA,SACA,aACA,cACA,MACA,UACA,WACA,YAGF4D,OAAQ,CAAC,cAAe,MAAO,aAAc,OAAQ,QAAS,kBAAmB,cACjFqB,gBAAiB,CAAC,QAAS,WAAY,MAAO,WAAY,SAC1DC,MAAO,CAAC,KAAM,mBAAoB,aAAc,WAAY,YAG5D1C,UAAW,CAET,WACA,YACA,SACA,QACA,YACA,gBACA,eACA,MACA,SACA,QAEA,YACA,OACA,oBACA,eACA,qBACA,gBACA,6BACA,wBACA,gBACA,UACA,UACA,QAEA,a,kiCC9PJ,IAAMxF,GAAmBwB,GAAc,CAErC,OACA,mCACA,OACA,QACA,WACA,SACA,sBACA,SACA,uBAGA,2BACA,SAEA,gBACA,MAEA,qBAEA,iBAEA,eACA,4BACA,aAEA,mHACA,2BACA,6HACA,aAEA,cACA,MACA,oDACA,SACA,YACA,gBAGA,QACA,aACA,UACA,SACA,YACA,OACA,YACA,aACA,eAGIvB,GAAwBuB,GAAc,CAAC,cAAe,SAAU,cAEhErB,GAAgBqB,GAAc,CAClC,OACA,qCACA,uBACA,uBACA,6CAEA,0BAGIpB,GAAkB,CAAC,YAAa,YAAa,aAE9B+H,GAAAA,SAAAA,I,8xBAanB,WACE,OAAO,IAAIpJ,GAAU,CACnBiB,iBAAAA,GACAC,sBAAAA,GACAE,cAAAA,GACAD,yBAA0B,CAAC,OAAQ,QACnCE,gBAAAA,GACAE,yBAA0B,CAAC,MAAO,KAAM,OACxCrE,iBAAkBuG,GAClBhC,sBAAuBqC,GACvBjC,YAAa,CACX,CAAE3D,MAAO,KAAMF,SAAU,CAAC,MAC1B,CAAEE,MAAO,MAAOF,SAAU,CAAC,OAE7B+C,WAAY,CAAC,MACb5D,WAAY,CAAEJ,KAAM,MACpB2E,cAAe,CAAC,CAAE9B,MAAO,kCACzBpF,WAAY,CAAE0H,SAAU,CAAC,KAAMF,MAAO,CAAC,MACvCI,WAAY,CAAC,EACbN,UAAWsH,EAAetH,UAC1BzB,YAAAA,IAEH,M,uEAnCkB+I,CAAuBlP,GAsC5C,SAASmG,GAAYpS,GACnB,IAAIob,EAA+B5d,EAEnC,OAAOwC,EAAOmF,KAAI,SAAAlH,GAEhB,OAAIC,EAAQmB,IAAIpB,IAAUC,EAAQW,GAAGuc,GAC5B,OAAP,wBAAYnd,GAAK,CAAER,KAAMR,EAAUmB,oBAGjCsB,EAAWzB,KACbmd,EAAwBnd,GAGnBA,EACR,GACF,CApDQkd,GAAAA,UAAY,CACjB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MC/EG,IAAMtF,GAAY9R,EAAgB,CAIvC+S,KAAM,CACJ,MACA,OACA,QACA,QACA,OACA,QACA,QACA,OACA,QACA,SACA,QACA,QACA,OACA,OACA,UACA,MACA,OACA,OACA,MACA,OACA,UACA,MACA,MACA,YACA,QACA,MACA,MACA,KACA,MACA,QACA,YACA,MACA,KACA,QACA,UACA,SACA,QACA,QACA,UACA,OACA,MACA,OACA,OACA,OACA,MACA,OACA,OACA,aACA,QACA,gBAGFjJ,OAAQ,CACN,MACA,QACA,aACA,QACA,mBACA,cACA,MACA,SACA,YACA,SACA,UACA,OACA,SACA,QACA,OACA,QACA,MACA,YACA,eACA,UACA,cACA,qBACA,WACA,cACA,gBACA,iBACA,eACA,iBACA,iBACA,wBACA,wBACA,SACA,UACA,UACA,QACA,OACA,QACA,aACA,UACA,cACA,aACA,kBACA,kBACA,SACA,SACA,YACA,WACA,SACA,YACA,OACA,SACA,SAGFwN,OAAQ,CACN,YACA,aACA,QACA,UACA,eACA,aACA,SACA,SACA,UACA,WACA,SACA,QACA,MACA,eACA,UACA,WACA,QACA,UACA,WACA,SACA,SACA,SACA,SACA,aACA,SACA,YACA,QAGFC,UAAW,CACT,YACA,aACA,UACA,SACA,eACA,UACA,WACA,UACA,aAGFtN,QAAS,CACP,eACA,iBACA,iBACA,wBACA,yBAGFuN,SAAU,CAAC,UAAW,UAAW,YAAa,gBAE9CjF,SAAU,CAER,kBACA,eACA,eACA,oBACA,WACA,YACA,aACA,UACA,WACA,eACA,gBACA,mBACA,YACA,iBACA,YACA,gBACA,YACA,iBACA,mBACA,MACA,WACA,eACA,iBACA,sBACA,YACA,eACA,yBAGFkF,KAAM,CAAC,aAAc,YAAa,cAElCC,SAAU,CACR,OACA,YACA,MACA,SACA,SACA,WACA,WACA,SACA,WACA,SACA,SACA,OACA,OACA,UACA,OACA,SACA,QACA,UACA,QACA,SACA,QACA,SAGFC,QAAS,CACP,SACA,YACA,SACA,OACA,WACA,aACA,mBACA,mBACA,UACA,UACA,UACA,cACA,OACA,SAGFC,WAAY,CACV,oBACA,wBACA,oBACA,mBACA,SACA,UACA,mBACA,kBACA,YACA,YACA,QACA,aACA,cACA,iBACA,oBACA,WACA,YACA,YACA,cACA,YACA,WACA,UACA,aACA,aACA,UACA,gBACA,wBAGFrE,KAAM,CAAC,QAEPuD,IAAK,CACH,gBACA,sBACA,kBACA,wBACA,gCACA,UACA,eACA,qBACA,6BACA,gBACA,sBACA,8BACA,SACA,eACA,qBACA,6BACA,SACA,aACA,YACA,aACA,YACA,YACA,WACA,QACA,UACA,eACA,WACA,qBACA,6BACA,8BACA,QACA,gBAGFhE,KAAM,CACJ,gBACA,YACA,uBACA,4BACA,qBACA,oBACA,qBACA,aACA,kBACA,qBACA,0BACA,eACA,eACA,mBACA,oBACA,oBACA,uBACA,mBACA,sBACA,mBACA,yBACA,4BACA,yBACA,4BACA,sBACA,wBACA,2BACA,eACA,YACA,gBACA,oBACA,kBACA,qBACA,eACA,WACA,sBACA,2BACA,oBACA,mBACA,oBACA,YACA,iBACA,oBACA,yBACA,cACA,kBACA,mBACA,uBACA,0BACA,mBACA,iBACA,oBACA,cACA,cACA,UACA,WACA,gBAGF+E,SAAU,CAAC,UAAW,UAAW,UAAW,UAE5CrE,YAAa,CAEX,WACA,WACA,QACA,UAGFrB,MAAO,CACL,YACA,eACA,YACA,aACA,aACA,eACA,cACA,cACA,iBACA,kBACA,gBACA,eACA,gBACA,kBACA,cACA,cACA,kBACA,aACA,UAGF2F,MAAO,CACL,UACA,QACA,YACA,YACA,aACA,cACA,QACA,YACA,aAGF7F,UAAW,CAET,YACA,MACA,UACA,SACA,UACA,WACA,UACA,WACA,OACA,QACA,YACA,aACA,YACA,aACA,QACA,WACA,YACA,mBACA,WACA,kBACA,MACA,MACA,OACA,kBACA,kBACA,eACA,YACA,sBACA,OACA,YACA,YACA,aACA,iBACA,UACA,aACA,WACA,WACA,WAEA,SACA,aACA,cACA,aACA,MACA,UACA,WACA,WACA,UACA,WACA,UAGF4D,OAAQ,CACN,YACA,aACA,cACA,MACA,aACA,OACA,YACA,QACA,eACA,OACA,cAGFkC,IAAK,CAAC,kBAAmB,uBAEzBC,QAAS,CACP,aACA,aACA,kBACA,kBACA,mBACA,gBACA,eACA,iBACA,kBACA,eACA,cACA,2BACA,uBACA,yBACA,qCACA,yBACA,yBACA,uBACA,yBACA,uBACA,2BACA,sBACA,qBACA,mBACA,mBACA,mBACA,mBACA,cACA,kBACA,iBACA,mBACA,0BACA,oBACA,wBACA,kBACA,oBACA,2BACA,qBACA,sBACA,qBACA,iCACA,qBACA,yBACA,8BACA,uBACA,cACA,qBACA,4BACA,qCACA,yBACA,kBACA,kBACA,wBACA,wBACA,iBACA,yBACA,0BACA,oBACA,kBACA,iBACA,cACA,qBACA,gCACA,0BACA,+BACA,wBACA,0BACA,mBACA,yBACA,wBACA,oBACA,8BACA,wBACA,yBACA,yBACA,sBACA,2BACA,iCACA,kBACA,mBACA,mBACA,+BACA,0BACA,yBACA,sBACA,mBACA,0BACA,wBACA,0BACA,4BACA,YACA,qBACA,yBACA,2BACA,kCACA,iBACA,kBACA,sBACA,eACA,oBACA,cACA,kBACA,kBACA,aACA,iBACA,aACA,kBACA,aACA,aACA,eACA,2BACA,wBACA,oBACA,qBACA,qBACA,cACA,2BACA,OACA,WAGFC,SAAU,CACR,yBACA,4BACA,uBACA,eACA,kBACA,yBACA,mBACA,0BACA,qBACA,yBACA,4BACA,wBACA,+BACA,uBACA,oBACA,8BACA,wBACA,iBACA,mCACA,oCACA,qCACA,sCACA,0BACA,2BACA,4BACA,qBACA,mBACA,2BACA,qBACA,uBACA,gCACA,8BACA,kBACA,kBACA,oBACA,0BACA,0BACA,yBACA,gCACA,0BACA,qCACA,8BACA,sCACA,+BACA,iCACA,0BACA,YACA,eACA,eACA,eACA,yBACA,oBACA,oBACA,aACA,sBACA,eACA,uBACA,uBACA,mBACA,iBACA,gCACA,+BACA,6BACA,4BACA,iCACA,yCACA,yCACA,sCACA,sCACA,mCACA,mCACA,8BACA,oBACA,gBACA,iBACA,kBACA,eACA,iBACA,gBACA,qBACA,gBACA,uBACA,yBACA,uBACA,8BACA,4BACA,mCACA,kBACA,yBACA,kBACA,sBACA,uBACA,cAGFC,QAAS,CACP,qCACA,0BACA,kCAGFC,aAAc,CACZ,gCACA,mCACA,qCACA,wCACA,yBAGFC,MAAO,CAAC,qBACR3C,KAAM,CAAC,QAGPhB,UAAW,CACT,MACA,cACA,YACA,oBACA,UACA,OACA,UACA,UACA,OACA,YACA,UCvtBShD,GAAWzR,EAAgB,CAEtCkW,IAAK,CACH,QACA,WACA,SACA,SACA,MACA,QACA,QACA,YACA,MACA,OACA,QACA,SACA,UACA,UACA,MACA,MACA,QACA,KACA,MACA,aACA,YACA,aACA,aACA,KACA,SACA,SACA,YACA,gBACA,WACA,SACA,QACA,UACA,SACA,SACA,MACA,UACA,OACA,UACA,KACA,QACA,OACA,SACA,UACA,WACA,OACA,OACA,UACA,QACA,OACA,YACA,kBACA,QACA,aACA,QACA,QACA,UACA,WACA,UACA,YACA,SACA,UACA,UACA,WACA,SACA,YACA,cACA,eACA,gBACA,WACA,aACA,aACA,cACA,UACA,WACA,aACA,OACA,OACA,SACA,QACA,MACA,OACA,UACA,kBACA,eACA,eACA,iBACA,eACA,oBACA,eACA,SACA,QACA,OACA,WACA,MACA,aACA,MACA,UACA,UACA,UACA,WACA,aACA,WACA,UACA,SACA,YACA,aACA,UACA,QACA,OACA,SACA,aACA,UACA,UACA,WACA,KACA,WACA,SACA,SACA,OACA,OACA,OACA,SACA,WACA,YACA,MACA,OACA,SACA,QACA,SACA,UACA,YACA,YACA,UACA,SACA,UACA,aACA,YACA,WACA,UACA,QACA,SACA,QACA,SACA,WACA,QACA,QACA,YACA,MACA,QACA,UACA,UACA,SACA,OACA,OACA,WACA,YACA,YACA,SACA,QACA,UACA,WACA,QACA,WACA,SACA,UACA,SACA,SACA,OACA,OACA,WACA,KACA,QACA,YACA,YACA,WACA,SACA,KACA,UACA,YACA,YACA,QACA,UACA,UACA,WACA,YACA,SACA,QACA,QACA,QACA,cACA,SACA,UACA,MACA,UACA,YACA,WACA,OACA,UACA,KACA,SACA,YACA,OACA,MACA,QACA,WACA,QACA,OACA,UACA,UACA,YACA,QACA,OACA,QACA,OACA,QACA,SACA,OACA,QACA,YACA,iBACA,WACA,OACA,SACA,SACA,UACA,QACA,eACA,WACA,SACA,SACA,WACA,OACA,QACA,OACA,OACA,QACA,WACA,UACA,QACA,MACA,OACA,MACA,MACA,OACA,OACA,KACA,OACA,YACA,aACA,MACA,UACA,SACA,UACA,SACA,OACA,SACA,QACA,UACA,SACA,KACA,MACA,SACA,OACA,MACA,KACA,OACA,WACA,SACA,UACA,KACA,QACA,aACA,SACA,MACA,QACA,OACA,WACA,UACA,aACA,QACA,QACA,WACA,SACA,UACA,YACA,UACA,WACA,UACA,QACA,SACA,WACA,YACA,YACA,UACA,WACA,WACA,UACA,QACA,aACA,aACA,YACA,aACA,UACA,cACA,QACA,QACA,OACA,OACA,WACA,UACA,YACA,MACA,aACA,cACA,UACA,UACA,WACA,UACA,SACA,aACA,UACA,UACA,QACA,UACA,WACA,SACA,YACA,UACA,SACA,QACA,OACA,WACA,SACA,UACA,WACA,MACA,OACA,OACA,YACA,SACA,UACA,SACA,SACA,SACA,WACA,SACA,WACA,YACA,eACA,SACA,UACA,eACA,MACA,QACA,OACA,QACA,OACA,UACA,SACA,OACA,WACA,WACA,OACA,MACA,SACA,aACA,QACA,YACA,aACA,QACA,SACA,UACA,SACA,SACA,QACA,eACA,YACA,UACA,YACA,QACA,SACA,QACA,SACA,cACA,aACA,OACA,WACA,YACA,OACA,OACA,OACA,OACA,YACA,KACA,WACA,cACA,YACA,QACA,UACA,OACA,OACA,WACA,UACA,OACA,QACA,UACA,YACA,cACA,cACA,QACA,SACA,UACA,WACA,WACA,QACA,SACA,OACA,QACA,SACA,QACA,WACA,YACA,QACA,SACA,UACA,WACA,UACA,UACA,UACA,OACA,QACA,WACA,OACA,QACA,aACA,SACA,OACA,SACA,UACA,OACA,UACA,QACA,MACA,gBACA,YACA,aACA,YACA,YACA,gBACA,WACA,QACA,UACA,eACA,WACA,OACA,MACA,U,kiCCvcJ,IAAMjH,GAAmBwB,GAAc,CAErC,mBACA,0BACA,OACA,QACA,4BACA,SACA,SACA,eACA,WACA,QACA,SACA,uBAGA,cACA,SAEA,gBACA,MACA,mBAEA,qBAEA,0BAEA,0DACA,2CACA,8EACA,yBAEA,iCACA,gCACA,kBACA,YACA,+BACA,4BACA,iBACA,kBACA,uBACA,wBAGA,QACA,kBACA,kBACA,mBACA,iBACA,2BACA,eACA,sBACA,kBACA,6BACA,sBACA,iBACA,cACA,cACA,iBACA,qBACA,0BACA,iBACA,uBACA,wBACA,eACA,kBACA,oBACA,aACA,gBACA,aACA,eACA,iBACA,eACA,mBACA,qBACA,eACA,mBACA,kCACA,+BACA,2BACA,6BACA,gBACA,aACA,aACA,qBACA,aACA,UACA,QACA,OACA,aACA,QACA,UACA,UACA,SACA,kBACA,OACA,uBACA,mBACA,cACA,mBACA,oBACA,kBACA,gBACA,uBACA,mBACA,8BACA,uBACA,kBACA,eACA,eACA,kBACA,kBACA,wBACA,yBACA,gBACA,mBACA,qBACA,cACA,cACA,gBACA,kBACA,gBACA,oBACA,sBACA,oBACA,mCACA,gCACA,4BACA,8BACA,mBACA,iBACA,cACA,cACA,sBACA,aACA,UACA,UACA,KACA,qBACA,iBACA,YACA,iBACA,kBACA,gBACA,cACA,qBACA,iBACA,4BACA,qBACA,gBACA,aACA,aACA,gBACA,yBACA,gBACA,sBACA,uBACA,aACA,cACA,iBACA,mBACA,YACA,eACA,YACA,cACA,gBACA,cACA,kBACA,oBACA,kBACA,iCACA,8BACA,0BACA,4BACA,iBACA,eACA,YACA,YACA,oBACA,YACA,UACA,UACA,QACA,QACA,wBACA,SACA,OACA,OACA,OACA,SACA,UACA,sBACA,iBACA,4BACA,UACA,oBACA,QACA,YACA,SACA,WACA,oBACA,wBACA,YACA,iBACA,cACA,kBACA,WACA,4BACA,kBACA,OACA,oBACA,WACA,SAEA,QACA,eAGIvB,GAAwBuB,GAAc,CAC1C,yBACA,0BACA,+BAGIrB,GAAgBqB,GAAc,CAClC,OACA,qCACA,uBACA,uBACA,+CAGIpB,GAAkB,CAAC,YAAa,aA4EjBgJ,GAAAA,SAAAA,I,8xBAGnB,WACE,OAAO,IAAIrK,GAAU,CACnBiB,iBAAAA,GACAC,sBAAAA,GACAE,cAAAA,GACAD,yBAA0B,CAAC,OAAQ,QACnCE,gBAAAA,GACAnE,iBAAkBuG,GAClBhC,sBAAuBqC,GACvBnD,WAAY,CAAC,IAAK,KAClBE,YAAa,CAAC,IAAK,KACnBgB,YAAa,CAAC,KAAM,CAAE3D,MAAO,KAAMF,SAAU,CAAC,IAAK,IAAK,IAAK,QAC7D+C,WAAY,CAAC,CAAE7C,MAAO,KAAMF,SAAU,CAAC,QACvCb,WAAY,CAAEJ,KAAM,KACpBvC,WAAY,CAAE0H,SAAU,CAAC,MACzBJ,UAAWuI,EAAoBvI,WAElC,M,uEApBkBuI,CAA4BnQ,GACxCmQ,GAAAA,UA3Ee,CAEtB,KACA,KACA,KACA,MACA,KAEA,KAEA,KACA,MACA,MACA,OAEA,IACA,KACA,KACA,MAEA,KACA,MACA,KACA,MAEA,MACA,MACA,OACA,OAEA,MACA,KACA,IACA,KACA,MACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,KACA,KACA,KAEA,MACA,MAEA,MAEA,IACA,KACA,KACA,KACA,MACA,KACA,MACA,KAEA,KACA,KACA,KACA,OCpTK,IAAMvG,GAAY9R,EAAgB,CAEvCiS,UAAW,CACT,YACA,8BACA,MACA,QACA,UACA,MACA,SACA,MACA,kBACA,cACA,aACA,MACA,WACA,WAGFE,MAAO,CACL,QACA,eACA,gBACA,mBACA,iBACA,YAGFC,QAAS,CAAC,UAAW,SAAU,WAAY,WAE3CoB,YAAa,CAAC,WAAY,SAAU,WAAY,QAAS,MAAO,OAAQ,UAExE8E,SAAU,CACR,aACA,eACA,mBACA,eACA,eACA,oBACA,WACA,qBACA,uBACA,iBACA,UACA,WACA,YACA,aACA,UACA,UACA,eACA,WACA,iBACA,WACA,UACA,YACA,gBACA,qBACA,4BACA,kBACA,uBACA,4BACA,WACA,eACA,SAGFC,QAAS,CACP,UACA,WACA,eACA,cACA,WACA,UACA,cACA,YACA,YACA,eACA,YACA,aACA,cACA,aACA,cACA,sBACA,gBACA,eACA,YACA,aACA,eACA,cACA,cACA,oBACA,aACA,cACA,cACA,YACA,kBACA,aACA,aACA,cACA,cACA,aACA,eACA,kBACA,kBACA,kBACA,kBACA,iBACA,mBACA,gBACA,kBACA,iBACA,cACA,kBACA,aACA,cACA,aACA,YACA,kBACA,cACA,wBACA,0BACA,OACA,kBACA,cACA,eACA,iBACA,aACA,UACA,UACA,WACA,WACA,aACA,YACA,mBACA,sBACA,eACA,eACA,iBACA,WACA,YACA,YACA,aACA,iBACA,aACA,cACA,aACA,cACA,UACA,gBACA,aACA,YACA,OACA,UACA,UACA,OACA,UACA,UACA,OACA,UACA,UACA,gBAGF5F,KAAM,CAAC,WAAY,YAAa,WAAY,MAAO,MAAO,OAAQ,QAElE6F,YAAa,CAAC,MAAO,oBAAqB,kBAAmB,eAE7D1F,KAAM,CACJ,gBACA,sBACA,oBACA,kCACA,yBACA,aACA,kBAGFC,KAAM,CACJ,MACA,OACA,OACA,OACA,QACA,OACA,UACA,OACA,MACA,MACA,UACA,OACA,QACA,SACA,MACA,QACA,KACA,MACA,MACA,KACA,QACA,UACA,SACA,QACA,MACA,OACA,OACA,MACA,SACA,SAGF0F,gBAAiB,CAAC,iBAElB3O,OAAQ,CACN,QACA,YACA,QACA,qBACA,cACA,mBACA,YACA,MACA,UACA,SACA,QACA,aACA,UACA,OACA,QACA,MACA,SACA,QACA,OACA,OACA,QACA,aACA,eACA,WACA,cACA,gBACA,eACA,eACA,iBACA,gBACA,SACA,UACA,YACA,UACA,QACA,UACA,aACA,SACA,SACA,YACA,UACA,YACA,OACA,SAGF4O,UAAW,CACT,oBACA,gBACA,WACA,YACA,aACA,UACA,aACA,WACA,aACA,YACA,YACA,cACA,aACA,eAGF7C,OAAQ,CACN,MACA,QACA,YACA,aACA,cACA,aACA,MACA,OACA,UACA,MACA,SACA,MACA,YACA,QACA,eACA,kBACA,kBACA,OACA,kBACA,aACA,cACA,aACA,MACA,WACA,WAGF8C,SAAU,CACR,OACA,UACA,UACA,UACA,YACA,kBACA,uBAGFV,SAAU,CACR,wBACA,0BACA,uBACA,kBACA,oBACA,uBACA,iBACA,cAGFD,QAAS,CACP,sBACA,mBACA,oBACA,iBACA,kBACA,eACA,kBACA,2BACA,yBACA,uBACA,sBACA,iBACA,cACA,6BACA,0BACA,gCACA,qBACA,kBACA,oBACA,mBACA,uBACA,eACA,YACA,OACA,WAEFvD,UAAW,CACT,UACA,UACA,OACA,YACA,UACA,oBACA,QACA,WACA,aCzWShD,GAAWzR,EAAgB,CAEtC0V,SAAU,CACR,SACA,SACA,MACA,iBACA,MACA,QACA,KACA,MACA,gBACA,SACA,UACA,SACA,OACA,QACA,SACA,aACA,SACA,QACA,UACA,aACA,UACA,SACA,OACA,UACA,WACA,KACA,SACA,SACA,UACA,aACA,WACA,QACA,MACA,UACA,SACA,OACA,OACA,gBACA,gBACA,QACA,WACA,SACA,QACA,KACA,YACA,QACA,OACA,KACA,SACA,WACA,UACA,OACA,QACA,YACA,iBACA,MACA,OACA,QACA,UACA,MACA,MACA,UACA,OACA,QACA,MACA,UACA,SACA,MACA,MACA,KACA,OACA,OACA,QACA,QACA,WACA,WACA,YACA,UACA,cACA,UACA,UACA,UACA,aACA,YACA,SACA,UACA,UACA,UACA,WACA,OACA,SACA,QACA,MACA,OACA,OACA,YACA,KACA,MACA,WACA,OACA,SACA,QACA,UACA,SACA,WAGFkD,qBAAsB,CACpB,gBACA,iBACA,eACA,aACA,cACA,WACA,SACA,eACA,aACA,mBACA,eACA,eACA,UACA,aACA,aACA,mBAGFC,eAAgB,CAAC,WAAY,aAAc,WAAY,SAAU,cAEjEC,iBAAkB,CAChB,SACA,MACA,YACA,aACA,YACA,OACA,OACA,UACA,OAGFC,eAAgB,CACd,gBACA,cACA,YACA,WACA,uBACA,oBACA,iBAGFC,sBAAuB,CAAC,QAAS,OAAQ,OAAQ,QAEjDC,eAAgB,CAAC,WAAY,YAAa,SAAU,OAEpDC,qBAAsB,CACpB,MACA,OACA,WACA,QACA,WACA,MACA,UACA,WACA,WACA,YACA,UACA,WAEFtH,KAAM,CAEJ,eACA,aACA,WAEA,OACA,OACA,MACA,YAEA,eAUF6C,UAAW,CAAC,SAAU,U,kiCC5LxB,IAAMxF,GAAmBwB,GAAc,CAErC,mBACA,0BACA,OACA,QACA,WACA,SACA,WACA,QACA,SAGA,cACA,SAEA,SACA,MAEA,gBAEA,mBAEA,0CACA,iFACA,yBAEA,cACA,qBACA,eACA,gBACA,YACA,gBACA,eACA,OACA,SAGA,QACA,iBACA,kBACA,2BACA,cACA,0BACA,kBACA,eACA,aACA,UACA,UACA,sBACA,sBACA,QACA,OACA,SACA,QACA,UACA,SACA,OACA,kBACA,mBACA,2BACA,yBACA,wBACA,kBACA,eACA,iBACA,eACA,mBACA,gBACA,cACA,aACA,UACA,iBACA,gBACA,iBACA,gBACA,aACA,eACA,aACA,yBACA,iBACA,cACA,YACA,YACA,OACA,UACA,UACA,QACA,QACA,OACA,UACA,4BACA,QACA,SACA,WACA,cACA,4BACA,8BACA,OACA,sBACA,aACA,kBACA,iBACA,aACA,YACA,oBACA,SACA,SAEA,iBAGIvB,GAAwBuB,GAAc,CAAC,cAAe,SAAU,YAAa,UAE7ErB,GAAgBqB,GAAc,CAClC,OACA,qCACA,uBACA,uBACA,+CAGIpB,GAAkB,CAEtB,UAEA,eACA,kBAImB8J,GAAAA,SAAAA,I,8xBAGnB,WACE,OAAO,IAAInL,GAAU,CACnBiB,iBAAAA,GACAC,sBAAAA,GACAE,cAAAA,GACAD,yBAA0B,CAAC,OAAQ,QACnCE,gBAAAA,GACAnE,iBAAkBuG,GAClBhC,sBAAuBqC,GACvBjC,YAAa,CAAC,MACdd,WAAY,CAAC,MACb5D,WAAY,CAAEoB,MAAO,KACrB/D,WAAY,CAAE0H,SAAU,CAAC,MACzBJ,UAAWqJ,EAAkBrJ,WAEhC,M,uEAlBkBqJ,CAA0BjR,GACtCiR,GAAAA,UAAY,CAAC,IAAK,KAAM,MAAO,KAAM,KAAM,MCxI7C,IAAM1H,GAAWzR,EAAgB,CAEtCkW,IAAK,CACH,MACA,QACA,MACA,QACA,UACA,MACA,OACA,MACA,UACA,QACA,KACA,MACA,KACA,gBACA,UACA,OACA,SACA,UACA,KACA,QACA,UACA,OACA,SACA,QACA,QACA,UACA,YACA,UACA,UACA,aACA,SACA,UACA,UACA,SACA,UACA,cACA,UACA,cACA,aACA,OACA,SACA,QACA,OACA,UACA,eACA,eACA,oBACA,eACA,OACA,WACA,YACA,MACA,eACA,UACA,SACA,YACA,OACA,WACA,MACA,cACA,YACA,WACA,aACA,MACA,OACA,SACA,UACA,SACA,WACA,SACA,SACA,WACA,WACA,UACA,QACA,QACA,SACA,SACA,aACA,QACA,cACA,YACA,MACA,UACA,SACA,YACA,OACA,WACA,YACA,SACA,QACA,QACA,WACA,OACA,KACA,SACA,SACA,KACA,QACA,UACA,QACA,SACA,cACA,YACA,WACA,OACA,KACA,QACA,OACA,OACA,aACA,UACA,OACA,UACA,OACA,OACA,QACA,OACA,QACA,WACA,OACA,QACA,UACA,QACA,MACA,UACA,QACA,SACA,QACA,OACA,YACA,aACA,UACA,KACA,MACA,OACA,QACA,KACA,OACA,SACA,UACA,KACA,QACA,MACA,QACA,eACA,OACA,WACA,UACA,YACA,QACA,YACA,cACA,aACA,UACA,UACA,WACA,YACA,UACA,aACA,aACA,QACA,QACA,QACA,eACA,eACA,UACA,SACA,aACA,SACA,SACA,UACA,UACA,WACA,SACA,QACA,QACA,OACA,QACA,WACA,SACA,MACA,OACA,SACA,SACA,SACA,OACA,YACA,QACA,kBACA,eACA,OACA,OACA,SACA,OACA,OACA,SACA,QACA,aACA,SACA,WACA,SACA,SACA,YACA,QACA,SACA,gBACA,YACA,aACA,OACA,KACA,QACA,WACA,cACA,eACA,OACA,OACA,WACA,YACA,YACA,UACA,SACA,UACA,SACA,QACA,MACA,OACA,QACA,OACA,SACA,OAEA,UACA,YACA,WACA,WACA,UACA,OACA,WACA,aACA,aACA,SACA,UACA,cACA,SACA,UACA,gBACA,QACA,WACA,eACA,QACA,cACA,cACA,SACA,QACA,QACA,gBACA,SACA,SACA,KACA,WACA,SACA,YACA,OACA,SACA,OACA,QACA,WACA,YACA,gBChRSpE,GAAY9R,EAAgB,CAIvCiS,UAAW,CAET,wBACA,oBACA,MACA,UACA,SACA,UACA,WACA,UACA,eACA,cACA,OACA,QACA,QACA,QACA,WACA,mBACA,YACA,aACA,QACA,QACA,cACA,WACA,cACA,WACA,OACA,aACA,MACA,SACA,OACA,MACA,SACA,aACA,aACA,oBACA,WAEA,MACA,SACA,aACA,cACA,MACA,UACA,WACA,YAGF4D,OAAQ,CACN,YACA,aACA,MACA,OACA,YACA,QACA,eACA,OACA,cAGF1D,MAAO,CACL,QACA,iBACA,iBACA,eACA,kBACA,aACA,YACA,YACA,iBACA,eACA,eACA,cACA,iBACA,aACA,UACA,WACA,UACA,QACA,cAGF/Q,IAAK,CACH,aACA,aACA,MACA,aACA,cACA,kBACA,mBACA,WACA,aACA,cAGFmR,SAAU,CACR,aACA,eACA,eACA,oBACA,oBACA,mBACA,WACA,cACA,sBACA,YACA,WACA,aACA,WACA,MACA,aACA,YACA,YACA,UACA,gBACA,qBACA,OACA,WACA,YACA,mBACA,gBACA,iBACA,mBACA,SACA,QACA,iBACA,WACA,MACA,UACA,SACA,iBACA,mBACA,mBACA,oBACA,UACA,eACA,oBACA,mBACA,QACA,YACA,cACA,cACA,eACA,iBACA,UACA,aACA,SACA,QAGFO,KAAM,CACJ,YACA,kBACA,oBACA,mBACA,aACA,iBACA,WAGFlB,KAAM,CACJ,MACA,OACA,QACA,YACA,aACA,QACA,OACA,QACA,cACA,OACA,QACA,QACA,SACA,SACA,MACA,SACA,YACA,UACA,aACA,UACA,SACA,QACA,cACA,OACA,OACA,UACA,OACA,cACA,mBACA,MACA,SACA,YACA,OACA,MACA,OACA,MACA,QACA,kBACA,mBACA,eACA,OACA,UACA,UACA,SAEA,MACA,MACA,QACA,YACA,cACA,QACA,QACA,SACA,gBACA,gBACA,WACA,SACA,OACA,MACA,QACA,UACA,SACA,eACA,0BACA,yBACA,kBACA,QACA,MACA,QACA,YACA,SACA,cACA,QACA,OACA,SACA,cACA,KACA,SACA,MACA,QACA,QACA,OACA,QACA,OACA,QACA,aACA,eACA,MACA,MACA,8BACA,eACA,QACA,WACA,MACA,OACA,eACA,UACA,YACA,KACA,OACA,aACA,mBACA,WACA,WACA,MACA,QACA,SACA,UACA,cACA,OACA,QACA,SACA,UACA,iBACA,qBACA,cACA,iBACA,SACA,UACA,UACA,QACA,OACA,QACA,OACA,QACA,gBACA,YACA,MACA,OACA,OACA,YACA,aACA,qBACA,OACA,SACA,MACA,OACA,WACA,UACA,QACA,qBACA,QACA,OACA,QACA,SACA,YACA,kBACA,MACA,OACA,YACA,UACA,SACA,iBACA,mBACA,YACA,OACA,UACA,aACA,SACA,QACA,WACA,QACA,QACA,OACA,UACA,eACA,QACA,gBACA,eACA,cACA,YACA,aACA,eACA,cACA,eACA,WACA,YAEF6D,KAAM,CAAC,QAEP2D,WAAY,CAAC,WAAY,UAGzB3E,UAAW,CACT,UACA,MACA,UAEA,a,kiCC3VJ,IAAMxF,GAAmBwB,GAAc,CAErC,OACA,0BACA,OACA,QACA,WACA,SACA,SACA,WACA,UACA,aACA,gBACA,QAGA,oCACA,SAEA,iBAGA,qCAGA,2BACA,yBAEA,0EACA,0CACA,yBAEA,cACA,cACA,0BACA,YACA,gBACA,eAEA,iBACA,aACA,kBACA,kBACA,gBACA,gBACA,YACA,eACA,eAEA,cACA,QACA,YACA,UAEA,WACA,UACA,gBACA,cACA,cACA,oBACA,oBACA,iBACA,iBACA,YACA,WACA,UACA,gBACA,mBACA,QACA,eACA,oBACA,iBACA,iBACA,kBACA,sBACA,cACA,qBACA,aACA,gBAEA,iBAGIvB,GAAwBuB,GAAc,CAC1C,yBACA,0BACA,+BAGIrB,GAAgBqB,GAAc,CAClC,OACA,qCACA,uBACA,uBACA,6CAEA,4BACA,sCAGIpB,GAAkB,CAAC,YAAa,YAAa,eAG9BgK,GAAAA,SAAAA,I,8xBAGnB,WACE,OAAO,IAAIrL,GAAU,CACnBiB,iBAAAA,GACAC,sBAAAA,GACAE,cAAAA,GACAD,yBAA0B,CAAC,OAAQ,QACnCE,gBAAAA,GACAE,yBAA0B,CAAC,MAAO,KAAM,OACxCrE,iBAAkBuG,GAClBhC,sBAAuBqC,GACvBnD,WAAY,CAAC,IAAK,KAClBE,YAAa,CAAC,IAAK,KACnBgB,YAAa,CACX,CAAE3D,MAAO,KAAMF,SAAU,CAAC,IAAK,MAC/B,CAAEE,MAAO,KAAMF,SAAU,CAAC,IAAK,OAEjC+C,WAAY,CAAC,MACbW,cAAe,CAAC,CAAExD,MAAO,KAAMF,SAAU,CAAC,KAAMC,eAAe,IAC/D6D,UAAWuJ,EAAevJ,UAC1BzB,YAAAA,IAEH,M,uEAxBkBgL,CAAuBnR,GA2B5C,SAASmG,GAAYpS,GACnB,OAAOA,EAAOmF,KAAI,SAAClH,EAAOyG,GACxB,IAAMgU,EAAY1Y,EAAO0E,EAAI,IAAMlH,EAC7B2c,EAAYna,EAAO0E,EAAI,IAAMlH,EAGnC,OAAIU,EAAQsB,OAAOvB,IAAUkc,EAAU1c,OAASR,EAAU4E,WAEjD,OAAP,wBAAY5D,GAAK,CAAER,KAAMR,EAAU2B,yBAIlB,UAAfX,EAAMX,MAAoBW,EAAMR,OAASR,EAAUmB,kBAC5B,eAAnBsa,EAAUpb,MAA4C,eAAnB6c,EAAU7c,KAM9CW,EAJI,OAAP,wBAAYA,GAAK,CAAER,KAAMR,EAAUyE,WAAYpE,KAAMW,EAAMN,KAKhE,GACF,CA/CQyf,GAAAA,UAAY,CAAC,IAAK,MAAO,KAAM,KAAM,KAAM,MC9G7C,IAAMvH,GAAY9R,EAAgB,CAEvCqV,OAAQ,CACN,MACA,UACA,OACA,WACA,SACA,OACA,MACA,SACA,MACA,QACA,oBACA,SACA,OACA,aACA,SACA,iBACA,QACA,QACA,SACA,SACA,QACA,SACA,aACA,UACA,QACA,QACA,OACA,UACA,2BACA,4BACA,gBACA,mBACA,iBACA,SACA,YACA,gBACA,OACA,SACA,UACA,WACA,QACA,YAGFpD,UAAW,CAAC,MAAO,QAAS,eAAgB,MAAO,MAAO,MAAO,SAEjEM,SAAU,CAAC,OAAQ,OAAQ,WAAY,YAAa,YAAa,YAEjEsD,OAAQ,CACN,aACA,OACA,aACA,eACA,YACA,QACA,MACA,OACA,cACA,aACA,aAGF9C,KAAM,CACJ,OACA,QACA,OACA,QACA,OACA,QACA,QACA,OACA,UACA,MACA,OACA,UACA,MACA,QACA,KACA,MACA,MACA,QACA,OACA,MACA,KACA,MACA,QACA,UACA,MACA,OACA,OACA,MACA,OACA,SAGFD,KAAM,CACJ,OACA,aACA,oBACA,oBACA,eACA,cACA,cACA,aACA,cACA,eACA,WACA,YACA,YACA,aACA,aACA,mBACA,oBACA,YACA,aAEF2C,KAAM,CAAC,QAIPhB,UAAW,CACT,YACA,UACA,oBACA,QACA,mBACA,WACA,UACA,aCnIShD,GAAWzR,EAAgB,CAEtCkW,IAAK,CACH,QACA,SACA,MACA,QACA,MACA,QACA,MACA,MACA,MACA,QACA,SACA,UACA,KACA,MACA,SACA,gBACA,SACA,QACA,UACA,KACA,UACA,OACA,OACA,QACA,UACA,SACA,SACA,WACA,aACA,SACA,QACA,UACA,eACA,eACA,oBACA,WACA,UACA,aACA,WACA,SACA,OACA,SACA,WACA,KACA,OACA,OACA,OACA,MACA,SACA,SACA,UACA,YACA,SACA,UACA,OACA,SACA,QACA,YACA,MACA,UACA,OACA,OACA,YACA,OACA,QACA,SACA,SACA,KACA,SACA,YACA,KACA,QACA,UACA,YACA,QACA,SACA,UACA,YACA,OACA,KACA,SACA,OACA,MACA,OACA,OACA,OACA,QACA,QACA,eACA,UACA,KACA,MACA,UACA,UACA,OACA,QACA,KACA,SACA,KACA,OACA,OACA,KACA,QACA,SACA,QACA,OACA,YACA,OACA,SACA,YACA,UACA,QACA,QACA,QACA,YACA,aACA,SACA,UACA,UACA,SACA,UACA,WACA,YACA,QACA,WACA,MACA,OACA,YACA,SACA,MACA,QACA,OACA,YACA,OACA,OACA,KACA,cACA,UACA,YACA,QACA,SACA,SACA,QACA,SACA,SACA,OACA,UACA,OACA,QACA,SACA,OACA,a,kiCCtJJ,IAAMjH,GAAmBwB,GAAc,CAErC,mBACA,0BACA,OACA,QACA,WACA,SACA,SACA,eACA,WACA,QACA,SAGA,0EACA,eACA,SAEA,qEACA,MAEA,cAEA,iDACA,kDACA,yBAEA,cACA,eACA,gBACA,kBACA,YAGA,eAGIvB,GAAwBuB,GAAc,CAAC,cAAe,SAAU,cAGhErB,GAAgBqB,GAAc,CAClC,OACA,qCACA,uBACA,uBACA,+CAGIpB,GAAkB,CAAC,YAAa,aAEjBiK,GAAAA,SAAAA,I,8xBAInB,WACE,OAAO,IAAItL,GAAU,CACnBiB,iBAAAA,GACAC,sBAAAA,GACAE,cAAAA,GACAD,yBAA0B,CAAC,OAAQ,QACnCE,gBAAAA,GACAnE,iBAAkBuG,GAClBhC,sBAAuBqC,GACvBjC,YAAa,CACX,CAAE3D,MAAO,KAAMF,SAAU,CAAC,OAG5B+C,WAAY,CAAC,KAAM,KAAM,MAEzBvG,WAAY,CAAE2H,YAAY,EAAMD,SAAU,CAAC,KAAMF,MAAO,CAAC,IAAK,IAAK,MACnEF,UAAWwJ,EAAgBxJ,WAE9B,M,uEAtBkBwJ,CAAwBpR,GAEpCoR,GAAAA,UAAY,CAAC,IAAK,KAAM,MAAO,KAAM,KAAM,KAAM,MCzDnD,IAAMxH,GAAY9R,EAAgB,CAEvC+X,IAAK,CAAC,YAENlC,OAAQ,CAAC,OAAQ,aAAc,eAAgB,YAAa,cAE5DU,QAAS,CACP,WACA,oBACA,iBACA,UACA,cACA,mBACA,eACA,cACA,MACA,MACA,KACA,MACA,QACA,OACA,QACA,OACA,UACA,gBAGFzM,OAAQ,CACN,YACA,kBACA,QACA,QACA,UACA,YACA,kBACA,OACA,UACA,YACA,gBAGFyI,SAAU,CAAC,eAAgB,eAAgB,YAAa,oBAAqB,kBAK7EN,UAAW,CACT,QACA,MACA,MACA,MACA,MAIA,aACA,cACA,WACA,UACA,UACA,SACA,eACA,YACA,aACA,OACA,aACA,iBACA,aACA,UACA,YACA,YACA,WACA,WACA,WACA,kBACA,mBAOFwD,KAAM,CAAC,QAEP2D,WAAY,CAAC,WAAY,UAEzBG,YAAa,CAAC,QAAS,MAAO,MAAO,MAAO,OAAQ,OAAQ,QAG5D9E,UAAW,CACT,YACA,OACA,oBACA,eACA,UACA,yBACA,oBACA,OACA,qBACA,gBACA,QACA,6BACA,wBACA,gBACA,kCACA,qBACA,QACA,SACA,iBACA,YACA,sBACA,OACA,UACA,UACA,MACA,OACA,eCpHShD,GAAWzR,EAAgB,CAEtCkW,IAAK,CACH,MACA,WACA,QACA,MACA,MACA,QACA,KACA,aACA,aACA,KACA,SACA,gBACA,QACA,UACA,SACA,SACA,OACA,UACA,OACA,KACA,OACA,SACA,WACA,OACA,OACA,YACA,QACA,OACA,QACA,WACA,UACA,SACA,SACA,YACA,UACA,aACA,gBACA,SACA,QACA,OACA,UACA,kBACA,kCACA,eACA,eACA,iBACA,mCACA,eACA,SACA,QACA,OACA,MACA,aACA,MACA,UACA,UACA,UACA,SACA,QACA,WACA,gBACA,aACA,WACA,SACA,OACA,UACA,OACA,UACA,WACA,SACA,QACA,SACA,OACA,UACA,SACA,WACA,QACA,QACA,SACA,QACA,MACA,UACA,OACA,OACA,OACA,WACA,MACA,SACA,QACA,QACA,SACA,OACA,OACA,WACA,KACA,YACA,QACA,QACA,cACA,SACA,MACA,UACA,YACA,WACA,OACA,KACA,WACA,QACA,UACA,UACA,OACA,OACA,aACA,QACA,QACA,SACA,QACA,SACA,SACA,WACA,SACA,QACA,WACA,WACA,UACA,QACA,QACA,MACA,KACA,OACA,MACA,OACA,SACA,UACA,KACA,MACA,KACA,OACA,OACA,QACA,MACA,QACA,OACA,WACA,YACA,YACA,YACA,UACA,UACA,YACA,QACA,QACA,OACA,YACA,MACA,aACA,cACA,UACA,SACA,SACA,UACA,SACA,QACA,WACA,SACA,MACA,OACA,YACA,QACA,SACA,SACA,SACA,SACA,YACA,eACA,MACA,UACA,WACA,OACA,WACA,MACA,eACA,WACA,aACA,QACA,SACA,cACA,YACA,SACA,cACA,QACA,cACA,OACA,OACA,YACA,gBACA,kBACA,KACA,WACA,cACA,QACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,SACA,OACA,QACA,QACA,SACA,YACA,UACA,UACA,WACA,SACA,SACA,UACA,U,kiCC3NJ,IAAMjH,GAAmBwB,GAAc,CAErC,mBACA,0BACA,OACA,QACA,4BACA,SACA,SACA,eACA,WACA,QACA,SACA,uBAGA,cACA,SAEA,SACA,MACA,mBAEA,cAEA,iBAEA,0BACA,oDACA,aAEA,cACA,aACA,gBACA,gBACA,YACA,iBACA,uBACA,YACA,kCACA,eAGA,eAGIvB,GAAwBuB,GAAc,CAC1C,yBACA,0BACA,+BAGIrB,GAAgBqB,GAAc,CAClC,OACA,qCACA,uBACA,uBACA,+CAGIpB,GAAkB,CAAC,YAAa,aAEjBmK,GAAAA,SAAAA,I,8xBAGnB,WACE,OAAO,IAAIxL,GAAU,CACnBiB,iBAAAA,GACAC,sBAAAA,GACAE,cAAAA,GACAD,yBAA0B,CAAC,OAAQ,QACnCE,gBAAAA,GACAnE,iBAAkBuG,GAClBhC,sBAAuBqC,GACvBjC,YAAa,CAAC,CAAE3D,MAAO,KAAMF,SAAU,CAAC,IAAK,IAAK,QAClD+C,WAAY,CAAC,KAAM,MACnBvG,WAAY,CAAE2H,YAAY,IAE7B,M,uEAhBkBqJ,CAAqBtR,GACjCsR,GAAAA,UAAY,GCnEd,IAAM1H,GAAY9R,EAAgB,CAOvCkW,IAAK,CACH,MACA,OACA,YACA,YACA,kBACA,uBACA,oBACA,aACA,YACA,iBACA,YACA,iBACA,eACA,kBACA,aACA,YACA,YACA,iBACA,eACA,aACA,cACA,OACA,OACA,QACA,cACA,MACA,MACA,WACA,YACA,oBACA,eACA,wBACA,oBACA,oBACA,uBACA,cACA,kBACA,qBACA,cACA,aACA,iBACA,sBACA,iCACA,cACA,YACA,WACA,UACA,cACA,OACA,OACA,OACA,UACA,cACA,WACA,MACA,WACA,WACA,YACA,QACA,eACA,SACA,YACA,WACA,oBACA,kBACA,OACA,MACA,OACA,oBACA,QACA,WACA,YACA,aACA,QACA,YACA,kBACA,eACA,iBACA,iBACA,eACA,oBACA,mBACA,eACA,OACA,WACA,YACA,cACA,aACA,aACA,MACA,eACA,cACA,cACA,UACA,aACA,MACA,MACA,IACA,aACA,mBACA,kCACA,QACA,MACA,UACA,WACA,SACA,cACA,UACA,QACA,SACA,kBACA,gBACA,YACA,cACA,cACA,iBACA,qBACA,qBACA,wBACA,wBACA,WACA,kBACA,kBACA,oBACA,yBACA,+BACA,gBACA,sBACA,YACA,iBACA,6BACA,0BACA,0BACA,yBACA,iBACA,qBACA,WACA,wBACA,mBACA,cACA,YACA,WACA,YACA,cACA,cACA,OACA,yBACA,KACA,QACA,WACA,2BACA,mBACA,qBACA,YACA,cACA,iBACA,SACA,gBACA,sBACA,iBACA,oBACA,cACA,eACA,sBACA,cACA,aACA,aACA,YACA,aACA,WACA,MACA,oBACA,aACA,OACA,mBACA,0BACA,yBACA,kBACA,QACA,SACA,uBACA,yBACA,0BACA,oBACA,UACA,KACA,YACA,iBACA,MACA,QACA,OACA,QACA,OACA,QACA,aACA,kBACA,MACA,UACA,aACA,cACA,aACA,mBACA,WACA,YACA,aACA,eACA,MACA,SACA,MACA,QACA,mBACA,cACA,MACA,SACA,SACA,MACA,QACA,eACA,wBACA,UACA,MACA,SACA,aACA,YACA,aACA,MACA,YACA,QACA,SACA,oBACA,WACA,qBACA,kBACA,iBACA,iBACA,eACA,KACA,WACA,MACA,QACA,cACA,UACA,UACA,OACA,SACA,OACA,SACA,aACA,eACA,iBACA,qBACA,cACA,kBACA,iBACA,eACA,UACA,iBACA,aACA,SACA,SACA,UACA,UACA,MACA,QACA,aACA,OACA,QACA,SACA,WACA,OACA,SACA,SACA,UACA,OACA,oBACA,MACA,WACA,QACA,UACA,uBACA,qBACA,QACA,aACA,eACA,oBACA,oBACA,oBACA,OACA,cACA,SACA,aACA,cACA,SACA,UACA,cACA,YACA,cACA,YACA,cACA,cACA,gBACA,cACA,aACA,gBACA,eACA,cACA,cACA,cACA,cACA,mBACA,YACA,kBACA,gBACA,sBACA,eACA,kBACA,oBACA,mBACA,mBACA,kBACA,gBACA,cACA,aACA,YACA,cACA,aACA,YACA,kBACA,gBACA,gBACA,mBACA,qBACA,eACA,cACA,WACA,YACA,YACA,aACA,YACA,gBACA,mBACA,aACA,WACA,YACA,OACA,UACA,UACA,OACA,UACA,UACA,SACA,YACA,MACA,MACA,OACA,cACA,qBACA,gBACA,kBACA,UACA,YACA,YACA,eACA,mBACA,mBACA,UACA,UACA,sBACA,sBACA,cACA,SACA,gBACA,gBACA,aACA,kBACA,yBACA,eACA,cACA,UACA,YACA,iBACA,mBACA,YACA,OACA,aACA,WACA,MACA,WACA,SACA,QACA,aACA,aACA,uBACA,mBACA,wBACA,mBACA,mBACA,uBACA,oBACA,OACA,sBACA,oBACA,WACA,UACA,WACA,UACA,OACA,eACA,eACA,wBACA,wBACA,gBACA,YACA,WACA,OACA,eACA,MACA,MACA,YAGFuD,WAAY,CAAC,aAAc,QAAS,OAAQ,eAAgB,OAAQ,UAAW,UC7apEhI,GAAWzR,EAAgB,CAEtCkW,IAAK,CACH,SACA,MACA,QACA,QACA,MACA,QACA,UACA,MACA,MACA,QACA,KACA,MACA,KACA,gBACA,YACA,UACA,OACA,KACA,OACA,UACA,OACA,WACA,SACA,UACA,UACA,SACA,YACA,cACA,aACA,cACA,SACA,QACA,OACA,UACA,eACA,eACA,OACA,aACA,UACA,SACA,UACA,SACA,OACA,OACA,WACA,aACA,WACA,cACA,SACA,OACA,OACA,QACA,WACA,MACA,QACA,SACA,SACA,YACA,UACA,SACA,UACA,QACA,QACA,QACA,QACA,YACA,MACA,OACA,OACA,YACA,QACA,UACA,SACA,WACA,QACA,WACA,SACA,SACA,SACA,KACA,YACA,UACA,QACA,QACA,SACA,YACA,WACA,OACA,UACA,KACA,KACA,YACA,OACA,OACA,aACA,cACA,OACA,MACA,OACA,OACA,UACA,UACA,OACA,QACA,OACA,QACA,QACA,UACA,QACA,UACA,UACA,kBACA,eACA,WACA,UACA,OACA,MACA,MACA,OACA,OACA,KACA,OACA,MACA,OACA,QACA,SACA,KACA,SACA,OACA,KACA,MACA,OACA,SACA,KACA,QACA,aACA,QACA,SACA,OACA,WACA,YACA,aACA,UACA,OACA,OACA,UACA,MACA,UACA,YACA,YACA,UACA,aACA,aACA,QACA,SACA,QACA,OACA,YACA,UACA,SACA,aACA,QACA,UACA,WACA,YACA,SACA,QACA,OACA,QACA,WACA,SACA,MACA,OACA,UACA,SACA,SACA,UACA,WACA,OACA,SACA,eACA,UACA,MACA,OACA,OACA,OACA,OACA,QACA,QACA,SACA,SACA,SACA,QACA,SACA,cACA,OACA,OACA,OACA,OACA,YACA,KACA,WACA,cACA,OACA,OACA,UACA,YACA,cACA,gBACA,QACA,SACA,UACA,YACA,SACA,SACA,MACA,OACA,QACA,QACA,QACA,OACA,WACA,QACA,SACA,UACA,OACA,OACA,QACA,SACA,OACA,SACA,UACA,OACA,UACA,QACA,QAIFwD,MAAO,CACL,SACA,MACA,UACA,WACA,UACA,UACA,OACA,UACA,OACA,SACA,cACA,UACA,UACA,gBACA,WACA,YACA,OACA,YACA,UACA,OACA,MACA,QACA,MACA,OACA,WACA,YACA,WACA,OACA,YACA,aACA,aACA,cACA,QACA,aACA,WACA,c,kiCCjRJ,IAAMzK,GAAmBwB,GAAc,CAErC,mBACA,0BACA,OACA,QACA,4BACA,SACA,SACA,eACA,WACA,QACA,SACA,uBAGA,cACA,SAEA,SACA,MAEA,cAEA,iBAEA,0CACA,+BACA,yBAEA,0BACA,6BACA,0BACA,4BACA,YACA,kCACA,iBACA,UAEA,eACA,0BACA,aACA,gBACA,cACA,cACA,cACA,yBACA,YACA,YAEA,UACA,UACA,kBACA,0BACA,MAEA,mBACA,oBACA,iBACA,kBAEA,4BACA,gBACA,cACA,WACA,gBAEA,cACA,oBACA,qBACA,mBACA,gCACA,cACA,eACA,gBACA,eACA,iBACA,aACA,qBACA,mBACA,iBACA,eAGA,kBACA,WACA,oBACA,qBACA,cACA,UACA,SACA,WAKIvB,GAAwBuB,GAAc,CAC1C,yBACA,0BACA,+BAIIrB,GAAgBqB,GAAc,CAClC,OACA,qCACA,uBACA,uBACA,+CAGmBkJ,GAAAA,SAAAA,I,8xBAKnB,WACE,OAAO,IAAI3L,GAAU,CACnBiB,iBAAAA,GACAC,sBAAAA,GACAE,cAAAA,GACAD,yBAA0B,CAAC,OAAQ,QACnCjE,iBAAkBuG,GAClBhC,sBAAuBqC,GAEvBnD,WAAY,CAAC,IAAK,IAAK,IAAK,MAC5BE,YAAa,CAAC,IAAK,IAAK,IAAK,MAG7BgB,YAAa,CAAC,CAAE3D,MAAO,KAAMF,SAAU,CAAC,IAAK,QAE7C+C,WAAY,CAAC,MACbvG,WAAY,CAAE2H,YAAY,GAC1BL,UAAW6J,EAAe7J,WAE7B,M,uEAxBkB6J,CAAuBzR,GAGnCyR,GAAAA,UAAY,CAAC,KAAM,MCvHrB,IAAM7H,GAAY9R,EAAgB,CAEvCiS,UAAW,CACT,wBACA,MACA,eACA,QACA,YACA,WACA,cACA,MACA,MACA,QACA,SACA,MACA,MACA,QAEF2H,SAAU,CACR,YACA,cACA,MACA,aACA,OACA,kBACA,kBACA,eACA,gCACA,gCAEFC,cAAe,CACb,SACA,WACA,aACA,iBACA,oBACA,kBACA,cACA,YACA,cACA,eACA,gBACA,SACA,aACA,aAEFxH,WAAY,CAAC,OAAQ,UAAW,QAAS,WAAY,cAAe,aACpEyH,cAAe,CACb,aACA,kBACA,eACA,UACA,mBACA,mBACA,gBACA,eACA,0BACA,uBACA,sBACA,mBACA,gBACA,eACA,sBACA,YACA,kBACA,WACA,SACA,WACA,gBACA,aACA,iBACA,qBACA,yBAEFC,OAAQ,CAAC,gBAAiB,iBAAkB,iBAC5CpB,SAAU,CACR,aACA,gBACA,aACA,aACA,WACA,wBAEFpG,SAAU,CACR,cACA,oBACA,mBACA,sBACA,UACA,WACA,eACA,gBACA,WACA,WACA,qBACA,oBACA,0BACA,MACA,UACA,UACA,aACA,SACA,QACA,yBACA,eACA,cACA,oBACA,iBACA,gBACA,mBACA,OACA,OACA,SACA,aACA,aACA,eAEFyH,aAAc,CACZ,MACA,OACA,OACA,OACA,OACA,UACA,MACA,MACA,UACA,MACA,QACA,MACA,QACA,KACA,QACA,UACA,OACA,QACA,OACA,MACA,OACA,SACA,MACA,SACA,WACA,MACA,SAEFC,SAAU,CACR,WACA,WACA,eACA,eACA,mBACA,aACA,WACA,iBACA,qBACA,QACA,UACA,UACA,YACA,YACA,eACA,iBACA,oBACA,eACA,iBACA,0BACA,0BACA,YACA,oBACA,gBACA,iBACA,oBACA,YACA,cACA,qBACA,iBACA,mBACA,mBACA,YACA,YACA,cACA,iBACA,iBACA,aACA,UACA,YACA,gBAEFC,QAAS,CAAC,aAAc,QAAS,OAAQ,aAAc,wBACvD/G,SAAU,CACR,cACA,iBACA,eACA,wBACA,eACA,oBACA,YACA,gBACA,mBACA,gBACA,iBACA,cACA,aACA,aACA,eACA,kBACA,WACA,aACA,YACA,cACA,cACA,OACA,UACA,aAEFrJ,OAAQ,CACN,QACA,OACA,YACA,SACA,YACA,aACA,SACA,OACA,MACA,QACA,QACA,QACA,WACA,YACA,UACA,YACA,UACA,QACA,QACA,UACA,QACA,MACA,aACA,gBACA,QACA,YACA,YACA,OACA,UACA,SAEFqQ,OAAQ,CACN,aACA,UACA,aACA,kBACA,aACA,cACA,kBACA,WACA,WACA,qBACA,eACA,qBACA,yBACA,aACA,aACA,gBACA,eACA,kBACA,iBACA,cACA,gBACA,qCACA,cACA,UACA,YACA,SACA,YACA,wBACA,QACA,kBACA,eACA,kBACA,cAEFC,YAAa,CACX,gBACA,aACA,SACA,YACA,cACA,kBACA,cACA,iBACA,eACA,gBACA,UACA,aAEFlC,QAAS,CAAC,kBAAmB,YAAa,oBAAqB,UAE/DkB,WAAY,CAAC,WAAY,UAGzB3E,UAAW,CACT,UACA,UACA,QACA,OACA,YACA,iBACA,OACA,OACA,UACA,QACA,WACA,SACA,eC3TShD,GAAWzR,EAAgB,CAEtC0V,SAAU,CACR,MACA,MACA,QACA,MACA,MACA,KACA,MACA,gBACA,SACA,QACA,UACA,QACA,SACA,OACA,KACA,UACA,QACA,aACA,QACA,YACA,WACA,UACA,SACA,SACA,UACA,aACA,WACA,gBACA,WACA,UACA,SACA,QACA,UACA,eACA,eACA,oBACA,eACA,SACA,WACA,OACA,aACA,UACA,UACA,SACA,OACA,OACA,OACA,WACA,cACA,SACA,OACA,OACA,SACA,SACA,OACA,UACA,SACA,OACA,WACA,QACA,OACA,aACA,MACA,UACA,WACA,gBACA,OACA,OACA,WACA,OACA,QACA,QACA,SACA,WACA,WACA,cACA,kBACA,KACA,KACA,QACA,QACA,SACA,YACA,OACA,KACA,OACA,MACA,OACA,OACA,OACA,SACA,OACA,QACA,WACA,UACA,eACA,MACA,OACA,SACA,KACA,MACA,UACA,KACA,OACA,iBACA,YACA,aACA,UACA,SACA,KACA,QACA,QACA,OACA,UACA,QACA,OACA,YACA,UACA,QACA,OACA,YACA,SACA,YACA,OACA,WACA,cACA,aACA,cACA,UACA,WACA,SACA,SACA,SACA,QACA,WACA,WACA,aACA,OACA,OACA,SACA,gBACA,SACA,yBACA,iCACA,0BACA,eACA,MACA,UACA,WACA,OACA,aACA,cACA,QACA,cACA,WACA,OACA,KACA,MACA,OACA,cACA,UACA,WACA,cACA,UACA,QACA,SACA,UACA,SACA,aACA,MACA,OACA,SACA,UACA,OACA,UACA,QACA,QACA,OACA,eACA,aAEF2E,KAAM,CACJ,WACA,SACA,MACA,MACA,MACA,WACA,QACA,MACA,MACA,MACA,KACA,MACA,YACA,KACA,gBACA,MACA,QACA,UACA,MACA,aACA,OACA,KACA,UACA,WACA,OACA,UACA,OACA,YACA,mBACA,cACA,QACA,QACA,WACA,UACA,YACA,SACA,SACA,UACA,aACA,aACA,cACA,WACA,UACA,gBACA,QACA,SACA,QACA,UACA,eACA,eACA,oBACA,eACA,SACA,OACA,MACA,aACA,MACA,UACA,UACA,UACA,aACA,WACA,SACA,OACA,WACA,aACA,cACA,aACA,WACA,SACA,SACA,OACA,WACA,SACA,YACA,OACA,UACA,SACA,WACA,UACA,QACA,QACA,QACA,QACA,MACA,UACA,UACA,QACA,OACA,OACA,MACA,SACA,KACA,OACA,QACA,QACA,SACA,OACA,WACA,YACA,KACA,UACA,QACA,YACA,YACA,QACA,QACA,cACA,SACA,MACA,UACA,YACA,WACA,OACA,KACA,YACA,OACA,MACA,WACA,OACA,UACA,OACA,QACA,OACA,QACA,QACA,QACA,MACA,MACA,SACA,SACA,QACA,QACA,WACA,UACA,QACA,OACA,KACA,OACA,MACA,OACA,SACA,UACA,eACA,KACA,OACA,OACA,SACA,KACA,QACA,QACA,SACA,WACA,MACA,UACA,SACA,WACA,YACA,UACA,WACA,UACA,QACA,aACA,YACA,SACA,OACA,OACA,aACA,WACA,WACA,SACA,QACA,WACA,OACA,SACA,SACA,SACA,UACA,SACA,UACA,eACA,MACA,OACA,WACA,OACA,QACA,MACA,QACA,UACA,WACA,WACA,aACA,YACA,MACA,cACA,QACA,YACA,OACA,YACA,gBACA,kBACA,KACA,WACA,cACA,YACA,cACA,OACA,OACA,QACA,SACA,UACA,SACA,QACA,QACA,OACA,QACA,SACA,UACA,UACA,OACA,WACA,QACA,OACA,OACA,QACA,OACA,U,kiCCvZJ,IAAMpL,GAAmBwB,GAAc,CAErC,OACA,0BACA,OACA,QACA,WACA,SACA,SACA,eACA,WACA,SACA,uBAGA,gBACA,SAEA,SACA,MACA,mBAEA,gBAEA,iBAEA,eACA,oDACA,aAEA,wCACA,eACA,yBAEA,cACA,MACA,0BACA,eAGA,iCACA,gBACA,YACA,gBACA,aACA,qBACA,oBACA,eACA,gBACA,mBACA,aACA,cACA,WACA,iBACA,gBACA,qBACA,SACA,qBACA,oBACA,4BACA,2BACA,4BACA,kBACA,cACA,cACA,mBACA,sBACA,UACA,wBACA,oBACA,oBACA,0BACA,eACA,WACA,aACA,yBACA,yBACA,WACA,+BACA,0BACA,gBACA,gCACA,6BACA,eACA,YACA,aACA,oBACA,OACA,WACA,kBACA,iBACA,mBACA,WACA,qBACA,gBACA,aACA,uBACA,uBACA,oBACA,mBACA,yBACA,iBACA,eACA,UACA,YACA,mBACA,iBACA,oBACA,WACA,yBACA,0BACA,QACA,YACA,kBACA,wBACA,QACA,WACA,eACA,QACA,aACA,eACA,oBACA,UACA,SACA,qBACA,UACA,kBACA,qBACA,YACA,qBACA,mBACA,YACA,4BACA,QACA,oBACA,UACA,yBACA,2BACA,oBACA,gBACA,UACA,uBACA,qBACA,oBACA,qBACA,qBACA,6BACA,qBACA,SACA,SACA,aACA,OACA,QACA,WACA,OACA,SACA,uBACA,kBACA,sBACA,OACA,6BACA,WACA,eACA,6BACA,uBACA,cACA,UACA,qBACA,UACA,eACA,gBACA,eACA,YACA,gBACA,aACA,gBACA,qBACA,kBACA,iBACA,gBACA,UACA,QACA,iBACA,WACA,8BACA,UACA,OACA,oBACA,OACA,iBACA,aACA,YACA,0BAGIvB,GAAwBuB,GAAc,CAAC,cAAe,SAAU,cAEhErB,GAAgBqB,GAAc,CAClC,OACA,qCACA,uBAEA,0BAGIpB,GAAkB,CAAC,YAAa,aAGjBiL,GAAAA,SAAAA,I,8xBAGnB,WACE,OAAO,IAAItM,GAAU,CACnBiB,iBAAAA,GACAC,sBAAAA,GACAE,cAAAA,GACAD,yBAA0B,CAAC,OAAQ,QACnCE,gBAAAA,GACAnE,iBAAkBuG,GAClBhC,sBAAuBqC,GACvBjC,YAAa,CAAC,CAAE3D,MAAO,KAAMF,SAAU,CAAC,OACxC+C,WAAY,CAAC,KAAM,MACnB5D,WAAY,CAAEoB,MAAO,KAAMxB,KAAM,OACjCvC,WAAY,CAAEwH,MAAO,CAAC,KAAMC,OAAQ,CAAC,MACrCH,UAAWwK,EAAcxK,WAG5B,M,uEAnBkBwK,CAAsBpS,GAClCoS,GAAAA,UAAY,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MCrNhF,IAAM7I,GAAWzR,EAAgB,CAGtCkW,IAAK,CACH,QACA,WACA,SACA,aACA,UACA,SACA,SACA,MACA,QACA,QACA,UACA,YACA,aACA,aACA,gBACA,uBACA,cACA,YACA,MACA,OACA,QACA,SACA,UACA,MACA,MACA,aACA,UACA,cACA,QACA,KACA,MACA,QACA,aACA,MACA,YACA,aACA,MACA,aACA,QACA,KACA,SACA,YACA,gBACA,OACA,iBACA,mBACA,YACA,6BACA,oBACA,2BACA,qBACA,eACA,MACA,iBACA,OACA,QACA,aACA,kCACA,SACA,iBACA,YACA,WACA,QACA,UACA,iBACA,oBACA,SACA,QACA,UACA,SACA,SACA,UACA,MACA,OACA,OACA,UACA,YACA,OACA,MACA,QACA,eACA,UACA,KACA,OACA,cACA,QACA,OACA,oBACA,SACA,UACA,UACA,WACA,OACA,UACA,QACA,SACA,OACA,YACA,kBACA,UACA,QACA,aACA,qBACA,qBACA,WACA,YACA,QACA,QACA,SACA,oBACA,QACA,UACA,YACA,MACA,WACA,UACA,YACA,SACA,WACA,UACA,cACA,2BACA,UACA,WACA,SACA,YACA,mBACA,UACA,UACA,aACA,cACA,aACA,eACA,YACA,gBACA,aACA,cACA,SACA,aACA,WACA,UACA,WACA,mBACA,aACA,UACA,OACA,QACA,OACA,SACA,cACA,QACA,OACA,MACA,YACA,UACA,kBACA,eACA,iBACA,0BACA,yBACA,eACA,oBACA,eACA,SACA,QACA,OACA,WACA,YACA,OACA,WACA,MACA,WACA,kBACA,aACA,aACA,aACA,MACA,UACA,UACA,UACA,WACA,aACA,WACA,UACA,UACA,UACA,kBACA,SACA,YACA,aACA,aACA,OACA,WACA,SACA,gBACA,aACA,eACA,YACA,UACA,UACA,cACA,OACA,WACA,cACA,oBACA,MACA,KACA,WACA,SACA,SACA,OACA,gBACA,OACA,OACA,YACA,aACA,UACA,WACA,OACA,OACA,WACA,OACA,SACA,SACA,WACA,WACA,YACA,MACA,SACA,UACA,OACA,SACA,SACA,UACA,WACA,QACA,SACA,SACA,UACA,YACA,YACA,UACA,SACA,OACA,UACA,WACA,YACA,WACA,gBACA,gBACA,YACA,aACA,aACA,YACA,wBACA,UACA,QACA,SACA,QACA,QACA,SACA,OACA,QACA,OACA,YACA,QACA,QACA,SACA,SACA,QACA,YACA,MACA,QACA,sBACA,yBACA,aACA,UACA,SACA,UACA,SACA,OACA,KACA,SACA,OACA,WACA,WACA,YACA,KACA,MACA,aACA,MACA,OACA,WACA,YACA,iBACA,WACA,gBACA,SACA,4BACA,QACA,UACA,SACA,QACA,WACA,SACA,OACA,SACA,UACA,4BACA,OACA,kBACA,SACA,OACA,SACA,uBACA,gBACA,YACA,OACA,UACA,OACA,QACA,OACA,mBACA,cACA,cACA,aACA,WACA,KACA,SACA,QACA,YACA,YACA,WACA,SACA,KACA,YACA,YACA,cACA,QACA,UACA,SACA,UACA,WACA,gBACA,OACA,aACA,YACA,SACA,SACA,QACA,QACA,QACA,cACA,SACA,gBACA,WACA,UACA,KACA,MACA,OACA,OACA,OACA,OACA,OACA,UACA,6BACA,mBACA,YACA,WACA,OACA,UACA,YACA,UACA,OACA,OACA,QACA,MACA,iBACA,OACA,OACA,UACA,QACA,MACA,WACA,QACA,OACA,aACA,UACA,SACA,aACA,WACA,OACA,UACA,OACA,YACA,QACA,SACA,OACA,QACA,UACA,OACA,QACA,QACA,SACA,OACA,iBACA,OACA,QACA,YACA,iBACA,WACA,OACA,OACA,WACA,WACA,OACA,eACA,MACA,MACA,aACA,qBACA,UACA,SACA,QACA,eACA,WACA,kBACA,aACA,2BACA,kBACA,kCACA,WACA,MACA,MACA,aACA,YACA,aACA,SACA,SACA,oBACA,0BACA,SACA,qBACA,yBACA,mBACA,QACA,WACA,cACA,YACA,WACA,QACA,qBACA,gBACA,WACA,MACA,OACA,QACA,WACA,SACA,QACA,OACA,MACA,QACA,QACA,YACA,WACA,UACA,QACA,OACA,KACA,OACA,OACA,mBACA,UACA,MACA,UACA,SACA,SACA,qBACA,mBACA,SACA,YACA,QACA,OACA,WACA,QACA,UACA,WACA,SACA,KACA,MACA,UACA,SACA,UACA,OACA,KACA,SACA,OACA,OACA,WACA,eACA,WACA,YACA,kBACA,SACA,UACA,aACA,KACA,QACA,oBACA,SACA,MACA,eACA,QACA,UACA,OACA,WACA,UACA,QACA,QACA,YACA,SACA,SACA,UACA,UACA,YACA,eACA,eACA,aACA,UACA,WACA,qBACA,QACA,gBACA,WACA,YACA,WACA,YACA,UACA,OACA,QACA,YACA,UACA,OACA,QACA,OACA,YACA,YACA,UACA,WACA,UACA,QACA,aACA,aACA,YACA,aACA,UACA,cACA,UACA,WACA,UACA,UACA,QACA,QACA,UACA,UACA,QACA,gBACA,QACA,QACA,OACA,OACA,QACA,QACA,OACA,WACA,YACA,UACA,SACA,YACA,aACA,YACA,MACA,YACA,aACA,UACA,SACA,UACA,WACA,UACA,SACA,OACA,SACA,SACA,SACA,SACA,gBACA,SACA,aACA,QACA,kBACA,UACA,UACA,YACA,cACA,cACA,UACA,WACA,gBACA,QACA,UACA,UACA,WACA,SACA,aACA,QACA,SACA,YACA,UACA,UACA,UACA,SACA,QACA,kBACA,kBACA,sBACA,QACA,QACA,WACA,SACA,UACA,MACA,YACA,aACA,aACA,OACA,WACA,OACA,OACA,UACA,KACA,OACA,OACA,YACA,SACA,SACA,UACA,iBACA,SACA,SACA,SACA,qBACA,WACA,SACA,YACA,gBACA,YACA,YACA,WACA,YACA,SACA,eACA,SACA,eACA,SACA,UACA,eACA,MACA,QACA,2BACA,MACA,QACA,UACA,aACA,QACA,OACA,WACA,SACA,SACA,UACA,SACA,OACA,OACA,kBACA,UACA,WACA,WACA,YACA,aACA,4BACA,OACA,SACA,SACA,UACA,sBACA,WACA,MACA,iBACA,oBACA,YACA,sBACA,eACA,WACA,eACA,iBACA,mBACA,WACA,aACA,QACA,SACA,OACA,UACA,gBACA,SACA,SACA,QACA,UACA,QACA,YACA,gBACA,OACA,QACA,SACA,mBACA,iBACA,cACA,QACA,SACA,QACA,iBACA,SACA,aACA,OACA,cACA,OACA,OACA,WACA,YACA,YACA,aACA,YACA,aACA,OACA,OACA,OACA,UACA,YACA,eACA,gBACA,WACA,WACA,UACA,WACA,KACA,YACA,cACA,WACA,YACA,cACA,6BACA,QACA,UACA,WACA,OACA,QACA,WACA,UACA,YACA,WACA,OACA,QACA,YACA,cACA,YACA,OACA,cACA,aACA,SACA,UACA,QACA,SACA,YACA,UACA,WACA,UACA,SACA,WACA,UACA,WACA,QACA,SACA,UACA,QACA,MACA,OACA,QACA,QACA,WACA,WACA,gBACA,QACA,SACA,QACA,WACA,YACA,QACA,SACA,YACA,UACA,eACA,YACA,WACA,UACA,UACA,OACA,OACA,WACA,SACA,OACA,QACA,WACA,OACA,OACA,QACA,QACA,aACA,SACA,OACA,UACA,SACA,gBACA,OACA,WACA,UACA,QACA,UACA,MACA,OACA,aACA,MACA,WACA,UC70BSpE,GAAY9R,EAAgB,CAgBvCkW,IAAK,CACH,MACA,OACA,UACA,UACA,cACA,cACA,YACA,wBACA,mCACA,gCACA,iCACA,8BACA,oBACA,QACA,OACA,OACA,QACA,MACA,MACA,SACA,UACA,YACA,SACA,UACA,OACA,OACA,UACA,OACA,mBACA,cACA,UACA,WACA,eACA,YACA,UACA,SACA,YACA,gBACA,OACA,UACA,aACA,MACA,MACA,QACA,YACA,UACA,eACA,eACA,eACA,oBACA,eACA,UACA,WACA,OACA,WACA,WACA,cACA,WACA,aACA,MACA,UACA,aACA,YACA,YACA,SACA,UACA,UACA,aACA,MACA,cACA,MACA,qBACA,MACA,UACA,QACA,QACA,cACA,QACA,SACA,aACA,cACA,YACA,gBACA,iBACA,qBACA,qBACA,uBACA,qBACA,mBACA,sBACA,kBACA,4BACA,gBACA,oBACA,oBACA,kBACA,sBACA,kBACA,iBACA,2BACA,aACA,aACA,WACA,WACA,eACA,MACA,YACA,OACA,cACA,KACA,SACA,YACA,YACA,aACA,aACA,UACA,SACA,QACA,WACA,KACA,UACA,WACA,6BACA,2BACA,6BACA,yBACA,uBACA,yBACA,kBACA,sBACA,oBACA,sBACA,sBACA,gBACA,cACA,kBACA,gBACA,kBACA,qBACA,mBACA,qBACA,MACA,WACA,aACA,QACA,OACA,QACA,OACA,SACA,OACA,KACA,YACA,iBACA,SACA,MACA,QACA,OACA,OACA,QACA,QACA,MACA,MACA,SACA,cACA,MACA,SACA,MACA,QACA,YACA,iBACA,MACA,MACA,YACA,QACA,SACA,eACA,eACA,kBACA,kBACA,KACA,QACA,WACA,MACA,QACA,UACA,QACA,UACA,OACA,OACA,SACA,SACA,UACA,UACA,QACA,QACA,QACA,YACA,aACA,OACA,QACA,SACA,SACA,cACA,OACA,OACA,UACA,OACA,MACA,QACA,QACA,UACA,cACA,kBACA,QACA,OACA,SACA,aACA,cACA,cACA,UACA,SACA,YACA,kBACA,MACA,WACA,MACA,OACA,WACA,cACA,cACA,YACA,eACA,gBACA,cACA,YACA,UACA,UACA,UACA,YACA,aACA,eACA,OACA,QACA,WACA,QACA,QACA,iBACA,YACA,QACA,OACA,WACA,WACA,gBACA,OACA,SACA,WACA,UACA,WACA,aACA,UACA,OACA,UACA,aACA,OAGA,MACA,UACA,WACA,YACA,MACA,UACA,SACA,UACA,MACA,UACA,QACA,QACA,SACA,mBACA,OACA,WACA,YACA,OACA,OACA,OACA,gBACA,UACA,mBACA,SACA,YACA,OACA,OACA,U,kiCCjTJ,IAAMjH,GAAmBwB,GAAc,CAErC,OACA,wCACA,OACA,QACA,WACA,SACA,WACA,QACA,SAGA,yBACA,SACA,iBAEA,SACA,MAEA,gBAEA,mBAEA,cACA,qFACA,4DACA,0CACA,qCAEA,uBACA,eACA,6BACA,gBACA,kBACA,SACA,mBAGA,iBACA,WACA,2BACA,iBACA,iBACA,sBACA,aACA,aACA,gBACA,kBACA,cACA,kBACA,kBACA,SACA,uBACA,cACA,OACA,SACA,mBACA,4BACA,+BACA,sBACA,cACA,iBACA,yBACA,QACA,SACA,kBACA,eACA,eACA,cACA,mBACA,kBACA,uBACA,cACA,cACA,qBACA,WACA,kBACA,kBACA,KACA,gBACA,gBACA,aACA,YACA,gBACA,iBACA,qBACA,YACA,YACA,YACA,UACA,UACA,QACA,QACA,QACA,UACA,OACA,kBACA,kBACA,YACA,wBACA,WACA,2BACA,cACA,kBACA,iBACA,UACA,oBACA,uBACA,oBACA,oBACA,cACA,eACA,UACA,qBACA,QACA,eACA,gBACA,gBACA,cACA,UACA,mBACA,qBACA,SACA,WACA,wBACA,YACA,oBACA,mBACA,YACA,eACA,qBACA,WACA,kBACA,OACA,qBACA,iBACA,eACA,uBACA,uBACA,uBACA,wBACA,oBACA,mBACA,mBACA,iBACA,cACA,eACA,cACA,qBACA,uBACA,cACA,aACA,qBACA,mBACA,eACA,kBACA,sBACA,wBACA,mBACA,eACA,gBACA,uBACA,sBACA,gBACA,aACA,mBACA,cACA,oBACA,cACA,iBACA,gBACA,WACA,oBACA,kBACA,0BACA,iBACA,gBACA,cACA,oBACA,yBACA,gBACA,eACA,mBACA,aACA,gBACA,iBACA,kBACA,gBACA,MACA,KAEA,UACA,QACA,OACA,SACA,SACA,UAGIvB,GAAwBuB,GAAc,CAC1C,yBACA,SACA,YACA,UAGIrB,GAAgBqB,GAAc,CAClC,OACA,qCACA,uBACA,sCAEA,kBAGIpB,GAAkB,CAAC,YAAa,YAAa,iBAE9BkL,GAAAA,SAAAA,I,8xBAGnB,WACE,OAAO,IAAIvM,GAAU,CACnBiB,iBAAAA,GACAC,sBAAAA,GACAE,cAAAA,GACAD,yBAA0B,CAAC,OAAQ,OAAQ,UAC3CE,gBAAAA,GACAE,yBAA0B,CAAC,MAAO,MAClCrE,iBAAkBuG,GAClBhC,sBAAuBqC,GAEvBjC,YAAa,CACX,CAAE3D,MAAO,KAAMF,SAAU,CAAC,IAAK,MAC/B,CAAEE,MAAO,KAAMF,SAAU,CAAC,IAAK,OAEjC+C,WAAY,CAAC,MACb5D,WAAY,CAAEoB,MAAO,IAAKxB,KAAM,IAAKyB,sBAAsB,GAC3DkD,cAAe,CACb,CAAE9B,MAAO,mBACT,CAAE1B,MAAO,KAAMF,SAAU,CAAC,KAAMC,eAAe,IAEjDuC,iBAAkB,CAAC,KAAM,KACzBsB,UAAWyK,EAAuBzK,UAClCzB,YAAAA,IAEH,M,uEA5BkBkM,CAA+BrS,GA+BpD,SAASmG,GAAYpS,GACnB,OAAOA,EAAOmF,KAAI,SAAClH,EAAOyG,GACxB,IAAMyV,EAAYna,EAAO0E,EAAI,IAAMlH,EACnC,OAAIU,EAAQmB,IAAIpB,IAA6B,MAAnBkc,EAAU7c,KAE3B,OAAP,wBAAYW,GAAK,CAAER,KAAMR,EAAU2B,yBAE9BX,CACR,GACF,C,4zDAvCQqgB,GAAAA,UAAY,CAAC,IAAK,KAAM,MAAO,KAAM,KAAM,KAAM,MC/MnD,IAAMC,GAAa,CACxBC,SAAU/F,GACVgG,IAAK/E,GACLgF,KAAM1E,GACN2E,QAASzE,GACT0E,MAAOxE,GACPyE,KAAMxE,GACNyE,MAAO3D,GACP4D,WAAY3C,GACZ4C,SAAU9B,GACV+B,cAAeX,GACfY,MAAO9B,GACP+B,IAAK5B,GACL6B,OAAQ/B,GACRgC,MAAO3B,GACP4B,KAAMjB,IAGKkB,GAAoBzjB,OAAO8T,KAAK2O,IAEvCiB,GAAgC,CACpCzU,SAAU,MACVhO,SAAU,EACVD,SAAS,EACT8O,YAAa,WACbhP,YAAa,WACbqO,uBAAwB,SACxBiC,eAAe,EACf5I,cAAe,QACfyB,gBAAiB,GACjBgH,oBAAqB,EACrB/B,gBAAgB,EAChBgC,wBAAwB,GAUb1D,GAAS,SAACjF,GAA2D,IAA5C1H,EAA4C,uDAAd,CAAC,EACnE,GAAqB,iBAAV0H,EACT,MAAM,IAAIsB,MAAM,wDAA0D,GAAOtB,IAGnF,IAAMob,EAAUC,GAAe,OAAD,wBACzBF,IACA7iB,IAGCgjB,EACwB,iBAArBF,EAAQ1U,SAAwBwT,GAAWkB,EAAQ1U,UAAY0U,EAAQ1U,SAEhF,OAAO,IAAI4U,EAAaF,GAASnW,OAAOjF,EACzC,EAEYub,GAAb,a,sRAAA,U,MAAA,G,EAAA,E,uJAAA,8D,EAAA,E,oDAAA,KAAiCja,QAEjC,SAAS+Z,GAAe/iB,GACtB,GAA4B,iBAAjBA,EAAIoO,WAA0BwU,GAAkBjU,SAAS3O,EAAIoO,UACtE,MAAM,IAAI6U,GAAJ,mCAA4CjjB,EAAIoO,WAGxD,GAAI,mBAAoBpO,EACtB,MAAM,IAAIijB,GAAY,+CAExB,GAAI,2BAA4BjjB,EAC9B,MAAM,IAAIijB,GAAY,uDAExB,GAAI,4BAA6BjjB,EAC/B,MAAM,IAAIijB,GAAY,wDAExB,GAAI,YAAajjB,EACf,MAAM,IAAIijB,GAAY,wCAGxB,GAAIjjB,EAAIoJ,iBAAmB,EACzB,MAAM,IAAI6Z,GAAJ,mEACwDjjB,EAAIoJ,gBAD5D,cAKR,GAA0B,WAAtBpJ,EAAI2H,eAA8B3H,EAAIG,QACxC,MAAM,IAAI8iB,GACR,2EAYN,IAAwBziB,EAHtB,OALIR,EAAIQ,WAQcA,EARYR,EAAIQ,kBASA0iB,MAAQ1iB,EAASrB,OAAOkI,OAAO7G,IAClD2iB,OAAM,SAAAC,GAAC,MAAiB,iBAANA,CAAX,KARxBC,QAAQC,KAAK,0DAGRtjB,CACR,C","sources":["webpack://sqlFormatter/webpack/universalModuleDefinition","webpack://sqlFormatter/webpack/bootstrap","webpack://sqlFormatter/webpack/runtime/define property getters","webpack://sqlFormatter/webpack/runtime/hasOwnProperty shorthand","webpack://sqlFormatter/webpack/runtime/make namespace object","webpack://sqlFormatter/./src/formatter/config.ts","webpack://sqlFormatter/./src/lexer/token.ts","webpack://sqlFormatter/./src/formatter/Params.ts","webpack://sqlFormatter/./src/parser/ast.ts","webpack://sqlFormatter/./src/parser/Parser.ts","webpack://sqlFormatter/./src/utils.ts","webpack://sqlFormatter/./src/formatter/formatCommaPositions.ts","webpack://sqlFormatter/./src/formatter/Layout.ts","webpack://sqlFormatter/./src/formatter/InlineBlock.ts","webpack://sqlFormatter/./src/formatter/ExpressionFormatter.ts","webpack://sqlFormatter/./src/formatter/tabularStyle.ts","webpack://sqlFormatter/./src/formatter/Indentation.ts","webpack://sqlFormatter/./src/formatter/Formatter.ts","webpack://sqlFormatter/./src/formatter/formatAliasPositions.ts","webpack://sqlFormatter/./src/lexer/regexUtil.ts","webpack://sqlFormatter/./src/lexer/regexFactory.ts","webpack://sqlFormatter/./src/lexer/TokenizerEngine.ts","webpack://sqlFormatter/./src/lexer/Tokenizer.ts","webpack://sqlFormatter/./src/expandPhrases.ts","webpack://sqlFormatter/./src/languages/bigquery/bigquery.keywords.ts","webpack://sqlFormatter/./src/languages/bigquery/bigquery.functions.ts","webpack://sqlFormatter/./src/languages/bigquery/bigquery.formatter.ts","webpack://sqlFormatter/./src/languages/db2/db2.functions.ts","webpack://sqlFormatter/./src/languages/db2/db2.keywords.ts","webpack://sqlFormatter/./src/languages/db2/db2.formatter.ts","webpack://sqlFormatter/./src/languages/hive/hive.functions.ts","webpack://sqlFormatter/./src/languages/hive/hive.keywords.ts","webpack://sqlFormatter/./src/languages/hive/hive.formatter.ts","webpack://sqlFormatter/./src/languages/mariadb/mariadb.keywords.ts","webpack://sqlFormatter/./src/languages/mariadb/mariadb.functions.ts","webpack://sqlFormatter/./src/languages/mariadb/mariadb.formatter.ts","webpack://sqlFormatter/./src/languages/mysql/mysql.keywords.ts","webpack://sqlFormatter/./src/languages/mysql/mysql.functions.ts","webpack://sqlFormatter/./src/languages/mysql/mysql.formatter.ts","webpack://sqlFormatter/./src/languages/n1ql/n1ql.functions.ts","webpack://sqlFormatter/./src/languages/n1ql/n1ql.keywords.ts","webpack://sqlFormatter/./src/languages/n1ql/n1ql.formatter.ts","webpack://sqlFormatter/./src/languages/plsql/plsql.keywords.ts","webpack://sqlFormatter/./src/languages/plsql/plsql.functions.ts","webpack://sqlFormatter/./src/languages/plsql/plsql.formatter.ts","webpack://sqlFormatter/./src/languages/postgresql/postgresql.functions.ts","webpack://sqlFormatter/./src/languages/postgresql/postgresql.keywords.ts","webpack://sqlFormatter/./src/languages/postgresql/postgresql.formatter.ts","webpack://sqlFormatter/./src/languages/redshift/redshift.functions.ts","webpack://sqlFormatter/./src/languages/redshift/redshift.keywords.ts","webpack://sqlFormatter/./src/languages/redshift/redshift.formatter.ts","webpack://sqlFormatter/./src/languages/spark/spark.keywords.ts","webpack://sqlFormatter/./src/languages/spark/spark.functions.ts","webpack://sqlFormatter/./src/languages/spark/spark.formatter.ts","webpack://sqlFormatter/./src/languages/sqlite/sqlite.functions.ts","webpack://sqlFormatter/./src/languages/sqlite/sqlite.keywords.ts","webpack://sqlFormatter/./src/languages/sqlite/sqlite.formatter.ts","webpack://sqlFormatter/./src/languages/sql/sql.functions.ts","webpack://sqlFormatter/./src/languages/sql/sql.keywords.ts","webpack://sqlFormatter/./src/languages/sql/sql.formatter.ts","webpack://sqlFormatter/./src/languages/trino/trino.functions.ts","webpack://sqlFormatter/./src/languages/trino/trino.keywords.ts","webpack://sqlFormatter/./src/languages/trino/trino.formatter.ts","webpack://sqlFormatter/./src/languages/tsql/tsql.functions.ts","webpack://sqlFormatter/./src/languages/tsql/tsql.keywords.ts","webpack://sqlFormatter/./src/languages/tsql/tsql.formatter.ts","webpack://sqlFormatter/./src/languages/singlestoredb/singlestoredb.keywords.ts","webpack://sqlFormatter/./src/languages/singlestoredb/singlestoredb.functions.ts","webpack://sqlFormatter/./src/languages/singlestoredb/singlestoredb.formatter.ts","webpack://sqlFormatter/./src/sqlFormatter.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sqlFormatter\"] = factory();\n\telse\n\t\troot[\"sqlFormatter\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import type { FormatOptions } from 'src/FormatOptions';\n\n// Utility functions for config options\n\n/**\n * Creates a string to use for one step of indentation.\n */\nexport function indentString(cfg: FormatOptions): string {\n  if (cfg.indentStyle === 'tabularLeft' || cfg.indentStyle === 'tabularRight') {\n    return ' '.repeat(10);\n  }\n  if (cfg.useTabs) {\n    return '\\t';\n  }\n  return ' '.repeat(cfg.tabWidth);\n}\n\n/**\n * True when indentStyle is one of the tabular ones.\n */\nexport function isTabularStyle(cfg: FormatOptions): boolean {\n  return cfg.indentStyle === 'tabularLeft' || cfg.indentStyle === 'tabularRight';\n}\n","/** Token type enum for all possible Token categories */\nexport enum TokenType {\n  QUOTED_IDENTIFIER = 'QUOTED_IDENTIFIER',\n  IDENTIFIER = 'IDENTIFIER',\n  STRING = 'STRING',\n  VARIABLE = 'VARIABLE',\n  RESERVED_KEYWORD = 'RESERVED_KEYWORD',\n  RESERVED_FUNCTION_NAME = 'RESERVED_FUNCTION_NAME',\n  RESERVED_LOGICAL_OPERATOR = 'RESERVED_LOGICAL_OPERATOR',\n  RESERVED_PHRASE = 'RESERVED_PHRASE',\n  RESERVED_DEPENDENT_CLAUSE = 'RESERVED_DEPENDENT_CLAUSE',\n  RESERVED_SET_OPERATION = 'RESERVED_SET_OPERATION',\n  RESERVED_COMMAND = 'RESERVED_COMMAND',\n  RESERVED_JOIN = 'RESERVED_JOIN',\n  RESERVED_CASE_START = 'RESERVED_CASE_START',\n  RESERVED_CASE_END = 'RESERVED_CASE_END',\n  OPERATOR = 'OPERATOR',\n  COMMA = 'COMMA',\n  OPEN_PAREN = 'OPEN_PAREN',\n  CLOSE_PAREN = 'CLOSE_PAREN',\n  LINE_COMMENT = 'LINE_COMMENT',\n  BLOCK_COMMENT = 'BLOCK_COMMENT',\n  NUMBER = 'NUMBER',\n  NAMED_PARAMETER = 'NAMED_PARAMETER',\n  QUOTED_PARAMETER = 'QUOTED_PARAMETER',\n  NUMBERED_PARAMETER = 'NUMBERED_PARAMETER',\n  POSITIONAL_PARAMETER = 'POSITIONAL_PARAMETER',\n  DELIMITER = 'DELIMITER',\n  EOF = 'EOF',\n}\n\n/** Struct to store the most basic cohesive unit of language grammar */\nexport interface Token {\n  type: TokenType;\n  raw: string; // The raw original text that was matched\n  text: string; // Cleaned up text e.g. keyword converted to uppercase and extra spaces removed\n  key?: string;\n  start: number; // 0-based index of the token in the whole query string\n  end: number; // 0-based index of where the token ends in the query string\n  precedingWhitespace?: string; // Whitespace before this token, if any\n}\n\n/**\n * For use as a \"missing token\"\n * e.g. in lookAhead and lookBehind to avoid dealing with null values\n */\nexport const EOF_TOKEN: Token = {\n  type: TokenType.EOF,\n  raw: '«EOF»',\n  text: '«EOF»',\n  start: Infinity,\n  end: Infinity,\n};\n\n/** Checks if two tokens are equivalent */\nexport const testToken =\n  (compareToken: { type: TokenType; text: string }) =>\n  (token: Token): boolean =>\n    token.type === compareToken.type && token.text === compareToken.text;\n\n/** Util object that allows for easy checking of Reserved Keywords */\nexport const isToken = {\n  AS: testToken({ text: 'AS', type: TokenType.RESERVED_KEYWORD }),\n  AND: testToken({ text: 'AND', type: TokenType.RESERVED_LOGICAL_OPERATOR }),\n  ARRAY: testToken({ text: 'ARRAY', type: TokenType.RESERVED_KEYWORD }),\n  BETWEEN: testToken({ text: 'BETWEEN', type: TokenType.RESERVED_KEYWORD }),\n  CASE: testToken({ text: 'CASE', type: TokenType.RESERVED_CASE_START }),\n  CAST: testToken({ text: 'CAST', type: TokenType.RESERVED_FUNCTION_NAME }),\n  BY: testToken({ text: 'BY', type: TokenType.RESERVED_KEYWORD }),\n  END: testToken({ text: 'END', type: TokenType.RESERVED_CASE_END }),\n  FROM: testToken({ text: 'FROM', type: TokenType.RESERVED_COMMAND }),\n  LIMIT: testToken({ text: 'LIMIT', type: TokenType.RESERVED_COMMAND }),\n  SELECT: (token: Token) =>\n    /^SELECT\\b/.test(token.text) && token.type === TokenType.RESERVED_COMMAND,\n  SET: testToken({ text: 'SET', type: TokenType.RESERVED_COMMAND }),\n  STRUCT: testToken({ text: 'STRUCT', type: TokenType.RESERVED_KEYWORD }),\n  TABLE: testToken({ text: 'TABLE', type: TokenType.RESERVED_KEYWORD }),\n  WINDOW: testToken({ text: 'WINDOW', type: TokenType.RESERVED_COMMAND }),\n  WITH: testToken({ text: 'WITH', type: TokenType.RESERVED_COMMAND }),\n};\n\n/** Checks if token is any Reserved Keyword or Command */\nexport const isReserved = (token: Token): boolean =>\n  token.type === TokenType.RESERVED_KEYWORD ||\n  token.type === TokenType.RESERVED_FUNCTION_NAME ||\n  token.type === TokenType.RESERVED_LOGICAL_OPERATOR ||\n  token.type === TokenType.RESERVED_PHRASE ||\n  token.type === TokenType.RESERVED_DEPENDENT_CLAUSE ||\n  token.type === TokenType.RESERVED_COMMAND ||\n  token.type === TokenType.RESERVED_SET_OPERATION ||\n  token.type === TokenType.RESERVED_JOIN ||\n  token.type === TokenType.RESERVED_CASE_START ||\n  token.type === TokenType.RESERVED_CASE_END;\n\n/** checks if token is one of the parameter tokens */\nexport const isParameter = (token: Token): boolean =>\n  token.type === TokenType.NUMBERED_PARAMETER ||\n  token.type === TokenType.NAMED_PARAMETER ||\n  token.type === TokenType.POSITIONAL_PARAMETER ||\n  token.type === TokenType.QUOTED_PARAMETER;\n","import { type Token } from '../lexer/token';\n\nexport type ParamItems = { [k: string]: string };\n\n/**\n * Handles placeholder replacement with given params.\n */\nexport default class Params {\n  /**\n   * @param {ParamItems} params\n   */\n  params: ParamItems | string[] | undefined;\n  index: number;\n\n  constructor(params: ParamItems | string[] | undefined) {\n    this.params = params;\n    this.index = 0;\n  }\n\n  /**\n   * Returns param value that matches given placeholder with param key.\n   * @param {Token} token\n   * @return {string} param or token.text when params are missing\n   */\n  get({ key, text }: Token): string {\n    if (!this.params) {\n      return text;\n    }\n\n    if (key) {\n      return (this.params as ParamItems)[key];\n    }\n    return (this.params as string[])[this.index++];\n  }\n}\n","import { Token } from 'src/lexer/token';\n\nexport enum NodeType {\n  statement = 'statement',\n  clause = 'clause',\n  set_operation = 'set_operation',\n  function_call = 'function_call',\n  array_subscript = 'array_subscript',\n  parenthesis = 'parenthesis',\n  between_predicate = 'between_predicate',\n  limit_clause = 'limit_clause',\n  all_columns_asterisk = 'all_columns_asterisk',\n  token = 'token',\n}\n\nexport type Statement = {\n  type: NodeType.statement;\n  children: AstNode[];\n  hasSemicolon: boolean;\n};\n\nexport type Clause = {\n  type: NodeType.clause;\n  nameToken: Token;\n  children: AstNode[];\n};\n\nexport type SetOperation = {\n  type: NodeType.set_operation;\n  nameToken: Token;\n  children: AstNode[];\n};\n\n// Wrapper for plain nodes inside AST\nexport type TokenNode = {\n  type: NodeType.token;\n  token: Token;\n};\n\nexport type FunctionCall = {\n  type: NodeType.function_call;\n  nameToken: Token;\n  parenthesis: Parenthesis;\n};\n\n// <ident>[<expr>]\nexport type ArraySubscript = {\n  type: NodeType.array_subscript;\n  arrayToken: Token;\n  parenthesis: Parenthesis;\n};\n\nexport type Parenthesis = {\n  type: NodeType.parenthesis;\n  children: AstNode[];\n  openParen: string;\n  closeParen: string;\n};\n\n// BETWEEN <expr1> AND <expr2>\nexport type BetweenPredicate = {\n  type: NodeType.between_predicate;\n  betweenToken: Token;\n  expr1: Token;\n  andToken: Token;\n  expr2: Token;\n};\n\n// LIMIT <count>\n// LIMIT <offset>, <count>\nexport type LimitClause = {\n  type: NodeType.limit_clause;\n  limitToken: Token;\n  count: AstNode[];\n  offset?: AstNode[];\n};\n\n// The \"*\" operator used in SELECT *\nexport type AllColumnsAsterisk = {\n  type: NodeType.all_columns_asterisk;\n};\n\nexport type AstNode =\n  | Clause\n  | SetOperation\n  | FunctionCall\n  | ArraySubscript\n  | Parenthesis\n  | BetweenPredicate\n  | LimitClause\n  | AllColumnsAsterisk\n  | TokenNode;\n\nexport const isTokenNode = (node: AstNode): node is TokenNode => node.type === 'token';\n","/* eslint-disable no-cond-assign */\nimport { EOF_TOKEN, type Token, TokenType, isToken } from 'src/lexer/token';\nimport {\n  AllColumnsAsterisk,\n  ArraySubscript,\n  AstNode,\n  BetweenPredicate,\n  SetOperation,\n  Clause,\n  FunctionCall,\n  LimitClause,\n  NodeType,\n  Parenthesis,\n  Statement,\n  TokenNode,\n} from './ast';\n\n/**\n * A simple parser that creates a very rudimentary syntax tree.\n */\nexport default class Parser {\n  private index = 0;\n\n  constructor(private tokens: Token[]) {}\n\n  public parse(): Statement[] {\n    const statements: Statement[] = [];\n    let stat: Statement | undefined;\n    while ((stat = this.statement())) {\n      statements.push(stat);\n    }\n    return statements;\n  }\n\n  private statement(): Statement | undefined {\n    const children: AstNode[] = [];\n    while (true) {\n      if (this.look().type === TokenType.DELIMITER) {\n        this.next();\n        return { type: NodeType.statement, children, hasSemicolon: true };\n      } else if (this.look().type === TokenType.EOF) {\n        if (children.length > 0) {\n          return { type: NodeType.statement, children, hasSemicolon: false };\n        } else {\n          return undefined;\n        }\n      } else {\n        children.push(this.expression());\n      }\n    }\n  }\n\n  private expression(): AstNode {\n    return (\n      this.limitClause() ||\n      this.clause() ||\n      this.setOperation() ||\n      this.functionCall() ||\n      this.arraySubscript() ||\n      this.parenthesis() ||\n      this.betweenPredicate() ||\n      this.allColumnsAsterisk() ||\n      this.nextTokenNode()\n    );\n  }\n\n  private clause(): Clause | undefined {\n    if (this.look().type === TokenType.RESERVED_COMMAND) {\n      const name = this.next();\n      const children = this.expressionsUntilClauseEnd();\n      return { type: NodeType.clause, nameToken: name, children };\n    }\n    return undefined;\n  }\n\n  private setOperation(): SetOperation | undefined {\n    if (this.look().type === TokenType.RESERVED_SET_OPERATION) {\n      const name = this.next();\n      const children = this.expressionsUntilClauseEnd();\n      return { type: NodeType.set_operation, nameToken: name, children };\n    }\n    return undefined;\n  }\n\n  private functionCall(): FunctionCall | undefined {\n    if (this.look().type === TokenType.RESERVED_FUNCTION_NAME && this.look(1).text === '(') {\n      return {\n        type: NodeType.function_call,\n        nameToken: this.next(),\n        parenthesis: this.parenthesis() as Parenthesis,\n      };\n    }\n    return undefined;\n  }\n\n  private arraySubscript(): ArraySubscript | undefined {\n    if (\n      (this.look().type === TokenType.RESERVED_KEYWORD ||\n        this.look().type === TokenType.IDENTIFIER) &&\n      this.look(1).text === '['\n    ) {\n      return {\n        type: NodeType.array_subscript,\n        arrayToken: this.next(),\n        parenthesis: this.parenthesis() as Parenthesis,\n      };\n    }\n    return undefined;\n  }\n\n  private parenthesis(): Parenthesis | undefined {\n    if (this.look().type === TokenType.OPEN_PAREN) {\n      const children: AstNode[] = [];\n      const token = this.next();\n      const openParen = token.text;\n      let closeParen = '';\n      while (this.look().type !== TokenType.CLOSE_PAREN && this.look().type !== TokenType.EOF) {\n        children.push(this.expression());\n      }\n      if (this.look().type === TokenType.CLOSE_PAREN) {\n        closeParen = this.next().text;\n      }\n      return { type: NodeType.parenthesis, children, openParen, closeParen };\n    }\n    return undefined;\n  }\n\n  private betweenPredicate(): BetweenPredicate | undefined {\n    if (isToken.BETWEEN(this.look()) && isToken.AND(this.look(2))) {\n      return {\n        type: NodeType.between_predicate,\n        betweenToken: this.next(),\n        expr1: this.next(),\n        andToken: this.next(),\n        expr2: this.next(),\n      };\n    }\n    return undefined;\n  }\n\n  private limitClause(): LimitClause | undefined {\n    if (isToken.LIMIT(this.look())) {\n      const limitToken = this.next();\n      const expr1 = this.expressionsUntilClauseEnd(t => t.type === TokenType.COMMA);\n      if (this.look().type === TokenType.COMMA) {\n        this.next(); // Discard comma token\n        const expr2 = this.expressionsUntilClauseEnd();\n        return {\n          type: NodeType.limit_clause,\n          limitToken,\n          offset: expr1,\n          count: expr2,\n        };\n      } else {\n        return {\n          type: NodeType.limit_clause,\n          limitToken,\n          count: expr1,\n        };\n      }\n    }\n    return undefined;\n  }\n\n  private allColumnsAsterisk(): AllColumnsAsterisk | undefined {\n    if (this.look().text === '*' && isToken.SELECT(this.look(-1))) {\n      this.next();\n      return { type: NodeType.all_columns_asterisk };\n    }\n    return undefined;\n  }\n\n  private expressionsUntilClauseEnd(\n    extraPredicate: (token: Token) => boolean = () => false\n  ): AstNode[] {\n    const children: AstNode[] = [];\n    while (\n      this.look().type !== TokenType.RESERVED_COMMAND &&\n      this.look().type !== TokenType.RESERVED_SET_OPERATION &&\n      this.look().type !== TokenType.EOF &&\n      this.look().type !== TokenType.CLOSE_PAREN &&\n      this.look().type !== TokenType.DELIMITER &&\n      !extraPredicate(this.look())\n    ) {\n      children.push(this.expression());\n    }\n    return children;\n  }\n\n  // Returns current token without advancing the pointer\n  private look(ahead = 0): Token {\n    return this.tokens[this.index + ahead] || EOF_TOKEN;\n  }\n\n  // Returns current token and advances the pointer to next token\n  private next(): Token {\n    return this.tokens[this.index++] || EOF_TOKEN;\n  }\n\n  private nextTokenNode(): TokenNode {\n    return { type: NodeType.token, token: this.next() };\n  }\n}\n","export const dedupe = (arr: string[]) => [...new Set(arr)];\n\n// Last element from array\nexport const last = <T>(arr: T[]): T | undefined => arr[arr.length - 1];\n\n// Sorts strings by length, so that longer ones are first\n// Also sorts alphabetically after sorting by length.\nexport const sortByLengthDesc = (strings: string[]) =>\n  strings.sort((a, b) => b.length - a.length || a.localeCompare(b));\n\n/** Get length of longest string in list of strings */\nexport const maxLength = (strings: string[]) =>\n  strings.reduce((max, cur) => Math.max(max, cur.length), 0);\n\n// replaces long whitespace sequences with just one space\nexport const equalizeWhitespace = (s: string) => s.replace(/\\s+/gu, ' ');\n\n// Adds up all values in array\nexport const sum = (arr: number[]): number => {\n  let total = 0;\n  for (const x of arr) {\n    total += x;\n  }\n  return total;\n};\n\n// Used for flattening keyword lists\nexport const flatKeywordList = (obj: Record<string, string[]>): string[] =>\n  dedupe(Object.values(obj).flat());\n","import type { CommaPosition } from 'src/FormatOptions';\nimport { maxLength } from 'src/utils';\n\nconst PRECEDING_WHITESPACE_REGEX = /^\\s+/u;\n\n/**\n * Handles comma placement - either before, after or tabulated\n */\nexport default function formatCommaPositions(\n  query: string,\n  commaPosition: CommaPosition,\n  indent: string\n): string {\n  return groupCommaDelimitedLines(query.split('\\n'))\n    .flatMap(commaLines => {\n      if (commaLines.length === 1) {\n        return commaLines;\n      } else if (commaPosition === 'tabular') {\n        return formatTabular(commaLines);\n      } else if (commaPosition === 'before') {\n        return formatBefore(commaLines, indent);\n      } else {\n        throw new Error(`Unexpected commaPosition: ${commaPosition}`);\n      }\n    })\n    .join('\\n');\n}\n\n/**\n * Given lines like this:\n *\n *     [\n *       'SELECT',\n *       '  foo,',\n *       '  bar,',\n *       '  baz',\n *       'FROM'\n *     ]\n *\n * Returns groups like this:\n *\n *     [\n *       ['SELECT'],\n *       ['  foo,', '  bar,', '  baz'],\n *       ['FROM']\n *     ]\n */\nfunction groupCommaDelimitedLines(lines: string[]): string[][] {\n  const groups: string[][] = [];\n  for (let i = 0; i < lines.length; i++) {\n    const group = [lines[i]];\n    // when line ends with comma,\n    // gather together all following lines that also end with comma,\n    // plus one (which doesn't end with comma)\n    while (lines[i].match(/.*,$/)) {\n      i++;\n      group.push(lines[i]);\n    }\n    groups.push(group);\n  }\n  return groups;\n}\n\n// makes all lines the same length by appending spaces before comma\nfunction formatTabular(commaLines: string[]): string[] {\n  const maxLineLength = maxLength(commaLines);\n  return trimTrailingCommas(commaLines).map((line, i) => {\n    if (i === commaLines.length - 1) {\n      return line; // do not add comma for last item\n    }\n    return line + ' '.repeat(maxLineLength - line.length - 1) + ',';\n  });\n}\n\nfunction formatBefore(commaLines: string[], indent: string): string[] {\n  return trimTrailingCommas(commaLines).map((line, i) => {\n    if (i === 0) {\n      return line; // do not add comma for first item\n    }\n    const [whitespace] = line.match(PRECEDING_WHITESPACE_REGEX) || [''];\n    return (\n      removeLastIndent(whitespace, indent) +\n      indent.replace(/ {2}$/, ', ') + // add comma to the end of last indent\n      line.trimStart()\n    );\n  });\n}\n\nfunction removeLastIndent(whitespace: string, indent: string): string {\n  return whitespace.replace(new RegExp(indent + '$'), '');\n}\n\nfunction trimTrailingCommas(lines: string[]): string[] {\n  return lines.map(line => line.replace(/,$/, ''));\n}\n","import { last } from 'src/utils';\n\nimport Indentation from './Indentation';\n\n/** Whitespace modifiers to be used with add() method */\nexport enum WS {\n  SPACE, // Adds single space\n  NO_SPACE, // Removes preceding horizontal whitespace (if any)\n  NO_NEWLINE, // Removes all preceding whitespace (whether horizontal or vertical)\n  NEWLINE, // Adds single newline (and removes any preceding whitespace)\n  MANDATORY_NEWLINE, // Adds single newline that can't be removed by NO_NEWLINE\n  INDENT, // Adds indentation (as much as needed for current indentation level)\n  SINGLE_INDENT, // Adds whitespace for single indentation step\n}\n\nexport type LayoutItem = WS.SPACE | WS.SINGLE_INDENT | WS.NEWLINE | WS.MANDATORY_NEWLINE | string;\n\n/**\n * API for constructing SQL string (especially the whitespace part).\n *\n * It hides the internal implementation.\n * Originally it used plain string concatenation, which was expensive.\n * Now it's storing items to array and builds the string only in the end.\n */\nexport default class Layout {\n  private items: LayoutItem[] = [];\n\n  constructor(public indentation: Indentation) {}\n\n  /**\n   * Appends token strings and whitespace modifications to SQL string.\n   */\n  public add(...items: (WS | string)[]) {\n    for (const item of items) {\n      switch (item) {\n        case WS.SPACE:\n          this.items.push(WS.SPACE);\n          break;\n        case WS.NO_SPACE:\n          this.trimHorizontalWhitespace();\n          break;\n        case WS.NO_NEWLINE:\n          this.trimWhitespace();\n          break;\n        case WS.NEWLINE:\n          this.trimHorizontalWhitespace();\n          this.addNewline(WS.NEWLINE);\n          break;\n        case WS.MANDATORY_NEWLINE:\n          this.trimHorizontalWhitespace();\n          this.addNewline(WS.MANDATORY_NEWLINE);\n          break;\n        case WS.INDENT:\n          this.addIndentation();\n          break;\n        case WS.SINGLE_INDENT:\n          this.items.push(WS.SINGLE_INDENT);\n          break;\n        default:\n          this.items.push(item);\n      }\n    }\n  }\n\n  private trimHorizontalWhitespace() {\n    while (isHorizontalWhitespace(last(this.items))) {\n      this.items.pop();\n    }\n  }\n\n  private trimWhitespace() {\n    while (isRemovableWhitespace(last(this.items))) {\n      this.items.pop();\n    }\n  }\n\n  private addNewline(newline: WS.NEWLINE | WS.MANDATORY_NEWLINE) {\n    if (this.items.length > 0) {\n      switch (last(this.items)) {\n        case WS.NEWLINE:\n          this.items.pop();\n          this.items.push(newline);\n          break;\n        case WS.MANDATORY_NEWLINE:\n          // keep as is\n          break;\n        default:\n          this.items.push(newline);\n          break;\n      }\n    }\n  }\n\n  private addIndentation() {\n    for (let i = 0; i < this.indentation.getLevel(); i++) {\n      this.items.push(WS.SINGLE_INDENT);\n    }\n  }\n\n  /**\n   * Returns the final SQL string.\n   */\n  public toString(): string {\n    return this.items.map(item => this.itemToString(item)).join('');\n  }\n\n  private itemToString(item: LayoutItem): string {\n    switch (item) {\n      case WS.SPACE:\n        return ' ';\n      case WS.NEWLINE:\n      case WS.MANDATORY_NEWLINE:\n        return '\\n';\n      case WS.SINGLE_INDENT:\n        return this.indentation.getSingleIndent();\n      default:\n        return item;\n    }\n  }\n}\n\nconst isHorizontalWhitespace = (item: WS | string | undefined) =>\n  item === WS.SPACE || item === WS.SINGLE_INDENT;\n\nconst isRemovableWhitespace = (item: WS | string | undefined) =>\n  item === WS.SPACE || item === WS.SINGLE_INDENT || item === WS.NEWLINE;\n","import { sum } from 'src/utils';\nimport { isToken, type Token, TokenType } from 'src/lexer/token';\nimport { BetweenPredicate, NodeType, Parenthesis } from 'src/parser/ast';\n\n/**\n * Bookkeeper for inline blocks.\n *\n * Inline blocks are parenthesised expressions that are shorter than INLINE_MAX_LENGTH.\n * These blocks are formatted on a single line, unlike longer parenthesised\n * expressions where open-parenthesis causes newline and increase of indentation.\n */\nexport default class InlineBlock {\n  constructor(private expressionWidth: number) {}\n\n  /**\n   * Check if this should be an inline parentheses block\n   * Examples are \"NOW()\", \"COUNT(*)\", \"int(10)\", key(`somecolumn`), DECIMAL(7,2)\n   */\n  public isInlineBlock(parenthesis: Parenthesis): boolean {\n    return this.inlineWidth(parenthesis) <= this.expressionWidth;\n  }\n\n  private inlineWidth(parenthesis: Parenthesis): number {\n    let length = 2; // two parenthesis\n\n    for (const node of parenthesis.children) {\n      switch (node.type) {\n        case NodeType.function_call:\n          length += node.nameToken.text.length + this.inlineWidth(node.parenthesis);\n          break;\n        case NodeType.array_subscript:\n          length += node.arrayToken.text.length + this.inlineWidth(node.parenthesis);\n          break;\n        case NodeType.parenthesis:\n          length += this.inlineWidth(node);\n          break;\n        case NodeType.between_predicate:\n          length += this.betweenWidth(node);\n          break;\n        case NodeType.clause:\n        case NodeType.limit_clause:\n        case NodeType.set_operation:\n          return Infinity;\n        case NodeType.all_columns_asterisk:\n          length += 1;\n          break;\n        case NodeType.token:\n          length += node.token.text.length;\n          if (this.isForbiddenToken(node.token)) {\n            return Infinity;\n          }\n          break;\n      }\n\n      // Overran max length\n      if (length > this.expressionWidth) {\n        return length;\n      }\n    }\n    return length;\n  }\n\n  private betweenWidth(node: BetweenPredicate): number {\n    return sum(\n      [node.betweenToken, node.expr1, node.andToken, node.expr2].map(token => token.text.length)\n    );\n  }\n\n  // Reserved words that cause newlines, comments and semicolons\n  // are not allowed inside inline parentheses block\n  private isForbiddenToken(token: Token) {\n    return (\n      token.type === TokenType.RESERVED_LOGICAL_OPERATOR ||\n      token.type === TokenType.LINE_COMMENT ||\n      token.type === TokenType.BLOCK_COMMENT ||\n      isToken.CASE(token) // CASE cannot have inline blocks\n    );\n  }\n}\n","import type { FormatOptions } from 'src/FormatOptions';\nimport { equalizeWhitespace } from 'src/utils';\n\nimport Params from 'src/formatter/Params';\nimport { isTabularStyle } from 'src/formatter/config';\nimport { isReserved, type Token, TokenType, isParameter } from 'src/lexer/token';\nimport {\n  AllColumnsAsterisk,\n  ArraySubscript,\n  AstNode,\n  BetweenPredicate,\n  SetOperation,\n  Clause,\n  FunctionCall,\n  LimitClause,\n  NodeType,\n  Parenthesis,\n} from 'src/parser/ast';\n\nimport InlineBlock from './InlineBlock';\nimport Layout, { WS } from './Layout';\nimport toTabularFormat, { isTabularToken } from './tabularStyle';\n\ninterface ExpressionFormatterParams {\n  cfg: FormatOptions;\n  params: Params;\n  layout: Layout;\n  inline?: boolean;\n}\n\n/** Formats a generic SQL expression */\nexport default class ExpressionFormatter {\n  private cfg: FormatOptions;\n  private inlineBlock: InlineBlock;\n  private params: Params;\n  private layout: Layout;\n\n  private inline = false;\n  private nodes: AstNode[] = [];\n  private index = -1;\n\n  constructor({ cfg, params, layout, inline = false }: ExpressionFormatterParams) {\n    this.cfg = cfg;\n    this.inline = inline;\n    this.inlineBlock = new InlineBlock(this.cfg.expressionWidth);\n    this.params = params;\n    this.layout = layout;\n  }\n\n  public format(nodes: AstNode[]): Layout {\n    this.nodes = nodes;\n\n    for (this.index = 0; this.index < this.nodes.length; this.index++) {\n      const node = this.nodes[this.index];\n      switch (node.type) {\n        case NodeType.function_call:\n          this.formatFunctionCall(node);\n          break;\n        case NodeType.array_subscript:\n          this.formatArraySubscript(node);\n          break;\n        case NodeType.parenthesis:\n          this.formatParenthesis(node);\n          break;\n        case NodeType.between_predicate:\n          this.formatBetweenPredicate(node);\n          break;\n        case NodeType.clause:\n          this.formatClause(node);\n          break;\n        case NodeType.set_operation:\n          this.formatSetOperation(node);\n          break;\n        case NodeType.limit_clause:\n          this.formatLimitClause(node);\n          break;\n        case NodeType.all_columns_asterisk:\n          this.formatAllColumnsAsterisk(node);\n          break;\n        case NodeType.token:\n          this.formatToken(node.token);\n          break;\n      }\n    }\n    return this.layout;\n  }\n\n  private formatFunctionCall(node: FunctionCall) {\n    this.layout.add(this.show(node.nameToken));\n    this.formatParenthesis(node.parenthesis);\n  }\n\n  private formatArraySubscript(node: ArraySubscript) {\n    this.layout.add(this.show(node.arrayToken));\n    this.formatParenthesis(node.parenthesis);\n  }\n\n  private formatParenthesis(node: Parenthesis) {\n    const inline = this.inlineBlock.isInlineBlock(node);\n\n    if (inline) {\n      this.layout.add(node.openParen);\n      this.layout = this.formatSubExpression(node.children, inline);\n      this.layout.add(WS.NO_SPACE, node.closeParen, WS.SPACE);\n    } else {\n      this.layout.add(node.openParen, WS.NEWLINE);\n\n      if (isTabularStyle(this.cfg)) {\n        this.layout.add(WS.INDENT);\n        this.layout = this.formatSubExpression(node.children, inline);\n      } else {\n        this.layout.indentation.increaseBlockLevel();\n        this.layout.add(WS.INDENT);\n        this.layout = this.formatSubExpression(node.children, inline);\n        this.layout.indentation.decreaseBlockLevel();\n      }\n\n      this.layout.add(WS.NEWLINE, WS.INDENT, node.closeParen, WS.SPACE);\n    }\n  }\n\n  private formatBetweenPredicate(node: BetweenPredicate) {\n    this.layout.add(\n      this.show(node.betweenToken),\n      WS.SPACE,\n      this.show(node.expr1),\n      WS.SPACE,\n      this.showNonTabular(node.andToken),\n      WS.SPACE,\n      this.show(node.expr2),\n      WS.SPACE\n    );\n  }\n\n  private formatClause(node: Clause) {\n    if (isTabularStyle(this.cfg)) {\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.show(node.nameToken), WS.SPACE);\n    } else {\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.show(node.nameToken), WS.NEWLINE);\n    }\n    this.layout.indentation.increaseTopLevel();\n\n    if (!isTabularStyle(this.cfg)) {\n      this.layout.add(WS.INDENT);\n    }\n    this.layout = this.formatSubExpression(node.children);\n\n    this.layout.indentation.decreaseTopLevel();\n  }\n\n  private formatSetOperation(node: SetOperation) {\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.show(node.nameToken), WS.NEWLINE);\n\n    this.layout.add(WS.INDENT);\n    this.layout = this.formatSubExpression(node.children);\n  }\n\n  private formatLimitClause(node: LimitClause) {\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.show(node.limitToken));\n    this.layout.indentation.increaseTopLevel();\n\n    if (node.offset) {\n      this.layout.add(WS.NEWLINE, WS.INDENT);\n      this.layout = this.formatSubExpression(node.offset);\n      this.layout.add(WS.NO_SPACE, ',', WS.SPACE);\n      this.layout = this.formatSubExpression(node.count);\n    } else {\n      this.layout.add(WS.NEWLINE, WS.INDENT);\n      this.layout = this.formatSubExpression(node.count);\n    }\n    this.layout.indentation.decreaseTopLevel();\n  }\n\n  private formatAllColumnsAsterisk(_node: AllColumnsAsterisk) {\n    this.layout.add('*', WS.SPACE);\n  }\n\n  private formatSubExpression(nodes: AstNode[], inline = this.inline): Layout {\n    return new ExpressionFormatter({\n      cfg: this.cfg,\n      params: this.params,\n      layout: this.layout,\n      inline,\n    }).format(nodes);\n  }\n\n  private formatToken(token: Token): void {\n    switch (token.type) {\n      case TokenType.LINE_COMMENT:\n        return this.formatLineComment(token);\n      case TokenType.BLOCK_COMMENT:\n        return this.formatBlockComment(token);\n      case TokenType.RESERVED_JOIN:\n        return this.formatJoin(token);\n      case TokenType.RESERVED_DEPENDENT_CLAUSE:\n        return this.formatDependentClause(token);\n      case TokenType.RESERVED_LOGICAL_OPERATOR:\n        return this.formatLogicalOperator(token);\n      case TokenType.RESERVED_KEYWORD:\n      case TokenType.RESERVED_FUNCTION_NAME:\n      case TokenType.RESERVED_PHRASE:\n        return this.formatKeyword(token);\n      case TokenType.RESERVED_CASE_START:\n        return this.formatCaseStart(token);\n      case TokenType.RESERVED_CASE_END:\n        return this.formatCaseEnd(token);\n      case TokenType.COMMA:\n        return this.formatComma(token);\n      case TokenType.OPERATOR:\n        return this.formatOperator(token);\n      case TokenType.IDENTIFIER:\n      case TokenType.QUOTED_IDENTIFIER:\n      case TokenType.STRING:\n      case TokenType.NUMBER:\n      case TokenType.VARIABLE:\n      case TokenType.NAMED_PARAMETER:\n      case TokenType.QUOTED_PARAMETER:\n      case TokenType.NUMBERED_PARAMETER:\n      case TokenType.POSITIONAL_PARAMETER:\n        return this.formatLiteral(token);\n      default:\n        throw new Error(`Unexpected token type: ${token.type}`);\n    }\n  }\n\n  /** Default formatting for most token types */\n  private formatLiteral(token: Token) {\n    this.layout.add(this.show(token), WS.SPACE);\n  }\n\n  /** Formats a line comment onto query */\n  private formatLineComment(token: Token) {\n    if (/\\n/.test(token.precedingWhitespace || '')) {\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.show(token), WS.MANDATORY_NEWLINE, WS.INDENT);\n    } else {\n      this.layout.add(WS.NO_NEWLINE, WS.SPACE, this.show(token), WS.MANDATORY_NEWLINE, WS.INDENT);\n    }\n  }\n\n  /** Formats a block comment onto query */\n  private formatBlockComment(token: Token) {\n    this.splitBlockComment(token.text).forEach(line => {\n      this.layout.add(WS.NEWLINE, WS.INDENT, line);\n    });\n    this.layout.add(WS.NEWLINE, WS.INDENT);\n  }\n\n  // Breaks up block comment to multiple lines.\n  // For example this comment (dots representing leading whitespace):\n  //\n  //   ..../**\n  //   .....* Some description here\n  //   .....* and here too\n  //   .....*/\n  //\n  // gets broken to this array (note the leading single spaces):\n  //\n  //   [ '/**',\n  //     '.* Some description here',\n  //     '.* and here too',\n  //     '.*/' ]\n  //\n  private splitBlockComment(comment: string): string[] {\n    return comment.split(/\\n/).map(line => {\n      if (/^\\s*\\*/.test(line)) {\n        return ' ' + line.replace(/^\\s*/, '');\n      } else {\n        return line.replace(/^\\s*/, '');\n      }\n    });\n  }\n\n  private formatJoin(token: Token) {\n    if (isTabularStyle(this.cfg)) {\n      // in tabular style JOINs are at the same level as clauses\n      this.layout.indentation.decreaseTopLevel();\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.show(token), WS.SPACE);\n      this.layout.indentation.increaseTopLevel();\n    } else {\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.show(token), WS.SPACE);\n    }\n  }\n\n  /**\n   * Formats a Reserved Keyword onto query\n   */\n  private formatKeyword(token: Token) {\n    this.layout.add(this.show(token), WS.SPACE);\n  }\n\n  /**\n   * Formats a Reserved Dependent Clause token onto query, supporting the keyword that precedes it\n   */\n  private formatDependentClause(token: Token) {\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.show(token), WS.SPACE);\n  }\n\n  /**\n   * Formats an Operator onto query, following rules for specific characters\n   */\n  private formatOperator(token: Token) {\n    // special operator\n    if (token.text === ':') {\n      this.layout.add(WS.NO_SPACE, this.show(token), WS.SPACE);\n      return;\n    } else if (token.text === '.' || token.text === '::') {\n      this.layout.add(WS.NO_SPACE, this.show(token));\n      return;\n    }\n    // special case for PLSQL @ dblink syntax\n    else if (token.text === '@' && this.cfg.language === 'plsql') {\n      this.layout.add(WS.NO_SPACE, this.show(token));\n      return;\n    }\n\n    // other operators\n    if (this.cfg.denseOperators) {\n      this.layout.add(WS.NO_SPACE, this.show(token));\n    } else {\n      this.layout.add(this.show(token), WS.SPACE);\n    }\n  }\n\n  /**\n   * Formats a Logical Operator onto query, joining boolean conditions\n   */\n  private formatLogicalOperator(token: Token) {\n    if (this.cfg.logicalOperatorNewline === 'before') {\n      if (isTabularStyle(this.cfg)) {\n        // In tabular style AND/OR is placed on the same level as clauses\n        this.layout.indentation.decreaseTopLevel();\n        this.layout.add(WS.NEWLINE, WS.INDENT, this.show(token), WS.SPACE);\n        this.layout.indentation.increaseTopLevel();\n      } else {\n        this.layout.add(WS.NEWLINE, WS.INDENT, this.show(token), WS.SPACE);\n      }\n    } else {\n      this.layout.add(this.show(token), WS.NEWLINE, WS.INDENT);\n    }\n  }\n\n  private formatCaseStart(token: Token) {\n    this.layout.indentation.increaseBlockLevel();\n    this.layout.add(this.show(token), WS.NEWLINE, WS.INDENT);\n  }\n\n  private formatCaseEnd(token: Token) {\n    this.formatMultilineBlockEnd(token);\n  }\n\n  private formatMultilineBlockEnd(token: Token) {\n    this.layout.indentation.decreaseBlockLevel();\n\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.show(token), WS.SPACE);\n  }\n\n  /**\n   * Formats a comma Operator onto query, ending line unless in an Inline Block\n   */\n  private formatComma(token: Token) {\n    if (!this.inline) {\n      this.layout.add(WS.NO_SPACE, this.show(token), WS.NEWLINE, WS.INDENT);\n    } else {\n      this.layout.add(WS.NO_SPACE, this.show(token), WS.SPACE);\n    }\n  }\n\n  private show(token: Token): string {\n    if (isTabularToken(token)) {\n      return toTabularFormat(this.showToken(token), this.cfg.indentStyle);\n    } else {\n      return this.showToken(token);\n    }\n  }\n\n  // Like show(), but skips tabular formatting\n  private showNonTabular(token: Token): string {\n    return this.showToken(token);\n  }\n\n  // don't call this directly, always use show() or showNonTabular() instead.\n  private showToken(token: Token): string {\n    if (isReserved(token)) {\n      switch (this.cfg.keywordCase) {\n        case 'preserve':\n          return equalizeWhitespace(token.raw);\n        case 'upper':\n          return token.text;\n        case 'lower':\n          return token.text.toLowerCase();\n      }\n    } else if (isParameter(token)) {\n      return this.params.get(token);\n    } else {\n      return token.text;\n    }\n  }\n}\n","import type { IndentStyle } from 'src/FormatOptions';\nimport { Token, TokenType } from 'src/lexer/token';\n\n/**\n * When tabular style enabled,\n * produces a 10-char wide version of token text.\n */\nexport default function toTabularFormat(tokenText: string, indentStyle: IndentStyle): string {\n  if (indentStyle === 'standard') {\n    return tokenText;\n  }\n\n  let tail = [] as string[]; // rest of keyword\n  if (tokenText.length >= 10 && tokenText.includes(' ')) {\n    // split for long keywords like INNER JOIN or UNION DISTINCT\n    [tokenText, ...tail] = tokenText.split(' ');\n  }\n\n  if (indentStyle === 'tabularLeft') {\n    tokenText = tokenText.padEnd(9, ' ');\n  } else {\n    tokenText = tokenText.padStart(9, ' ');\n  }\n\n  return tokenText + ['', ...tail].join(' ');\n}\n\n/**\n * True when the token can be formatted in tabular style\n */\nexport function isTabularToken(token: Token): boolean {\n  return (\n    token.type === TokenType.RESERVED_LOGICAL_OPERATOR ||\n    token.type === TokenType.RESERVED_DEPENDENT_CLAUSE ||\n    token.type === TokenType.RESERVED_COMMAND ||\n    token.type === TokenType.RESERVED_SET_OPERATION ||\n    token.type === TokenType.RESERVED_JOIN\n  );\n}\n","import { last } from 'src/utils';\n\nconst INDENT_TYPE_TOP_LEVEL = 'top-level';\nconst INDENT_TYPE_BLOCK_LEVEL = 'block-level';\n\n/**\n * Manages indentation levels.\n *\n * There are two types of indentation levels:\n *\n * - BLOCK_LEVEL : increased by open-parenthesis\n * - TOP_LEVEL : increased by RESERVED_COMMAND words\n */\nexport default class Indentation {\n  private indentTypes: string[] = [];\n\n  /**\n   * @param {string} indent A string to indent with\n   */\n  constructor(private indent: string) {}\n\n  /**\n   * Returns indentation string for single indentation step.\n   */\n  getSingleIndent(): string {\n    return this.indent;\n  }\n\n  /**\n   * Returns current indentation string.\n   * @return {string} indentation string based on indentTypes\n   */\n  getIndent(): string {\n    return this.indent.repeat(this.indentTypes.length);\n  }\n\n  /**\n   * Returns current indentation level\n   */\n  getLevel(): number {\n    return this.indentTypes.length;\n  }\n\n  /**\n   * Increases indentation by one top-level indent.\n   */\n  increaseTopLevel() {\n    this.indentTypes.push(INDENT_TYPE_TOP_LEVEL);\n  }\n\n  /**\n   * Increases indentation by one block-level indent.\n   */\n  increaseBlockLevel() {\n    this.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL);\n  }\n\n  /**\n   * Decreases indentation by one top-level indent.\n   * Does nothing when the previous indent is not top-level.\n   */\n  decreaseTopLevel() {\n    if (this.indentTypes.length > 0 && last(this.indentTypes) === INDENT_TYPE_TOP_LEVEL) {\n      this.indentTypes.pop();\n    }\n  }\n\n  /**\n   * Decreases indentation by one block-level indent.\n   * If there are top-level indents within the block-level indent,\n   * throws away these as well.\n   */\n  decreaseBlockLevel() {\n    while (this.indentTypes.length > 0) {\n      const type = this.indentTypes.pop();\n      if (type !== INDENT_TYPE_TOP_LEVEL) {\n        break;\n      }\n    }\n  }\n\n  /** Clears all indentation */\n  resetIndentation() {\n    this.indentTypes = [];\n  }\n}\n","import type { FormatOptions } from 'src/FormatOptions';\nimport { indentString } from 'src/formatter/config';\nimport Params from 'src/formatter/Params';\nimport Tokenizer from 'src/lexer/Tokenizer';\n\nimport Parser from 'src/parser/Parser';\nimport { Statement } from 'src/parser/ast';\n\nimport formatCommaPositions from './formatCommaPositions';\nimport formatAliasPositions from './formatAliasPositions';\nimport ExpressionFormatter from './ExpressionFormatter';\nimport Layout, { WS } from './Layout';\nimport Indentation from './Indentation';\n\n/** Main formatter class that produces a final output string from list of tokens */\nexport default class Formatter {\n  private cfg: FormatOptions;\n  private params: Params;\n\n  constructor(cfg: FormatOptions) {\n    this.cfg = cfg;\n    this.params = new Params(this.cfg.params);\n  }\n\n  /**\n   * SQL Tokenizer for this formatter, provided by subclasses.\n   */\n  protected tokenizer(): Tokenizer {\n    throw new Error('tokenizer() not implemented by subclass');\n  }\n\n  // Cache the tokenizer for each class (each SQL dialect)\n  // So we wouldn't need to recreate the tokenizer, which is kinda expensive,\n  // for each call to format() function.\n  private cachedTokenizer(): Tokenizer {\n    const cls: Function & { cachedTokenizer?: Tokenizer } = this.constructor;\n    if (!cls.cachedTokenizer) {\n      cls.cachedTokenizer = this.tokenizer();\n    }\n    return cls.cachedTokenizer;\n  }\n\n  /**\n   * Formats an SQL query.\n   * @param {string} query - The SQL query string to be formatted\n   * @return {string} The formatter query\n   */\n  public format(query: string): string {\n    const tokens = this.cachedTokenizer().tokenize(query, this.cfg.paramTypes || {});\n    const ast = new Parser(tokens).parse();\n    const formattedQuery = this.formatAst(ast);\n    const finalQuery = this.postFormat(formattedQuery);\n\n    return finalQuery.trimEnd();\n  }\n\n  private formatAst(statements: Statement[]): string {\n    return statements\n      .map(stat => this.formatStatement(stat))\n      .join('\\n'.repeat(this.cfg.linesBetweenQueries + 1));\n  }\n\n  private formatStatement(statement: Statement): string {\n    const layout = new ExpressionFormatter({\n      cfg: this.cfg,\n      params: this.params,\n      layout: new Layout(new Indentation(indentString(this.cfg))),\n    }).format(statement.children);\n\n    if (!statement.hasSemicolon) {\n      // do nothing\n    } else if (this.cfg.newlineBeforeSemicolon) {\n      layout.add(WS.NEWLINE, ';');\n    } else {\n      layout.add(WS.NO_NEWLINE, ';');\n    }\n    return layout.toString();\n  }\n\n  private postFormat(query: string): string {\n    if (this.cfg.tabulateAlias) {\n      query = formatAliasPositions(query);\n    }\n    if (this.cfg.commaPosition === 'before' || this.cfg.commaPosition === 'tabular') {\n      query = formatCommaPositions(query, this.cfg.commaPosition, indentString(this.cfg));\n    }\n\n    return query;\n  }\n}\n","import { maxLength } from 'src/utils';\n\n/**\n * Handles select alias placement - tabulates if enabled\n */\nexport default function formatAliasPositions(query: string): string {\n  const lines = query.split('\\n');\n\n  let newQuery: string[] = [];\n  for (let i = 0; i < lines.length; i++) {\n    // find SELECT rows with trailing comma, if no comma (only one row) - no-op\n    if (lines[i].match(/^\\s*SELECT/i)) {\n      let aliasLines: string[] = [];\n      if (lines[i].match(/.*,$/)) {\n        aliasLines = [lines[i]]; // add select to aliasLines in case of tabular formats\n      } else {\n        newQuery.push(lines[i]); // add select to new query\n        if (lines[i].match(/^\\s*SELECT\\s+.+(?!,$)/i)) {\n          continue;\n        }\n        aliasLines.push(lines[++i]);\n      }\n\n      // get all lines in SELECT clause\n      while (lines[i++].match(/.*,$/)) {\n        aliasLines.push(lines[i]);\n      }\n\n      // break lines into alias with optional AS, and all preceding text\n      const splitLines = aliasLines\n        .map(line => ({ line, matches: line.match(/(^.*?\\S) (AS )?(\\S+,?$)/i) }))\n        .map(({ line, matches }) => {\n          if (!matches) {\n            return { precedingText: line };\n          }\n          return {\n            precedingText: matches[1],\n            as: matches[2],\n            alias: matches[3],\n          };\n        });\n\n      // get longest of precedingText, trim trailing comma for non-alias columns\n      const aliasMaxLength = maxLength(\n        splitLines.map(({ precedingText }) => precedingText.replace(/\\s*,\\s*$/, ''))\n      );\n      // re-construct line, aligning by inserting space before AS or alias\n      aliasLines = splitLines.map(\n        ({ precedingText, as, alias }) =>\n          precedingText +\n          (alias ? ' '.repeat(aliasMaxLength - precedingText.length + 1) + (as ?? '') + alias : '')\n      );\n      newQuery = [...newQuery, ...aliasLines];\n    }\n    newQuery.push(lines[i]);\n  }\n\n  return newQuery.join('\\n');\n}\n","import type { PrefixedQuoteType } from './TokenizerOptions';\n\n// Escapes regex special chars\nexport const escapeRegExp = (string: string) => string.replace(/[.*+?^${}()|[\\]\\\\]/gu, '\\\\$&');\n\nexport const WHITESPACE_REGEX = /\\s+/uy;\n\nexport const patternToRegex = (pattern: string): RegExp => new RegExp(`(?:${pattern})`, 'uy');\n\n// Converts \"ab\" to \"[Aa][Bb]\"\nexport const toCaseInsensitivePattern = (prefix: string): string =>\n  prefix\n    .split('')\n    .map(char => (/ /gu.test(char) ? '\\\\s+' : `[${char.toUpperCase()}${char.toLowerCase()}]`))\n    .join('');\n\n/** Escapes paren characters for RegExp patterns */\nexport const escapeParen = (paren: string): string => {\n  if (paren.length === 1) {\n    // A single punctuation character\n    return escapeRegExp(paren);\n  } else {\n    // longer word\n    return '\\\\b' + escapeRegExp(paren) + '\\\\b';\n  }\n};\n\nexport const withDashes = (pattern: string): string => pattern + '(?:-' + pattern + ')*';\n\n// Converts [\"a\", \"b\"] to \"(?:[Aa]|[Bb]|)\" or \"(?:[Aa]|[Bb])\" when required = true\nexport const prefixesPattern = ({ prefixes, requirePrefix }: PrefixedQuoteType): string =>\n  `(?:${prefixes.map(toCaseInsensitivePattern).join('|')}${requirePrefix ? '' : '|'})`;\n","import { sortByLengthDesc } from 'src/utils';\n\nimport type { IdentChars, QuoteType, VariableType } from './TokenizerOptions';\nimport {\n  escapeParen,\n  escapeRegExp,\n  patternToRegex,\n  prefixesPattern,\n  toCaseInsensitivePattern,\n  withDashes,\n} from './regexUtil';\n\n/**\n * Builds a RegExp for valid line comments in a SQL dialect\n * @param {string[]} lineCommentTypes - list of character strings that denote line comments\n */\nexport const lineComment = (lineCommentTypes: string[]) =>\n  new RegExp(`(?:${lineCommentTypes.map(escapeRegExp).join('|')}).*?(?=\\r\\n|\\r|\\n|$)`, 'uy');\n\n/**\n * Builds a RegExp for matching parenthesis patterns, escaping them with `escapeParen`\n * @param {string[]} parens - list of strings that denote parenthesis patterns\n */\nexport const parenthesis = (parens: string[]): RegExp =>\n  patternToRegex(parens.map(escapeParen).join('|'));\n\n/**\n * Builds a RegExp containing all operators for a SQL dialect\n * @param {string} monadOperators - concatenated string of all 1-length operators\n * @param {string[]} polyadOperators - list of strings of all >1-length operators\n */\nexport const operator = (monadOperators: string, polyadOperators: string[]) =>\n  patternToRegex(\n    `${sortByLengthDesc(polyadOperators).map(escapeRegExp).join('|')}|` +\n      `[${monadOperators.split('').map(escapeRegExp).join('')}]`\n  );\n\n// Negative lookahead to avoid matching a keyword that's actually part of identifier,\n// which can happen when identifier allows word-boundary characters inside it.\n//\n// For example \"SELECT$ME\" should be tokenized as:\n// - [\"SELECT$ME\"] when $ is allowed inside identifiers\n// - [\"SELECT\", \"$\", \"ME\"] when $ can't be part of identifiers.\nconst rejectIdentCharsPattern = ({ rest, dashes }: IdentChars): string =>\n  rest || dashes ? `(?![${rest || ''}${dashes ? '-' : ''}])` : '';\n\n/**\n * Builds a RegExp for all Reserved Keywords in a SQL dialect\n */\nexport const reservedWord = (reservedKeywords: string[], identChars: IdentChars = {}): RegExp => {\n  if (reservedKeywords.length === 0) {\n    return /^\\b$/u;\n  }\n\n  const avoidIdentChars = rejectIdentCharsPattern(identChars);\n\n  const reservedKeywordsPattern = sortByLengthDesc(reservedKeywords)\n    .map(toCaseInsensitivePattern)\n    .join('|')\n    .replace(/ /gu, '\\\\s+');\n\n  return new RegExp(`(?:${reservedKeywordsPattern})${avoidIdentChars}\\\\b`, 'iuy');\n};\n\n/**\n * Builds a RegExp for parameter placeholder patterns\n * @param {string[]} paramTypes - list of strings that denote placeholder types\n * @param {string} pattern - string that denotes placeholder pattern\n */\nexport const parameter = (paramTypes: string[], pattern: string): RegExp | undefined => {\n  if (!paramTypes.length) {\n    return undefined;\n  }\n  const typesRegex = paramTypes.map(escapeRegExp).join('|');\n\n  return patternToRegex(`(?:${typesRegex})(?:${pattern})`);\n};\n\nconst buildQStringPatterns = () => {\n  const specialDelimiterMap = {\n    '<': '>',\n    '[': ']',\n    '(': ')',\n    '{': '}',\n  };\n\n  // base pattern for special delimiters, left must correspond with right\n  const singlePattern = \"{left}(?:(?!{right}').)*?{right}\";\n\n  // replace {left} and {right} with delimiters, collect as array\n  const patternList = Object.entries(specialDelimiterMap).map(([left, right]) =>\n    singlePattern.replace(/{left}/g, escapeRegExp(left)).replace(/{right}/g, escapeRegExp(right))\n  );\n\n  const specialDelimiters = escapeRegExp(Object.keys(specialDelimiterMap).join(''));\n  // standard pattern for common delimiters, ignores special delimiters\n  const standardDelimiterPattern = String.raw`(?<tag>[^\\s${specialDelimiters}])(?:(?!\\k<tag>').)*?\\k<tag>`;\n\n  // constructs final pattern by joining all cases\n  const qStringPattern = `[Qq]'(?:${standardDelimiterPattern}|${patternList.join('|')})'`;\n\n  return qStringPattern;\n};\n\n// This enables the following quote styles:\n// 1. backtick quoted using `` to escape\n// 2. square bracket quoted (SQL Server) using ]] to escape\n// 3. double quoted using \"\" or \\\" to escape\n// 4. single quoted using '' or \\' to escape\n// 5. PostgreSQL dollar-quoted\n// 6. BigQuery '''triple-quoted'''\n// 7. BigQuery \"\"\"triple-quoted\"\"\"\n// 8. Hive and Spark variables: ${name}\n// 9. Oracle q'' strings: q'<text>' q'|text|' ...\nexport const quotePatterns = {\n  '``': '(?:`[^`]*(?:$|`))+',\n  '[]': String.raw`(?:\\[[^\\]]*(?:$|\\]))(?:\\][^\\]]*(?:$|\\]))*`,\n  '\"\"': String.raw`(?:\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*(?:\"|$))+`,\n  \"''\": String.raw`(?:'[^'\\\\]*(?:\\\\.[^'\\\\]*)*(?:'|$))+`,\n  '$$': String.raw`(?<tag>\\$\\w*\\$)[\\s\\S]*?(?:\\k<tag>|$)`,\n  \"'''..'''\": String.raw`'''[^\\\\]*?(?:\\\\.[^\\\\]*?)*?(?:'''|$)`,\n  '\"\"\"..\"\"\"': String.raw`\"\"\"[^\\\\]*?(?:\\\\.[^\\\\]*?)*?(?:\"\"\"|$)`,\n  '{}': String.raw`(?:\\{[^\\}]*(?:$|\\}))`,\n  \"q''\": buildQStringPatterns(),\n};\n\nconst singleQuotePattern = (quoteTypes: QuoteType): string => {\n  if (typeof quoteTypes === 'string') {\n    return quotePatterns[quoteTypes];\n  } else {\n    return prefixesPattern(quoteTypes) + quotePatterns[quoteTypes.quote];\n  }\n};\n\n/** Builds a RegExp for matching variables */\nexport const variable = (varTypes: VariableType[]): RegExp =>\n  patternToRegex(\n    varTypes\n      .map(varType => ('regex' in varType ? varType.regex : singleQuotePattern(varType)))\n      .join('|')\n  );\n\n/** Builds a quote-delimited pattern for matching all given quote types */\nexport const stringPattern = (quoteTypes: QuoteType[]): string =>\n  quoteTypes.map(singleQuotePattern).join('|');\n\n/** Builds a RegExp for matching quote-delimited patterns */\nexport const string = (quoteTypes: QuoteType[]): RegExp =>\n  patternToRegex(stringPattern(quoteTypes));\n\n/**\n * Builds a RegExp for valid identifiers in a SQL dialect\n */\nexport const identifier = (specialChars: IdentChars = {}): RegExp =>\n  patternToRegex(identifierPattern(specialChars));\n\n/**\n * Builds a RegExp string for valid identifiers in a SQL dialect\n */\nexport const identifierPattern = ({\n  first,\n  rest,\n  dashes,\n  allowFirstCharNumber,\n}: IdentChars = {}): string => {\n  // Unicode letters, diacritical marks and underscore\n  const letter = '\\\\p{Alphabetic}\\\\p{Mark}_';\n  // Numbers 0..9, plus various unicode numbers\n  const number = '\\\\p{Decimal_Number}';\n\n  const firstChars = escapeRegExp(first ?? '');\n  const restChars = escapeRegExp(rest ?? '');\n\n  const pattern = allowFirstCharNumber\n    ? `[${letter}${number}${firstChars}][${letter}${number}${restChars}]*`\n    : `[${letter}${firstChars}][${letter}${number}${restChars}]*`;\n\n  return dashes ? withDashes(pattern) : pattern;\n};\n","import { Token, TokenType } from 'src/lexer/token';\nimport { WHITESPACE_REGEX } from './regexUtil';\n\nexport interface TokenRule {\n  regex: RegExp;\n  key?: (token: string) => string;\n  value?: (token: string) => string;\n}\n\nexport default class TokenizerEngine {\n  private rules: Partial<Record<TokenType, TokenRule>>;\n\n  private input = ''; // The input SQL string to process\n\n  private index = 0; // Current position in string\n\n  constructor(rules: Partial<Record<TokenType, TokenRule>>) {\n    this.rules = rules;\n  }\n\n  /**\n   * Takes a SQL string and breaks it into tokens.\n   * Each token is an object with type and value.\n   *\n   * @param {string} input - The SQL string\n   * @returns {Token[]} output token stream\n   */\n  public tokenize(input: string): Token[] {\n    this.input = input;\n    this.index = 0;\n    const tokens: Token[] = [];\n    let token: Token | undefined;\n\n    // Keep processing the string until end is reached\n    while (this.index < this.input.length) {\n      // skip any preceding whitespace\n      const precedingWhitespace = this.getWhitespace();\n\n      if (this.index < this.input.length) {\n        // Get the next token and the token type\n        token = this.getNextToken(token);\n        if (!token) {\n          throw new Error(`Parse error: Unexpected \"${input.slice(this.index, 100)}\"`);\n        }\n\n        tokens.push({ ...token, precedingWhitespace });\n      }\n    }\n    return tokens;\n  }\n\n  private getWhitespace(): string | undefined {\n    WHITESPACE_REGEX.lastIndex = this.index;\n\n    const matches = WHITESPACE_REGEX.exec(this.input);\n    if (matches) {\n      // Advance current position by matched whitespace length\n      this.index += matches[0].length;\n      return matches[0];\n    }\n    return undefined;\n  }\n\n  private getNextToken(previousToken?: Token): Token | undefined {\n    return (\n      this.matchToken(TokenType.BLOCK_COMMENT) ||\n      this.matchToken(TokenType.LINE_COMMENT) ||\n      this.matchToken(TokenType.COMMA) ||\n      this.matchToken(TokenType.OPEN_PAREN) ||\n      this.matchToken(TokenType.CLOSE_PAREN) ||\n      this.matchToken(TokenType.QUOTED_IDENTIFIER) ||\n      this.matchToken(TokenType.NUMBER) ||\n      this.matchReservedWordToken(previousToken) ||\n      this.matchPlaceholderToken(TokenType.NAMED_PARAMETER) ||\n      this.matchPlaceholderToken(TokenType.QUOTED_PARAMETER) ||\n      this.matchPlaceholderToken(TokenType.NUMBERED_PARAMETER) ||\n      this.matchPlaceholderToken(TokenType.POSITIONAL_PARAMETER) ||\n      this.matchToken(TokenType.VARIABLE) ||\n      this.matchToken(TokenType.STRING) ||\n      this.matchToken(TokenType.IDENTIFIER) ||\n      this.matchToken(TokenType.DELIMITER) ||\n      this.matchToken(TokenType.OPERATOR)\n    );\n  }\n\n  private matchPlaceholderToken(tokenType: TokenType): Token | undefined {\n    if (tokenType in this.rules) {\n      const token = this.matchToken(tokenType);\n      const tokenRule = this.rules[tokenType];\n      if (token) {\n        if (tokenRule?.key) {\n          return { ...token, key: tokenRule.key(token.text) };\n        }\n        return token; // POSITIONAL_PARAMETER does not have a key transform function\n      }\n    }\n    return undefined;\n  }\n\n  private matchReservedWordToken(previousToken?: Token): Token | undefined {\n    // A reserved word cannot be preceded by a '.'\n    // this makes it so in \"mytable.from\", \"from\" is not considered a reserved word\n    if (previousToken?.text === '.') {\n      return undefined;\n    }\n\n    // prioritised list of Reserved token types\n    return (\n      this.matchToken(TokenType.RESERVED_CASE_START) ||\n      this.matchToken(TokenType.RESERVED_CASE_END) ||\n      this.matchToken(TokenType.RESERVED_COMMAND) ||\n      this.matchToken(TokenType.RESERVED_SET_OPERATION) ||\n      this.matchToken(TokenType.RESERVED_DEPENDENT_CLAUSE) ||\n      this.matchToken(TokenType.RESERVED_JOIN) ||\n      this.matchToken(TokenType.RESERVED_PHRASE) ||\n      this.matchToken(TokenType.RESERVED_LOGICAL_OPERATOR) ||\n      this.matchToken(TokenType.RESERVED_FUNCTION_NAME) ||\n      this.matchToken(TokenType.RESERVED_KEYWORD)\n    );\n  }\n\n  // Shorthand for `match` that looks up regex from rules\n  private matchToken(tokenType: TokenType): Token | undefined {\n    const rule = this.rules[tokenType];\n    if (!rule) {\n      return undefined;\n    }\n    return this.match({\n      type: tokenType,\n      regex: rule.regex,\n      transform: rule.value,\n    });\n  }\n\n  // Attempts to match RegExp at current position in input\n  private match({\n    type,\n    regex,\n    transform,\n  }: {\n    type: TokenType;\n    regex: RegExp;\n    transform?: (s: string) => string;\n  }): Token | undefined {\n    regex.lastIndex = this.index;\n    const matches = regex.exec(this.input);\n    if (matches) {\n      const matchedToken = matches[0];\n\n      const outToken = {\n        type,\n        raw: matchedToken,\n        text: transform ? transform(matchedToken) : matchedToken,\n        start: this.index,\n        end: this.index + matchedToken.length,\n      };\n\n      // Advance current position by matched token length\n      this.index += matchedToken.length;\n      return outToken;\n    }\n    return undefined;\n  }\n}\n","import { Token, TokenType } from 'src/lexer/token';\nimport * as regex from 'src/lexer/regexFactory';\nimport { ParamTypes, TokenizerOptions } from 'src/lexer/TokenizerOptions';\nimport TokenizerEngine, { type TokenRule } from 'src/lexer/TokenizerEngine';\nimport { escapeRegExp } from 'src/lexer/regexUtil';\nimport { equalizeWhitespace } from 'src/utils';\n\nexport default class Tokenizer {\n  private dialectRules: Partial<Record<TokenType, TokenRule>>;\n\n  constructor(private cfg: TokenizerOptions) {\n    this.dialectRules = this.buildDialectRules(cfg);\n  }\n\n  public tokenize(input: string, paramTypesOverrides: ParamTypes): Token[] {\n    const rules = {\n      ...this.dialectRules,\n      ...this.buildParamRules(this.cfg, paramTypesOverrides),\n    };\n    const tokens = new TokenizerEngine(rules).tokenize(input);\n    return this.cfg.postProcess ? this.cfg.postProcess(tokens) : tokens;\n  }\n\n  // These rules can be cached as they only depend on\n  // the Tokenizer config options specified for each SQL dialect\n  private buildDialectRules(cfg: TokenizerOptions): Partial<Record<TokenType, TokenRule>> {\n    return this.validRules({\n      [TokenType.BLOCK_COMMENT]: { regex: /(\\/\\*[^]*?(?:\\*\\/|$))/uy },\n      [TokenType.LINE_COMMENT]: {\n        regex: regex.lineComment(cfg.lineCommentTypes ?? ['--']),\n      },\n      [TokenType.COMMA]: { regex: /[,]/y },\n      [TokenType.OPEN_PAREN]: { regex: regex.parenthesis(cfg.openParens ?? ['(']) },\n      [TokenType.CLOSE_PAREN]: { regex: regex.parenthesis(cfg.closeParens ?? [')']) },\n      [TokenType.QUOTED_IDENTIFIER]: { regex: regex.string(cfg.identTypes) },\n      [TokenType.NUMBER]: {\n        regex:\n          /(?:0x[0-9a-fA-F]+|0b[01]+|(?:-\\s*)?[0-9]+(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+(?:\\.[0-9]+)?)?)(?!\\w)/uy,\n      },\n      [TokenType.RESERVED_CASE_START]: {\n        regex: /[Cc][Aa][Ss][Ee]\\b/uy,\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.RESERVED_CASE_END]: {\n        regex: /[Ee][Nn][Dd]\\b/uy,\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.RESERVED_COMMAND]: {\n        regex: regex.reservedWord(cfg.reservedCommands, cfg.identChars),\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.RESERVED_SET_OPERATION]: {\n        regex: regex.reservedWord(cfg.reservedSetOperations, cfg.identChars),\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.RESERVED_DEPENDENT_CLAUSE]: {\n        regex: regex.reservedWord(cfg.reservedDependentClauses, cfg.identChars),\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.RESERVED_JOIN]: {\n        regex: regex.reservedWord(cfg.reservedJoins, cfg.identChars),\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.RESERVED_PHRASE]: {\n        regex: regex.reservedWord(cfg.reservedPhrases ?? [], cfg.identChars),\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.RESERVED_LOGICAL_OPERATOR]: {\n        regex: regex.reservedWord(cfg.reservedLogicalOperators ?? ['AND', 'OR'], cfg.identChars),\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.RESERVED_FUNCTION_NAME]: {\n        regex: regex.reservedWord(cfg.reservedFunctionNames, cfg.identChars),\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.RESERVED_KEYWORD]: {\n        regex: regex.reservedWord(cfg.reservedKeywords, cfg.identChars),\n        value: v => equalizeWhitespace(v.toUpperCase()),\n      },\n      [TokenType.VARIABLE]: {\n        regex: cfg.variableTypes ? regex.variable(cfg.variableTypes) : undefined,\n      },\n      [TokenType.STRING]: { regex: regex.string(cfg.stringTypes) },\n      [TokenType.IDENTIFIER]: {\n        regex: regex.identifier(cfg.identChars),\n      },\n      [TokenType.DELIMITER]: { regex: /[;]/uy },\n      [TokenType.OPERATOR]: {\n        regex: regex.operator('+-/*%&|^><=.:$@#?~![]{}', [\n          '<>',\n          '<=',\n          '>=',\n          '!=',\n          ...(cfg.operators ?? []),\n        ]),\n      },\n    });\n  }\n\n  // These rules can't be blindly cached as the paramTypesOverrides object\n  // can differ on each invocation of the format() function.\n  private buildParamRules(\n    cfg: TokenizerOptions,\n    paramTypesOverrides: ParamTypes\n  ): Partial<Record<TokenType, TokenRule>> {\n    // Each dialect has its own default parameter types (if any),\n    // but these can be overriden by the user of the library.\n    const paramTypes = {\n      named: paramTypesOverrides?.named || cfg.paramTypes?.named || [],\n      quoted: paramTypesOverrides?.quoted || cfg.paramTypes?.quoted || [],\n      numbered: paramTypesOverrides?.numbered || cfg.paramTypes?.numbered || [],\n      positional:\n        typeof paramTypesOverrides?.positional === 'boolean'\n          ? paramTypesOverrides.positional\n          : cfg.paramTypes?.positional,\n    };\n\n    return this.validRules({\n      [TokenType.NAMED_PARAMETER]: {\n        regex: regex.parameter(\n          paramTypes.named,\n          regex.identifierPattern(cfg.paramChars || cfg.identChars)\n        ),\n        key: v => v.slice(1),\n      },\n      [TokenType.QUOTED_PARAMETER]: {\n        regex: regex.parameter(paramTypes.quoted, regex.stringPattern(cfg.identTypes)),\n        key: v =>\n          (({ tokenKey, quoteChar }) =>\n            tokenKey.replace(new RegExp(escapeRegExp('\\\\' + quoteChar), 'gu'), quoteChar))({\n            tokenKey: v.slice(2, -1),\n            quoteChar: v.slice(-1),\n          }),\n      },\n      [TokenType.NUMBERED_PARAMETER]: {\n        regex: regex.parameter(paramTypes.numbered, '[0-9]+'),\n        key: v => v.slice(1),\n      },\n      [TokenType.POSITIONAL_PARAMETER]: {\n        regex: paramTypes.positional ? /[?]/y : undefined,\n      },\n    });\n  }\n\n  // filters out rules for token types whose regex is undefined\n  private validRules(\n    rules: Partial<Record<TokenType, TokenRule | { regex: undefined }>>\n  ): Partial<Record<TokenType, TokenRule>> {\n    return Object.fromEntries(Object.entries(rules).filter(([_, rule]) => rule.regex));\n  }\n}\n","/**\n * Performs expandSinglePhrase() on array\n */\nexport const expandPhrases = (phrases: string[]): string[] => phrases.flatMap(expandSinglePhrase);\n\n/**\n * Expands a syntax description like\n *\n *     \"CREATE [OR REPLACE] [TEMP|TEMPORARY] TABLE\"\n *\n * into an array of all possible combinations like:\n *\n *     [ \"CREATE TABLE\",\n *       \"CREATE TEMP TABLE\",\n *       \"CREATE TEMPORARY TABLE\",\n *       \"CREATE OR REPLACE TABLE\",\n *       \"CREATE OR REPLACE TEMP TABLE\",\n *       \"CREATE OR REPLACE TEMPORARY TABLE\" ]\n */\nexport const expandSinglePhrase = (phrase: string): string[] =>\n  buildCombinations(parsePhrase(phrase)).map(text => text.trim());\n\n// This data type holds variants of a single part in whole phrase.\n// Corresponding to syntax as follows:\n//\n//   \"TABLE\"            --> [\"TABLE\"]\n//   \"[TABLE]\"          --> [\"\", \"TABLE\"]\n//   \"[TEMP|TEMPORARY]\" --> [\"\", \"TEMP\", \"TEMPORARY\"]\n//   \"{TEMP|TEMPORARY}\" --> [\"TEMP\", \"TEMPORARY\"]\n//\ntype PhrasePart = string[];\n\nconst REQUIRED_PART = /[^[\\]{}]+/y;\nconst REQUIRED_BLOCK = /\\{.*?\\}/y;\nconst OPTIONAL_BLOCK = /\\[.*?\\]/y;\n\nconst parsePhrase = (text: string): PhrasePart[] => {\n  let index = 0;\n  const result: PhrasePart[] = [];\n  while (index < text.length) {\n    // Match everything else outside of \"[...]\" or \"{...}\" blocks\n    REQUIRED_PART.lastIndex = index;\n    const requiredMatch = REQUIRED_PART.exec(text);\n    if (requiredMatch) {\n      result.push([requiredMatch[0].trim()]);\n      index += requiredMatch[0].length;\n    }\n\n    // Match \"[...]\" block\n    OPTIONAL_BLOCK.lastIndex = index;\n    const optionalBlockMatch = OPTIONAL_BLOCK.exec(text);\n    if (optionalBlockMatch) {\n      const choices = optionalBlockMatch[0]\n        .slice(1, -1)\n        .split('|')\n        .map(s => s.trim());\n      result.push(['', ...choices]);\n      index += optionalBlockMatch[0].length;\n    }\n\n    // Match \"{...}\" block\n    REQUIRED_BLOCK.lastIndex = index;\n    const requiredBlockMatch = REQUIRED_BLOCK.exec(text);\n    if (requiredBlockMatch) {\n      const choices = requiredBlockMatch[0]\n        .slice(1, -1)\n        .split('|')\n        .map(s => s.trim());\n      result.push(choices);\n      index += requiredBlockMatch[0].length;\n    }\n\n    if (!requiredMatch && !optionalBlockMatch && !requiredBlockMatch) {\n      throw new Error(`Unbalanced parenthesis in: ${text}`);\n    }\n  }\n  return result;\n};\n\nconst buildCombinations = ([first, ...rest]: PhrasePart[]): string[] => {\n  if (first === undefined) {\n    return [''];\n  }\n  return buildCombinations(rest).flatMap(tail =>\n    first.map(head => head.trim() + ' ' + tail.trim())\n  );\n};\n","import { flatKeywordList } from '../../utils';\n\nexport const keywords = flatKeywordList({\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#reserved_keywords\n  keywords: [\n    'ALL',\n    'AND',\n    'ANY',\n    'ARRAY',\n    'AS',\n    'ASC',\n    'ASSERT_ROWS_MODIFIED',\n    'AT',\n    'BETWEEN',\n    'BY',\n    'CASE',\n    'CAST',\n    'COLLATE',\n    'CONTAINS',\n    'CREATE',\n    'CROSS',\n    'CUBE',\n    'CURRENT',\n    'DEFAULT',\n    'DEFINE',\n    'DESC',\n    'DISTINCT',\n    'ELSE',\n    'END',\n    'ENUM',\n    'ESCAPE',\n    'EXCEPT',\n    'EXCLUDE',\n    'EXISTS',\n    'EXTRACT',\n    'FALSE',\n    'FETCH',\n    'FOLLOWING',\n    'FOR',\n    'FROM',\n    'FULL',\n    'GROUP',\n    'GROUPING',\n    'GROUPS',\n    'HASH',\n    'HAVING',\n    'IF',\n    'IGNORE',\n    'IN',\n    'INNER',\n    'INTERSECT',\n    'INTERVAL',\n    'INTO',\n    'IS',\n    'JOIN',\n    'LATERAL',\n    'LEFT',\n    'LIKE',\n    'LIMIT',\n    'LOOKUP',\n    'MERGE',\n    'NATURAL',\n    'NEW',\n    'NO',\n    'NOT',\n    'NULL',\n    'NULLS',\n    'OF',\n    'ON',\n    'OR',\n    'ORDER',\n    'OUTER',\n    'OVER',\n    'PARTITION',\n    'PRECEDING',\n    'PROTO',\n    'RANGE',\n    'RECURSIVE',\n    'RESPECT',\n    'RIGHT',\n    'ROLLUP',\n    'ROWS',\n    'SELECT',\n    'SET',\n    'SOME',\n    'STRUCT',\n    'TABLE',\n    'TABLESAMPLE',\n    'THEN',\n    'TO',\n    'TREAT',\n    'TRUE',\n    'UNBOUNDED',\n    'UNION',\n    'UNNEST',\n    'USING',\n    'WHEN',\n    'WHERE',\n    'WINDOW',\n    'WITH',\n    'WITHIN',\n  ],\n  datatypes: [\n    'ARRAY', // parametric, ARRAY<T>\n    'BOOL',\n    'BYTES', // parameterised, BYTES(Length)\n    'DATE',\n    'DATETIME',\n    'GEOGRAPHY',\n    'INTERVAL',\n    'INT64',\n    'INT',\n    'SMALLINT',\n    'INTEGER',\n    'BIGINT',\n    'TINYINT',\n    'BYTEINT',\n    'NUMERIC', // parameterised, NUMERIC(Precision[, Scale])\n    'DECIMAL', // parameterised, DECIMAL(Precision[, Scale])\n    'BIGNUMERIC', // parameterised, BIGNUMERIC(Precision[, Scale])\n    'BIGDECIMAL', // parameterised, BIGDECIMAL(Precision[, Scale])\n    'FLOAT64',\n    'STRING', // parameterised, STRING(Length)\n    'STRUCT', // parametric, STRUCT<T>\n    'TIME',\n    'TIMEZONE',\n  ],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions#formatting_syntax\n  stringFormat: ['HEX', 'BASEX', 'BASE64M', 'ASCII', 'UTF-8', 'UTF8'],\n  misc: ['SAFE'],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language\n  ddl: [\n    'LIKE', // CREATE TABLE LIKE\n    'COPY', // CREATE TABLE COPY\n    'CLONE', // CREATE TABLE CLONE\n    'IN',\n    'OUT',\n    'INOUT',\n    'RETURNS',\n    'LANGUAGE',\n    'CASCADE',\n    'RESTRICT',\n    'DETERMINISTIC',\n  ],\n});\n","import { flatKeywordList } from '../../utils';\n\nexport const functions = flatKeywordList({\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions\n  aead: [\n    'KEYS.NEW_KEYSET',\n    'KEYS.ADD_KEY_FROM_RAW_BYTES',\n    'AEAD.DECRYPT_BYTES',\n    'AEAD.DECRYPT_STRING',\n    'AEAD.ENCRYPT',\n    'KEYS.KEYSET_CHAIN',\n    'KEYS.KEYSET_FROM_JSON',\n    'KEYS.KEYSET_TO_JSON',\n    'KEYS.ROTATE_KEYSET',\n    'KEYS.KEYSET_LENGTH',\n  ],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_analytic_functions\n  aggregateAnalytic: [\n    'ANY_VALUE',\n    'ARRAY_AGG',\n    'AVG',\n    'CORR',\n    'COUNT',\n    'COUNTIF',\n    'COVAR_POP',\n    'COVAR_SAMP',\n    'MAX',\n    'MIN',\n    'ST_CLUSTERDBSCAN',\n    'STDDEV_POP',\n    'STDDEV_SAMP',\n    'STRING_AGG',\n    'SUM',\n    'VAR_POP',\n    'VAR_SAMP',\n  ],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions\n  aggregate: [\n    'ANY_VALUE',\n    'ARRAY_AGG',\n    'ARRAY_CONCAT_AGG',\n    'AVG',\n    'BIT_AND',\n    'BIT_OR',\n    'BIT_XOR',\n    'COUNT',\n    'COUNTIF',\n    'LOGICAL_AND',\n    'LOGICAL_OR',\n    'MAX',\n    'MIN',\n    'STRING_AGG',\n    'SUM',\n  ],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/approximate_aggregate_functions\n  approximateAggregate: [\n    'APPROX_COUNT_DISTINCT',\n    'APPROX_QUANTILES',\n    'APPROX_TOP_COUNT',\n    'APPROX_TOP_SUM',\n  ],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions\n  array: [\n    // 'ARRAY',\n    'ARRAY_CONCAT',\n    'ARRAY_LENGTH',\n    'ARRAY_TO_STRING',\n    'GENERATE_ARRAY',\n    'GENERATE_DATE_ARRAY',\n    'GENERATE_TIMESTAMP_ARRAY',\n    'ARRAY_REVERSE',\n    'OFFSET',\n    'SAFE_OFFSET',\n    'ORDINAL',\n    'SAFE_ORDINAL',\n  ],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/bit_functions\n  bitwise: ['BIT_COUNT'],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions\n  conversion: [\n    // 'CASE',\n    'PARSE_BIGNUMERIC',\n    'PARSE_NUMERIC',\n    'SAFE_CAST',\n  ],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions\n  date: [\n    'CURRENT_DATE',\n    'EXTRACT',\n    'DATE',\n    'DATE_ADD',\n    'DATE_SUB',\n    'DATE_DIFF',\n    'DATE_TRUNC',\n    'DATE_FROM_UNIX_DATE',\n    'FORMAT_DATE',\n    'LAST_DAY',\n    'PARSE_DATE',\n    'UNIX_DATE',\n  ],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions\n  datetime: [\n    'CURRENT_DATETIME',\n    'DATETIME',\n    'EXTRACT',\n    'DATETIME_ADD',\n    'DATETIME_SUB',\n    'DATETIME_DIFF',\n    'DATETIME_TRUNC',\n    'FORMAT_DATETIME',\n    'LAST_DAY',\n    'PARSE_DATETIME',\n  ],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/debugging_functions\n  debugging: ['ERROR'],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/federated_query_functions\n  federatedQuery: ['EXTERNAL_QUERY'],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions\n  geography: [\n    'S2_CELLIDFROMPOINT',\n    'S2_COVERINGCELLIDS',\n    'ST_ANGLE',\n    'ST_AREA',\n    'ST_ASBINARY',\n    'ST_ASGEOJSON',\n    'ST_ASTEXT',\n    'ST_AZIMUTH',\n    'ST_BOUNDARY',\n    'ST_BOUNDINGBOX',\n    'ST_BUFFER',\n    'ST_BUFFERWITHTOLERANCE',\n    'ST_CENTROID',\n    'ST_CENTROID_AGG',\n    'ST_CLOSESTPOINT',\n    'ST_CLUSTERDBSCAN',\n    'ST_CONTAINS',\n    'ST_CONVEXHULL',\n    'ST_COVEREDBY',\n    'ST_COVERS',\n    'ST_DIFFERENCE',\n    'ST_DIMENSION',\n    'ST_DISJOINT',\n    'ST_DISTANCE',\n    'ST_DUMP',\n    'ST_DWITHIN',\n    'ST_ENDPOINT',\n    'ST_EQUALS',\n    'ST_EXTENT',\n    'ST_EXTERIORRING',\n    'ST_GEOGFROM',\n    'ST_GEOGFROMGEOJSON',\n    'ST_GEOGFROMTEXT',\n    'ST_GEOGFROMWKB',\n    'ST_GEOGPOINT',\n    'ST_GEOGPOINTFROMGEOHASH',\n    'ST_GEOHASH',\n    'ST_GEOMETRYTYPE',\n    'ST_INTERIORRINGS',\n    'ST_INTERSECTION',\n    'ST_INTERSECTS',\n    'ST_INTERSECTSBOX',\n    'ST_ISCOLLECTION',\n    'ST_ISEMPTY',\n    'ST_LENGTH',\n    'ST_MAKELINE',\n    'ST_MAKEPOLYGON',\n    'ST_MAKEPOLYGONORIENTED',\n    'ST_MAXDISTANCE',\n    'ST_NPOINTS',\n    'ST_NUMGEOMETRIES',\n    'ST_NUMPOINTS',\n    'ST_PERIMETER',\n    'ST_POINTN',\n    'ST_SIMPLIFY',\n    'ST_SNAPTOGRID',\n    'ST_STARTPOINT',\n    'ST_TOUCHES',\n    'ST_UNION',\n    'ST_UNION_AGG',\n    'ST_WITHIN',\n    'ST_X',\n    'ST_Y',\n  ],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/hash_functions\n  hash: ['FARM_FINGERPRINT', 'MD5', 'SHA1', 'SHA256', 'SHA512'],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/hll_functions\n  hll: ['HLL_COUNT.INIT', 'HLL_COUNT.MERGE', 'HLL_COUNT.MERGE_PARTIAL', 'HLL_COUNT.EXTRACT'],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/interval_functions\n  interval: ['MAKE_INTERVAL', 'EXTRACT', 'JUSTIFY_DAYS', 'JUSTIFY_HOURS', 'JUSTIFY_INTERVAL'],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions\n  json: [\n    'JSON_EXTRACT',\n    'JSON_QUERY',\n    'JSON_EXTRACT_SCALAR',\n    'JSON_VALUE',\n    'JSON_EXTRACT_ARRAY',\n    'JSON_QUERY_ARRAY',\n    'JSON_EXTRACT_STRING_ARRAY',\n    'JSON_VALUE_ARRAY',\n    'TO_JSON_STRING',\n  ],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions\n  math: [\n    'ABS',\n    'SIGN',\n    'IS_INF',\n    'IS_NAN',\n    'IEEE_DIVIDE',\n    'RAND',\n    'SQRT',\n    'POW',\n    'POWER',\n    'EXP',\n    'LN',\n    'LOG',\n    'LOG10',\n    'GREATEST',\n    'LEAST',\n    'DIV',\n    'SAFE_DIVIDE',\n    'SAFE_MULTIPLY',\n    'SAFE_NEGATE',\n    'SAFE_ADD',\n    'SAFE_SUBTRACT',\n    'MOD',\n    'ROUND',\n    'TRUNC',\n    'CEIL',\n    'CEILING',\n    'FLOOR',\n    'COS',\n    'COSH',\n    'ACOS',\n    'ACOSH',\n    'SIN',\n    'SINH',\n    'ASIN',\n    'ASINH',\n    'TAN',\n    'TANH',\n    'ATAN',\n    'ATANH',\n    'ATAN2',\n    'RANGE_BUCKET',\n  ],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions\n  navigation: [\n    'FIRST_VALUE',\n    'LAST_VALUE',\n    'NTH_VALUE',\n    'LEAD',\n    'LAG',\n    'PERCENTILE_CONT',\n    'PERCENTILE_DISC',\n  ],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/net_functions\n  net: [\n    'NET.IP_FROM_STRING',\n    'NET.SAFE_IP_FROM_STRING',\n    'NET.IP_TO_STRING',\n    'NET.IP_NET_MASK',\n    'NET.IP_TRUNC',\n    'NET.IPV4_FROM_INT64',\n    'NET.IPV4_TO_INT64',\n    'NET.HOST',\n    'NET.PUBLIC_SUFFIX',\n    'NET.REG_DOMAIN',\n  ],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions\n  numbering: ['RANK', 'DENSE_RANK', 'PERCENT_RANK', 'CUME_DIST', 'NTILE', 'ROW_NUMBER'],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/security_functions\n  security: ['SESSION_USER'],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions\n  statisticalAggregate: [\n    'CORR',\n    'COVAR_POP',\n    'COVAR_SAMP',\n    'STDDEV_POP',\n    'STDDEV_SAMP',\n    'STDDEV',\n    'VAR_POP',\n    'VAR_SAMP',\n    'VARIANCE',\n  ],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions\n  string: [\n    'ASCII',\n    'BYTE_LENGTH',\n    'CHAR_LENGTH',\n    'CHARACTER_LENGTH',\n    'CHR',\n    'CODE_POINTS_TO_BYTES',\n    'CODE_POINTS_TO_STRING',\n    'CONCAT',\n    'CONTAINS_SUBSTR',\n    'ENDS_WITH',\n    'FORMAT',\n    'FROM_BASE32',\n    'FROM_BASE64',\n    'FROM_HEX',\n    'INITCAP',\n    'INSTR',\n    'LEFT',\n    'LENGTH',\n    'LPAD',\n    'LOWER',\n    'LTRIM',\n    'NORMALIZE',\n    'NORMALIZE_AND_CASEFOLD',\n    'OCTET_LENGTH',\n    'REGEXP_CONTAINS',\n    'REGEXP_EXTRACT',\n    'REGEXP_EXTRACT_ALL',\n    'REGEXP_INSTR',\n    'REGEXP_REPLACE',\n    'REGEXP_SUBSTR',\n    'REPLACE',\n    'REPEAT',\n    'REVERSE',\n    'RIGHT',\n    'RPAD',\n    'RTRIM',\n    'SAFE_CONVERT_BYTES_TO_STRING',\n    'SOUNDEX',\n    'SPLIT',\n    'STARTS_WITH',\n    'STRPOS',\n    'SUBSTR',\n    'SUBSTRING',\n    'TO_BASE32',\n    'TO_BASE64',\n    'TO_CODE_POINTS',\n    'TO_HEX',\n    'TRANSLATE',\n    'TRIM',\n    'UNICODE',\n    'UPPER',\n  ],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions\n  time: [\n    'CURRENT_TIME',\n    'TIME',\n    'EXTRACT',\n    'TIME_ADD',\n    'TIME_SUB',\n    'TIME_DIFF',\n    'TIME_TRUNC',\n    'FORMAT_TIME',\n    'PARSE_TIME',\n  ],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions\n  timestamp: [\n    'CURRENT_TIMESTAMP',\n    'EXTRACT',\n    'STRING',\n    'TIMESTAMP',\n    'TIMESTAMP_ADD',\n    'TIMESTAMP_SUB',\n    'TIMESTAMP_DIFF',\n    'TIMESTAMP_TRUNC',\n    'FORMAT_TIMESTAMP',\n    'PARSE_TIMESTAMP',\n    'TIMESTAMP_SECONDS',\n    'TIMESTAMP_MILLIS',\n    'TIMESTAMP_MICROS',\n    'UNIX_SECONDS',\n    'UNIX_MILLIS',\n    'UNIX_MICROS',\n  ],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/uuid_functions\n  uuid: ['GENERATE_UUID'],\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions\n  conditional: ['COALESCE', 'IF', 'IFNULL', 'NULLIF'],\n  // https://cloud.google.com/bigquery/docs/reference/legacy-sql\n  legacyAggregate: [\n    'AVG',\n    'BIT_AND',\n    'BIT_OR',\n    'BIT_XOR',\n    'CORR',\n    'COUNT',\n    'COVAR_POP',\n    'COVAR_SAMP',\n    'EXACT_COUNT_DISTINCT',\n    'FIRST',\n    'GROUP_CONCAT',\n    'GROUP_CONCAT_UNQUOTED',\n    'LAST',\n    'MAX',\n    'MIN',\n    'NEST',\n    'NTH',\n    'QUANTILES',\n    'STDDEV',\n    'STDDEV_POP',\n    'STDDEV_SAMP',\n    'SUM',\n    'TOP',\n    'UNIQUE',\n    'VARIANCE',\n    'VAR_POP',\n    'VAR_SAMP',\n  ],\n  legacyBitwise: ['BIT_COUNT'],\n  legacyCasting: ['BOOLEAN', 'BYTES', 'CAST', 'FLOAT', 'HEX_STRING', 'INTEGER', 'STRING'],\n  legacyComparison: [\n    // expr 'IN',\n    'COALESCE',\n    'GREATEST',\n    'IFNULL',\n    'IS_INF',\n    'IS_NAN',\n    'IS_EXPLICITLY_DEFINED',\n    'LEAST',\n    'NVL',\n  ],\n  legacyDatetime: [\n    'CURRENT_DATE',\n    'CURRENT_TIME',\n    'CURRENT_TIMESTAMP',\n    'DATE',\n    'DATE_ADD',\n    'DATEDIFF',\n    'DAY',\n    'DAYOFWEEK',\n    'DAYOFYEAR',\n    'FORMAT_UTC_USEC',\n    'HOUR',\n    'MINUTE',\n    'MONTH',\n    'MSEC_TO_TIMESTAMP',\n    'NOW',\n    'PARSE_UTC_USEC',\n    'QUARTER',\n    'SEC_TO_TIMESTAMP',\n    'SECOND',\n    'STRFTIME_UTC_USEC',\n    'TIME',\n    'TIMESTAMP',\n    'TIMESTAMP_TO_MSEC',\n    'TIMESTAMP_TO_SEC',\n    'TIMESTAMP_TO_USEC',\n    'USEC_TO_TIMESTAMP',\n    'UTC_USEC_TO_DAY',\n    'UTC_USEC_TO_HOUR',\n    'UTC_USEC_TO_MONTH',\n    'UTC_USEC_TO_WEEK',\n    'UTC_USEC_TO_YEAR',\n    'WEEK',\n    'YEAR',\n  ],\n  legacyIp: ['FORMAT_IP', 'PARSE_IP', 'FORMAT_PACKED_IP', 'PARSE_PACKED_IP'],\n  legacyJson: ['JSON_EXTRACT', 'JSON_EXTRACT_SCALAR'],\n  legacyMath: [\n    'ABS',\n    'ACOS',\n    'ACOSH',\n    'ASIN',\n    'ASINH',\n    'ATAN',\n    'ATANH',\n    'ATAN2',\n    'CEIL',\n    'COS',\n    'COSH',\n    'DEGREES',\n    'EXP',\n    'FLOOR',\n    'LN',\n    'LOG',\n    'LOG2',\n    'LOG10',\n    'PI',\n    'POW',\n    'RADIANS',\n    'RAND',\n    'ROUND',\n    'SIN',\n    'SINH',\n    'SQRT',\n    'TAN',\n    'TANH',\n  ],\n  legacyRegex: ['REGEXP_MATCH', 'REGEXP_EXTRACT', 'REGEXP_REPLACE'],\n  legacyString: [\n    'CONCAT',\n    // expr CONTAINS 'str'\n    'INSTR',\n    'LEFT',\n    'LENGTH',\n    'LOWER',\n    'LPAD',\n    'LTRIM',\n    'REPLACE',\n    'RIGHT',\n    'RPAD',\n    'RTRIM',\n    'SPLIT',\n    'SUBSTR',\n    'UPPER',\n  ],\n  legacyTableWildcard: ['TABLE_DATE_RANGE', 'TABLE_DATE_RANGE_STRICT', 'TABLE_QUERY'],\n  legacyUrl: ['HOST', 'DOMAIN', 'TLD'],\n  legacyWindow: [\n    'AVG',\n    'COUNT',\n    'MAX',\n    'MIN',\n    'STDDEV',\n    'SUM',\n    'CUME_DIST',\n    'DENSE_RANK',\n    'FIRST_VALUE',\n    'LAG',\n    'LAST_VALUE',\n    'LEAD',\n    'NTH_VALUE',\n    'NTILE',\n    'PERCENT_RANK',\n    'PERCENTILE_CONT',\n    'PERCENTILE_DISC',\n    'RANK',\n    'RATIO_TO_REPORT',\n    'ROW_NUMBER',\n  ],\n  legacyMisc: [\n    'CURRENT_USER',\n    'EVERY',\n    'FROM_BASE64',\n    'HASH',\n    'FARM_FINGERPRINT',\n    'IF',\n    'POSITION',\n    'SHA1',\n    'SOME',\n    'TO_BASE64',\n  ],\n  other: ['BQ.JOBS.CANCEL', 'BQ.REFRESH_MATERIALIZED_VIEW'],\n  ddl: ['OPTIONS'],\n  pivot: ['PIVOT', 'UNPIVOT'],\n  // Data types with parameters like VARCHAR(100)\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#parameterized_data_types\n  dataTypes: ['BYTES', 'NUMERIC', 'DECIMAL', 'BIGNUMERIC', 'BIGDECIMAL', 'STRING'],\n});\n","import Formatter from 'src/formatter/Formatter';\nimport Tokenizer from 'src/lexer/Tokenizer';\nimport { EOF_TOKEN, isToken, TokenType, type Token } from 'src/lexer/token';\nimport { expandPhrases } from 'src/expandPhrases';\nimport { keywords } from './bigquery.keywords';\nimport { functions } from './bigquery.functions';\n\nconst reservedCommands = expandPhrases([\n  // Queries: https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax\n  'WITH [RECURSIVE]',\n  'SELECT [ALL | DISTINCT] [AS STRUCT | AS VALUE]',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'QUALIFY',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  'OMIT RECORD IF', // legacy\n  // Data modification: https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax\n  // - insert:\n  'INSERT [INTO]',\n  'VALUES',\n  // - update:\n  'UPDATE',\n  'SET',\n  // - delete:\n  'DELETE [FROM]',\n  // - truncate:\n  'TRUNCATE TABLE',\n  // - merge:\n  'MERGE [INTO]',\n  'WHEN [NOT] MATCHED [BY SOURCE | BY TARGET] [THEN]',\n  'UPDATE SET',\n  // Data definition, https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language\n  'CREATE [OR REPLACE] [MATERIALIZED] VIEW [IF NOT EXISTS]',\n  'CREATE [OR REPLACE] [TEMP|TEMPORARY|SNAPSHOT|EXTERNAL] TABLE [IF NOT EXISTS]',\n  'DROP [SNAPSHOT | EXTERNAL] TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER TABLE [IF EXISTS]',\n  'ADD COLUMN [IF NOT EXISTS]',\n  'DROP COLUMN [IF EXISTS]',\n  'RENAME TO',\n  'ALTER COLUMN [IF EXISTS]',\n  'SET DEFAULT COLLATE', // for alter column\n  'SET OPTIONS', // for alter column\n  'DROP NOT NULL', // for alter column\n  'SET DATA TYPE', // for alter column\n\n  'CREATE SCHEMA [IF NOT EXISTS]',\n  'DEFAULT COLLATE',\n  'CLUSTER BY',\n  'FOR SYSTEM_TIME AS OF', // CREATE SNAPSHOT TABLE\n  'WITH CONNECTION',\n  'WITH PARTITION COLUMNS',\n  'CREATE [OR REPLACE] [TEMP|TEMPORARY|TABLE] FUNCTION [IF NOT EXISTS]',\n  'REMOTE WITH CONNECTION',\n  'RETURNS TABLE',\n  'CREATE [OR REPLACE] PROCEDURE [IF NOT EXISTS]',\n  'CREATE [OR REPLACE] ROW ACCESS POLICY [IF NOT EXISTS]',\n  'GRANT TO',\n  'FILTER USING',\n  'CREATE CAPACITY',\n  'AS JSON',\n  'CREATE RESERVATION',\n  'CREATE ASSIGNMENT',\n  'CREATE SEARCH INDEX [IF NOT EXISTS]',\n  'ALTER SCHEMA [IF EXISTS]',\n\n  'ALTER [MATERIALIZED] VIEW [IF EXISTS]',\n  'ALTER BI_CAPACITY',\n  'DROP SCHEMA [IF EXISTS]',\n  'DROP [MATERIALIZED] VIEW [IF EXISTS]',\n  'DROP [TABLE] FUNCTION [IF EXISTS]',\n  'DROP PROCEDURE [IF EXISTS]',\n  'DROP ROW ACCESS POLICY',\n  'DROP ALL ROW ACCESS POLICIES',\n  'DROP CAPACITY [IF EXISTS]',\n  'DROP RESERVATION [IF EXISTS]',\n  'DROP ASSIGNMENT [IF EXISTS]',\n  'DROP SEARCH INDEX [IF EXISTS]',\n  'DROP [IF EXISTS]',\n  // DCL, https://cloud.google.com/bigquery/docs/reference/standard-sql/data-control-language\n  'GRANT',\n  'REVOKE',\n  // Script, https://cloud.google.com/bigquery/docs/reference/standard-sql/scripting\n  'DECLARE',\n  'EXECUTE IMMEDIATE',\n  'LOOP',\n  'END LOOP',\n  'REPEAT',\n  'END REPEAT',\n  'WHILE',\n  'END WHILE',\n  'BREAK',\n  'LEAVE',\n  'CONTINUE',\n  'ITERATE',\n  'FOR',\n  'END FOR',\n  'BEGIN',\n  'BEGIN TRANSACTION',\n  'COMMIT TRANSACTION',\n  'ROLLBACK TRANSACTION',\n  'RAISE',\n  'RETURN',\n  'CALL',\n  // Debug, https://cloud.google.com/bigquery/docs/reference/standard-sql/debugging-statements\n  'ASSERT',\n  // Other, https://cloud.google.com/bigquery/docs/reference/standard-sql/other-statements\n  'EXPORT DATA',\n]);\n\nconst reservedSetOperations = expandPhrases([\n  'UNION {ALL | DISTINCT}',\n  'EXCEPT DISTINCT',\n  'INTERSECT DISTINCT',\n]);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n]);\n\nconst reservedPhrases = [\n  // https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#tablesample_operator\n  'TABLESAMPLE SYSTEM',\n  // From DDL: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language\n  'ANY TYPE',\n  'ALL COLUMNS',\n  'NOT DETERMINISTIC',\n];\n\n// https://cloud.google.com/bigquery/docs/reference/#standard-sql-reference\nexport default class BigQueryFormatter extends Formatter {\n  static operators = ['~', '>>', '<<', '||'];\n  // TODO: handle trailing comma in select clause\n\n  tokenizer() {\n    return new Tokenizer({\n      reservedCommands,\n      reservedSetOperations,\n      reservedJoins,\n      reservedDependentClauses: ['WHEN', 'ELSE'],\n      reservedPhrases,\n      reservedKeywords: keywords,\n      reservedFunctionNames: functions,\n      openParens: ['(', '['],\n      closeParens: [')', ']'],\n      stringTypes: [\n        // The triple-quoted strings are listed first, so they get matched first.\n        // Otherwise the first two quotes of \"\"\" will get matched as an empty \"\" string.\n        { quote: '\"\"\"..\"\"\"', prefixes: ['R', 'B', 'RB', 'BR'] },\n        { quote: \"'''..'''\", prefixes: ['R', 'B', 'RB', 'BR'] },\n        { quote: '\"\"', prefixes: ['R', 'B', 'RB', 'BR'] },\n        { quote: \"''\", prefixes: ['R', 'B', 'RB', 'BR'] },\n      ],\n      identTypes: ['``'],\n      identChars: { dashes: true },\n      paramTypes: { positional: true, named: ['@'], quoted: ['@'] },\n      lineCommentTypes: ['--', '#'],\n      operators: BigQueryFormatter.operators,\n      postProcess,\n    });\n  }\n}\n\nfunction postProcess(tokens: Token[]): Token[] {\n  return detectArraySubscripts(combineParameterizedTypes(tokens));\n}\n\n// Converts OFFSET token inside array from RESERVED_COMMAND to RESERVED_FUNCTION_NAME\n// See: https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#array_subscript_operator\nfunction detectArraySubscripts(tokens: Token[]) {\n  let prevToken = EOF_TOKEN;\n  return tokens.map(token => {\n    if (token.text === 'OFFSET' && prevToken.text === '[') {\n      prevToken = token;\n      return { ...token, type: TokenType.RESERVED_FUNCTION_NAME };\n    } else {\n      prevToken = token;\n      return token;\n    }\n  });\n}\n\n// Combines multiple tokens forming a parameterized type like STRUCT<ARRAY<INT64>> into a single token\nfunction combineParameterizedTypes(tokens: Token[]) {\n  const processed: Token[] = [];\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n\n    if ((isToken.ARRAY(token) || isToken.STRUCT(token)) && tokens[i + 1]?.text === '<') {\n      const endIndex = findClosingAngleBracketIndex(tokens, i + 1);\n      const typeDefTokens = tokens.slice(i, endIndex + 1);\n      processed.push({\n        type: TokenType.IDENTIFIER,\n        raw: typeDefTokens.map(formatTypeDefToken('raw')).join(''),\n        text: typeDefTokens.map(formatTypeDefToken('text')).join(''),\n        start: token.start,\n        end: token.end + typeDefTokens.map(t => t.text.length).reduce((a, b) => a + b),\n      });\n      i = endIndex;\n    } else {\n      processed.push(token);\n    }\n  }\n  return processed;\n}\n\nconst formatTypeDefToken =\n  (key: Extract<keyof Token, 'raw' | 'text'>) =>\n  (token: Token): string => {\n    if (token.type === TokenType.IDENTIFIER || token.type === TokenType.COMMA) {\n      return token[key] + ' ';\n    } else {\n      return token[key];\n    }\n  };\n\nfunction findClosingAngleBracketIndex(tokens: Token[], startIndex: number): number {\n  let level = 0;\n  for (let i = startIndex; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (token.text === '<') {\n      level++;\n    } else if (token.text === '>') {\n      level--;\n    } else if (token.text === '>>') {\n      level -= 2;\n    }\n    if (level === 0) {\n      return i;\n    }\n  }\n  return tokens.length - 1;\n}\n","import { flatKeywordList } from '../../utils';\n\nexport const functions = flatKeywordList({\n  // https://www.ibm.com/docs/en/db2-for-zos/11?topic=functions-aggregate\n  aggregate: [\n    'ARRAY_AGG',\n    'AVG',\n    'CORR',\n    'CORRELATION',\n    'COUNT',\n    'COUNT_BIG',\n    'COVAR_POP',\n    'COVARIANCE',\n    'COVAR',\n    'COVAR_SAMP',\n    'COVARIANCE_SAMP',\n    'CUME_DIST',\n    'GROUPING',\n    'LISTAGG',\n    'MAX',\n    'MEDIAN',\n    'MIN',\n    'PERCENTILE_CONT',\n    'PERCENTILE_DISC',\n    'PERCENT_RANK',\n    'REGR_AVGX',\n    'REGR_AVGY',\n    'REGR_COUNT',\n    'REGR_INTERCEPT',\n    'REGR_ICPT',\n    'REGR_R2',\n    'REGR_SLOPE',\n    'REGR_SXX',\n    'REGR_SXY',\n    'REGR_SYY',\n    'STDDEV_POP',\n    'STDDEV',\n    'STDDEV_SAMP',\n    'SUM',\n    'VAR_POP',\n    'VARIANCE',\n    'VAR',\n    'VAR_SAMP',\n    'VARIANCE_SAMP',\n    'XMLAGG',\n  ],\n  // https://www.ibm.com/docs/en/db2-for-zos/11?topic=functions-scalar\n  scalar: [\n    'ABS',\n    'ABSVAL',\n    'ACOS',\n    'ADD_DAYS',\n    'ADD_MONTHS',\n    'ARRAY_DELETE',\n    'ARRAY_FIRST',\n    'ARRAY_LAST',\n    'ARRAY_NEXT',\n    'ARRAY_PRIOR',\n    'ARRAY_TRIM',\n    'ASCII',\n    'ASCII_CHR',\n    'ASCII_STR',\n    'ASCIISTR',\n    'ASIN',\n    'ATAN',\n    'ATANH',\n    'ATAN2',\n    'BIGINT',\n    'BINARY',\n    'BITAND',\n    'BITANDNOT',\n    'BITOR',\n    'BITXOR',\n    'BITNOT',\n    'BLOB',\n    'BTRIM',\n    'CARDINALITY',\n    'CCSID_ENCODING',\n    'CEILING',\n    'CEIL',\n    'CHAR',\n    'CHAR9',\n    'CHARACTER_LENGTH',\n    'CHAR_LENGTH',\n    'CHR',\n    'CLOB',\n    'COALESCE',\n    'COLLATION_KEY',\n    'COMPARE_DECFLOAT',\n    'CONCAT',\n    'CONTAINS',\n    'COS',\n    'COSH',\n    'DATE',\n    'DAY',\n    'DAYOFMONTH',\n    'DAYOFWEEK',\n    'DAYOFWEEK_ISO',\n    'DAYOFYEAR',\n    'DAYS',\n    'DAYS_BETWEEN',\n    'DBCLOB',\n    'DECFLOAT',\n    'DECFLOAT_FORMAT',\n    'DECFLOAT_SORTKEY',\n    'DECIMAL',\n    'DEC',\n    'DECODE',\n    'DECRYPT_BINARY',\n    'DECRYPT_BIT',\n    'DECRYPT_CHAR',\n    'DECRYPT_DB',\n    'DECRYPT_DATAKEY_BIGINT',\n    'DECRYPT_DATAKEY_BIT',\n    'DECRYPT_DATAKEY_CLOB',\n    'DECRYPT_DATAKEY_DBCLOB',\n    'DECRYPT_DATAKEY_DECIMAL',\n    'DECRYPT_DATAKEY_INTEGER',\n    'DECRYPT_DATAKEY_VARCHAR',\n    'DECRYPT_DATAKEY_VARGRAPHIC',\n    'DEGREES',\n    'DIFFERENCE',\n    'DIGITS',\n    'DOUBLE_PRECISION',\n    'DOUBLE',\n    'DSN_XMLVALIDATE',\n    'EBCDIC_CHR',\n    'EBCDIC_STR',\n    'ENCRYPT_DATAKEY',\n    'ENCRYPT_TDES',\n    'EXP',\n    'EXTRACT',\n    'FLOAT',\n    'FLOOR',\n    'GENERATE_UNIQUE',\n    'GENERATE_UNIQUE_BINARY',\n    'GETHINT',\n    'GETVARIABLE',\n    'GRAPHIC',\n    'GREATEST',\n    'HASH',\n    'HASH_CRC32',\n    'HASH_MD5',\n    'HASH_SHA1',\n    'HASH_SHA256',\n    'HEX',\n    'HOUR',\n    'IDENTITY_VAL_LOCAL',\n    'IFNULL',\n    'INSERT',\n    'INSTR',\n    'INTEGER',\n    'INT',\n    'JULIAN_DAY',\n    'LAST_DAY',\n    'LCASE',\n    'LEAST',\n    'LEFT',\n    'LENGTH',\n    'LN',\n    'LOCATE',\n    'LOCATE_IN_STRING',\n    'LOG10',\n    'LOWER',\n    'LPAD',\n    'LTRIM',\n    'MAX',\n    'MAX_CARDINALITY',\n    'MICROSECOND',\n    'MIDNIGHT_SECONDS',\n    'MIN',\n    'MINUTE',\n    'MOD',\n    'MONTH',\n    'MONTHS_BETWEEN',\n    'MQREAD',\n    'MQREADCLOB',\n    'MQRECEIVE',\n    'MQRECEIVECLOB',\n    'MQSEND',\n    'MULTIPLY_ALT',\n    'NEXT_DAY',\n    'NEXT_MONTH',\n    'NORMALIZE_DECFLOAT',\n    'NORMALIZE_STRING',\n    'NULLIF',\n    'NVL',\n    'OVERLAY',\n    'PACK',\n    'POSITION',\n    'POSSTR',\n    'POWER',\n    'POW',\n    'QUANTIZE',\n    'QUARTER',\n    'RADIANS',\n    'RAISE_ERROR',\n    'RANDOM',\n    'RAND',\n    'REAL',\n    'REGEXP_COUNT',\n    'REGEXP_INSTR',\n    'REGEXP_LIKE',\n    'REGEXP_REPLACE',\n    'REGEXP_SUBSTR',\n    'REPEAT',\n    'REPLACE',\n    'RID',\n    'RIGHT',\n    'ROUND',\n    'ROUND_TIMESTAMP',\n    'ROWID',\n    'RPAD',\n    'RTRIM',\n    'SCORE',\n    'SECOND',\n    'SIGN',\n    'SIN',\n    'SINH',\n    'SMALLINT',\n    'SOUNDEX',\n    'SOAPHTTPC',\n    'SOAPHTTPV',\n    'SOAPHTTPNC',\n    'SOAPHTTPNV',\n    'SPACE',\n    'SQRT',\n    'STRIP',\n    'STRLEFT',\n    'STRPOS',\n    'STRRIGHT',\n    'SUBSTR',\n    'SUBSTRING',\n    'TAN',\n    'TANH',\n    'TIME',\n    'TIMESTAMP',\n    'TIMESTAMPADD',\n    'TIMESTAMPDIFF',\n    'TIMESTAMP_FORMAT',\n    'TIMESTAMP_ISO',\n    'TIMESTAMP_TZ',\n    'TO_CHAR',\n    'TO_CLOB',\n    'TO_DATE',\n    'TO_NUMBER',\n    'TOTALORDER',\n    'TO_TIMESTAMP',\n    'TRANSLATE',\n    'TRIM',\n    'TRIM_ARRAY',\n    'TRUNCATE',\n    'TRUNC',\n    'TRUNC_TIMESTAMP',\n    'UCASE',\n    'UNICODE',\n    'UNICODE_STR',\n    'UNISTR',\n    'UPPER',\n    'VALUE',\n    'VARBINARY',\n    'VARCHAR',\n    'VARCHAR9',\n    'VARCHAR_BIT_FORMAT',\n    'VARCHAR_FORMAT',\n    'VARGRAPHIC',\n    'VERIFY_GROUP_FOR_USER',\n    'VERIFY_ROLE_FOR_USER',\n    'VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER',\n    'WEEK',\n    'WEEK_ISO',\n    'WRAP',\n    'XMLATTRIBUTES',\n    'XMLCOMMENT',\n    'XMLCONCAT',\n    'XMLDOCUMENT',\n    'XMLELEMENT',\n    'XMLFOREST',\n    'XMLMODIFY',\n    'XMLNAMESPACES',\n    'XMLPARSE',\n    'XMLPI',\n    'XMLQUERY',\n    'XMLSERIALIZE',\n    'XMLTEXT',\n    'XMLXSROBJECTID',\n    'XSLTRANSFORM',\n    'YEAR',\n  ],\n  // https://www.ibm.com/docs/en/db2-for-zos/11?topic=functions-table\n  table: [\n    'ADMIN_TASK_LIST',\n    'ADMIN_TASK_OUTPUT',\n    'ADMIN_TASK_STATUS',\n    'BLOCKING_THREADS',\n    'MQREADALL',\n    'MQREADALLCLOB',\n    'MQRECEIVEALL',\n    'MQRECEIVEALLCLOB',\n    'XMLTABLE',\n  ],\n  // https://www.ibm.com/docs/en/db2-for-zos/11?topic=functions-row\n  row: ['UNPACK'],\n  // https://www.ibm.com/docs/en/db2-for-zos/12?topic=expressions-olap-specification\n  olap: ['FIRST_VALUE', 'LAG', 'LAST_VALUE', 'LEAD', 'NTH_VALUE', 'NTILE', 'RATIO_TO_REPORT'],\n  // Type casting\n  cast: ['CAST'],\n});\n","import { flatKeywordList } from '../../utils';\n\nexport const keywords = flatKeywordList({\n  // https://www.ibm.com/docs/en/db2-for-zos/11?topic=words-reserved#db2z_reservedwords__newresword\n  standard: [\n    'ALL',\n    'ALLOCATE',\n    'ALLOW',\n    'ALTERAND',\n    'ANY',\n    'AS',\n    'ARRAY',\n    'ARRAY_EXISTS',\n    'ASENSITIVE',\n    'ASSOCIATE',\n    'ASUTIME',\n    'AT',\n    'AUDIT',\n    'AUX',\n    'AUXILIARY',\n    'BEFORE',\n    'BEGIN',\n    'BETWEEN',\n    'BUFFERPOOL',\n    'BY',\n    'CAPTURE',\n    'CASCADED',\n    'CAST',\n    'CCSID',\n    'CHARACTER',\n    'CHECK',\n    'CLONE',\n    'CLUSTER',\n    'COLLECTION',\n    'COLLID',\n    'COLUMN',\n    'CONDITION',\n    'CONNECTION',\n    'CONSTRAINT',\n    'CONTENT',\n    'CONTINUE',\n    'CREATE',\n    'CUBE',\n    'CURRENT',\n    'CURRENT_DATE',\n    'CURRENT_LC_CTYPE',\n    'CURRENT_PATH',\n    'CURRENT_SCHEMA',\n    'CURRENT_TIME',\n    'CURRENT_TIMESTAMP',\n    'CURRVAL',\n    'CURSOR',\n    'DATA',\n    'DATABASE',\n    'DBINFO',\n    'DECLARE',\n    'DEFAULT',\n    'DESCRIPTOR',\n    'DETERMINISTIC',\n    'DISABLE',\n    'DISALLOW',\n    'DISTINCT',\n    'DO',\n    'DOCUMENT',\n    'DSSIZE',\n    'DYNAMIC',\n    'EDITPROC',\n    'ENCODING',\n    'ENCRYPTION',\n    'ENDING',\n    'END-EXEC',\n    'ERASE',\n    'ESCAPE',\n    'EXCEPTION',\n    'EXISTS',\n    'EXIT',\n    'EXTERNAL',\n    'FENCED',\n    'FIELDPROC',\n    'FINAL',\n    'FIRST',\n    'FOR',\n    'FREE',\n    'FULL',\n    'FUNCTION',\n    'GENERATED',\n    'GET',\n    'GLOBAL',\n    'GOTO',\n    'GROUP',\n    'HANDLER',\n    'HOLD',\n    'HOURS',\n    'IF',\n    'IMMEDIATE',\n    'IN',\n    'INCLUSIVE',\n    'INDEX',\n    'INHERIT',\n    'INNER',\n    'INOUT',\n    'INSENSITIVE',\n    'INTO',\n    'IS',\n    'ISOBID',\n    'ITERATE',\n    'JAR',\n    'KEEP',\n    'KEY',\n    'LANGUAGE',\n    'LAST',\n    'LC_CTYPE',\n    'LEAVE',\n    'LIKE',\n    'LOCAL',\n    'LOCALE',\n    'LOCATOR',\n    'LOCATORS',\n    'LOCK',\n    'LOCKMAX',\n    'LOCKSIZE',\n    'LONG',\n    'LOOP',\n    'MAINTAINED',\n    'MATERIALIZED',\n    'MICROSECONDS',\n    'MINUTEMINUTES',\n    'MODIFIES',\n    'MONTHS',\n    'NEXT',\n    'NEXTVAL',\n    'NO',\n    'NONE',\n    'NOT',\n    'NULL',\n    'NULLS',\n    'NUMPARTS',\n    'OBID',\n    'OF',\n    'OLD',\n    'ON',\n    'OPTIMIZATION',\n    'OPTIMIZE',\n    'ORDER',\n    'ORGANIZATION',\n    'OUT',\n    'OUTER',\n    'PACKAGE',\n    'PARAMETER',\n    'PART',\n    'PADDED',\n    'PARTITION',\n    'PARTITIONED',\n    'PARTITIONING',\n    'PATH',\n    'PIECESIZE',\n    'PERIOD',\n    'PLAN',\n    'PRECISION',\n    'PREVVAL',\n    'PRIOR',\n    'PRIQTY',\n    'PRIVILEGES',\n    'PROCEDURE',\n    'PROGRAM',\n    'PSID',\n    'PUBLIC',\n    'QUERY',\n    'QUERYNO',\n    'READS',\n    'REFERENCES',\n    'RESIGNAL',\n    'RESTRICT',\n    'RESULT',\n    'RESULT_SET_LOCATOR',\n    'RETURN',\n    'RETURNS',\n    'ROLE',\n    'ROLLUP',\n    'ROUND_CEILING',\n    'ROUND_DOWN',\n    'ROUND_FLOOR',\n    'ROUND_HALF_DOWN',\n    'ROUND_HALF_EVEN',\n    'ROUND_HALF_UP',\n    'ROUND_UP',\n    'ROW',\n    'ROWSET',\n    'SCHEMA',\n    'SCRATCHPAD',\n    'SECONDS',\n    'SECQTY',\n    'SECURITY',\n    'SEQUENCE',\n    'SENSITIVE',\n    'SESSION_USER',\n    'SIMPLE',\n    'SOME',\n    'SOURCE',\n    'SPECIFIC',\n    'STANDARD',\n    'STATIC',\n    'STATEMENT',\n    'STAY',\n    'STOGROUP',\n    'STORES',\n    'STYLE',\n    'SUMMARY',\n    'SYNONYM',\n    'SYSDATE',\n    'SYSTEM',\n    'SYSTIMESTAMP',\n    'TABLE',\n    'TABLESPACE',\n    'THEN',\n    'TO',\n    'TRIGGER',\n    'TYPE',\n    'UNDO',\n    'UNIQUE',\n    'UNTIL',\n    'USER',\n    'USING',\n    'VALIDPROC',\n    'VARIABLE',\n    'VARIANT',\n    'VCAT',\n    'VERSIONING',\n    'VIEW',\n    'VOLATILE',\n    'VOLUMES',\n    'WHILE',\n    'WLM',\n    'XMLEXISTS',\n    'XMLCAST',\n    'YEARS',\n    'ZONE',\n  ],\n});\n","import { expandPhrases } from 'src/expandPhrases';\nimport Formatter from 'src/formatter/Formatter';\nimport Tokenizer from 'src/lexer/Tokenizer';\nimport { functions } from './db2.functions';\nimport { keywords } from './db2.keywords';\n\nconst reservedCommands = expandPhrases([\n  // queries\n  'WITH',\n  'SELECT [ALL | DISTINCT]',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'ORDER BY [INPUT SEQUENCE]',\n  'FETCH FIRST',\n  // Data modification\n  // - insert:\n  'INSERT INTO',\n  'VALUES',\n  // - update:\n  'UPDATE',\n  'SET',\n  'WHERE CURRENT OF',\n  'WITH {RR | RS | CS | UR}',\n  // - delete:\n  'DELETE FROM',\n  // - truncate:\n  'TRUNCATE [TABLE]',\n  // - merge:\n  'MERGE INTO',\n  'WHEN [NOT] MATCHED [THEN]',\n  'UPDATE SET',\n  'INSERT',\n  // Data definition\n  'CREATE [OR REPLACE] VIEW',\n  'CREATE [GLOBAL TEMPORARY] TABLE',\n  'DROP TABLE [HIERARCHY]',\n  // alter table:\n  'ALTER TABLE',\n  'ADD [COLUMN]',\n  'DROP [COLUMN]',\n  'RENAME [COLUMN]',\n  'ALTER [COLUMN]',\n  'SET DATA TYPE', // for alter column\n  'SET NOT NULL', // for alter column\n  'DROP {IDENTITY | EXPRESSION | DEFAULT | NOT NULL}', // for alter column\n\n  // https://www.ibm.com/docs/en/db2-for-zos/11?topic=statements-list-supported\n  'ALLOCATE CURSOR',\n  'ALTER DATABASE',\n  'ALTER FUNCTION',\n  'ALTER INDEX',\n  'ALTER MASK',\n  'ALTER PERMISSION',\n  'ALTER PROCEDURE',\n  'ALTER SEQUENCE',\n  'ALTER STOGROUP',\n  'ALTER TABLESPACE',\n  'ALTER TRIGGER',\n  'ALTER TRUSTED CONTEXT',\n  'ALTER VIEW',\n  'ASSOCIATE LOCATORS',\n  'BEGIN DECLARE SECTION',\n  'CALL',\n  'CLOSE',\n  'COMMENT',\n  'COMMIT',\n  'CONNECT',\n  'CREATE ALIAS',\n  'CREATE AUXILIARY TABLE',\n  'CREATE DATABASE',\n  'CREATE FUNCTION',\n  'CREATE GLOBAL TEMPORARY TABLE',\n  'CREATE INDEX',\n  'CREATE LOB TABLESPACE',\n  'CREATE MASK',\n  'CREATE PERMISSION',\n  'CREATE PROCEDURE',\n  'CREATE ROLE',\n  'CREATE SEQUENCE',\n  'CREATE STOGROUP',\n  'CREATE SYNONYM',\n  'CREATE TABLESPACE',\n  'CREATE TRIGGER',\n  'CREATE TRUSTED CONTEXT',\n  'CREATE TYPE',\n  'CREATE VARIABLE',\n  'DECLARE CURSOR',\n  'DECLARE GLOBAL TEMPORARY TABLE',\n  'DECLARE STATEMENT',\n  'DECLARE TABLE',\n  'DECLARE VARIABLE',\n  'DESCRIBE CURSOR',\n  'DESCRIBE INPUT',\n  'DESCRIBE OUTPUT',\n  'DESCRIBE PROCEDURE',\n  'DESCRIBE TABLE',\n  'DROP',\n  'END DECLARE SECTION',\n  'EXCHANGE',\n  'EXECUTE',\n  'EXECUTE IMMEDIATE',\n  'EXPLAIN',\n  'FETCH',\n  'FREE LOCATOR',\n  'GET DIAGNOSTICS',\n  'GRANT',\n  'HOLD LOCATOR',\n  'INCLUDE',\n  'LABEL',\n  'LOCK TABLE',\n  'OPEN',\n  'PREPARE',\n  'REFRESH',\n  'RELEASE',\n  'RELEASE SAVEPOINT',\n  'RENAME',\n  'REVOKE',\n  'ROLLBACK',\n  'SAVEPOINT',\n  'SELECT INTO',\n  'SET CONNECTION',\n  'SET CURRENT ACCELERATOR',\n  'SET CURRENT APPLICATION COMPATIBILITY',\n  'SET CURRENT APPLICATION ENCODING SCHEME',\n  'SET CURRENT DEBUG MODE',\n  'SET CURRENT DECFLOAT ROUNDING MODE',\n  'SET CURRENT DEGREE',\n  'SET CURRENT EXPLAIN MODE',\n  'SET CURRENT GET_ACCEL_ARCHIVE',\n  'SET CURRENT LOCALE LC_CTYPE',\n  'SET CURRENT MAINTAINED TABLE TYPES FOR OPTIMIZATION',\n  'SET CURRENT OPTIMIZATION HINT',\n  'SET CURRENT PACKAGE PATH',\n  'SET CURRENT PACKAGESET',\n  'SET CURRENT PRECISION',\n  'SET CURRENT QUERY ACCELERATION',\n  'SET CURRENT QUERY ACCELERATION WAITFORDATA',\n  'SET CURRENT REFRESH AGE',\n  'SET CURRENT ROUTINE VERSION',\n  'SET CURRENT RULES',\n  'SET CURRENT SQLID',\n  'SET CURRENT TEMPORAL BUSINESS_TIME',\n  'SET CURRENT TEMPORAL SYSTEM_TIME',\n  'SET ENCRYPTION PASSWORD',\n  'SET PATH',\n  'SET SCHEMA',\n  'SET SESSION TIME ZONE',\n  'SIGNAL',\n  'VALUES INTO',\n  'WHENEVER',\n  // other\n  'AFTER',\n  'GO',\n  'SET CURRENT SCHEMA',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL]', 'EXCEPT [ALL]', 'INTERSECT [ALL]']);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n]);\n\nconst reservedPhrases = ['ON DELETE', 'ON UPDATE'];\n\n// https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_72/db2/rbafzintro.htm\nexport default class Db2Formatter extends Formatter {\n  static operators = ['**', '¬=', '¬>', '¬<', '!>', '!<', '||'];\n\n  tokenizer() {\n    return new Tokenizer({\n      reservedCommands,\n      reservedSetOperations,\n      reservedJoins,\n      reservedDependentClauses: ['WHEN', 'ELSE', 'ELSEIF'],\n      reservedPhrases,\n      reservedKeywords: keywords,\n      reservedFunctionNames: functions,\n      stringTypes: [{ quote: \"''\", prefixes: ['G', 'N', 'X', 'BX', 'GX', 'UX', 'U&'] }],\n      identTypes: [`\"\"`],\n      paramTypes: { positional: true, named: [':'] },\n      paramChars: { first: '@#$', rest: '@#$' },\n      operators: Db2Formatter.operators,\n    });\n  }\n}\n","import { flatKeywordList } from '../../utils';\n\nexport const functions = flatKeywordList({\n  // https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF\n  math: [\n    'ABS',\n    'ACOS',\n    'ASIN',\n    'ATAN',\n    'BIN',\n    'BROUND',\n    'CBRT',\n    'CEIL',\n    'CEILING',\n    'CONV',\n    'COS',\n    'DEGREES',\n    // 'E',\n    'EXP',\n    'FACTORIAL',\n    'FLOOR',\n    'GREATEST',\n    'HEX',\n    'LEAST',\n    'LN',\n    'LOG',\n    'LOG10',\n    'LOG2',\n    'NEGATIVE',\n    'PI',\n    'PMOD',\n    'POSITIVE',\n    'POW',\n    'POWER',\n    'RADIANS',\n    'RAND',\n    'ROUND',\n    'SHIFTLEFT',\n    'SHIFTRIGHT',\n    'SHIFTRIGHTUNSIGNED',\n    'SIGN',\n    'SIN',\n    'SQRT',\n    'TAN',\n    'UNHEX',\n    'WIDTH_BUCKET',\n  ],\n  array: ['ARRAY_CONTAINS', 'MAP_KEYS', 'MAP_VALUES', 'SIZE', 'SORT_ARRAY'],\n  conversion: ['BINARY', 'CAST'],\n  date: [\n    'ADD_MONTHS',\n    'DATE',\n    'DATE_ADD',\n    'DATE_FORMAT',\n    'DATE_SUB',\n    'DATEDIFF',\n    'DAY',\n    'DAYNAME',\n    'DAYOFMONTH',\n    'DAYOFYEAR',\n    'EXTRACT',\n    'FROM_UNIXTIME',\n    'FROM_UTC_TIMESTAMP',\n    'HOUR',\n    'LAST_DAY',\n    'MINUTE',\n    'MONTH',\n    'MONTHS_BETWEEN',\n    'NEXT_DAY',\n    'QUARTER',\n    'SECOND',\n    'TIMESTAMP',\n    'TO_DATE',\n    'TO_UTC_TIMESTAMP',\n    'TRUNC',\n    'UNIX_TIMESTAMP',\n    'WEEKOFYEAR',\n    'YEAR',\n  ],\n  conditional: ['ASSERT_TRUE', 'COALESCE', 'IF', 'ISNOTNULL', 'ISNULL', 'NULLIF', 'NVL'],\n  string: [\n    'ASCII',\n    'BASE64',\n    'CHARACTER_LENGTH',\n    'CHR',\n    'CONCAT',\n    'CONCAT_WS',\n    'CONTEXT_NGRAMS',\n    'DECODE',\n    'ELT',\n    'ENCODE',\n    'FIELD',\n    'FIND_IN_SET',\n    'FORMAT_NUMBER',\n    'GET_JSON_OBJECT',\n    'IN_FILE',\n    'INITCAP',\n    'INSTR',\n    'LCASE',\n    'LENGTH',\n    'LEVENSHTEIN',\n    'LOCATE',\n    'LOWER',\n    'LPAD',\n    'LTRIM',\n    'NGRAMS',\n    'OCTET_LENGTH',\n    'PARSE_URL',\n    'PRINTF',\n    'QUOTE',\n    'REGEXP_EXTRACT',\n    'REGEXP_REPLACE',\n    'REPEAT',\n    'REVERSE',\n    'RPAD',\n    'RTRIM',\n    'SENTENCES',\n    'SOUNDEX',\n    'SPACE',\n    'SPLIT',\n    'STR_TO_MAP',\n    'SUBSTR',\n    'SUBSTRING',\n    'TRANSLATE',\n    'TRIM',\n    'UCASE',\n    'UNBASE64',\n    'UPPER',\n  ],\n  masking: [\n    'MASK',\n    'MASK_FIRST_N',\n    'MASK_HASH',\n    'MASK_LAST_N',\n    'MASK_SHOW_FIRST_N',\n    'MASK_SHOW_LAST_N',\n  ],\n  misc: [\n    'AES_DECRYPT',\n    'AES_ENCRYPT',\n    'CRC32',\n    'CURRENT_DATABASE',\n    'CURRENT_USER',\n    'HASH',\n    'JAVA_METHOD',\n    'LOGGED_IN_USER',\n    'MD5',\n    'REFLECT',\n    'SHA',\n    'SHA1',\n    'SHA2',\n    'SURROGATE_KEY',\n    'VERSION',\n  ],\n  aggregate: [\n    'AVG',\n    'COLLECT_LIST',\n    'COLLECT_SET',\n    'CORR',\n    'COUNT',\n    'COVAR_POP',\n    'COVAR_SAMP',\n    'HISTOGRAM_NUMERIC',\n    'MAX',\n    'MIN',\n    'NTILE',\n    'PERCENTILE',\n    'PERCENTILE_APPROX',\n    'REGR_AVGX',\n    'REGR_AVGY',\n    'REGR_COUNT',\n    'REGR_INTERCEPT',\n    'REGR_R2',\n    'REGR_SLOPE',\n    'REGR_SXX',\n    'REGR_SXY',\n    'REGR_SYY',\n    'STDDEV_POP',\n    'STDDEV_SAMP',\n    'SUM',\n    'VAR_POP',\n    'VAR_SAMP',\n    'VARIANCE',\n  ],\n  table: ['EXPLODE', 'INLINE', 'JSON_TUPLE', 'PARSE_URL_TUPLE', 'POSEXPLODE', 'STACK'],\n  // https://cwiki.apache.org/confluence/display/Hive/LanguageManual+WindowingAndAnalytics\n  window: [\n    'LEAD',\n    'LAG',\n    'FIRST_VALUE',\n    'LAST_VALUE',\n    'RANK',\n    'ROW_NUMBER',\n    'DENSE_RANK',\n    'CUME_DIST',\n    'PERCENT_RANK',\n    'NTILE',\n  ],\n  // Parameterized data types\n  // https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=82706456\n  // Though in reality Hive only supports parameters for DECIMAL(),\n  // it doesn't hurt to allow others in here as well.\n  dataTypes: ['DECIMAL', 'NUMERIC', 'VARCHAR', 'CHAR'],\n});\n","import { flatKeywordList } from '../../utils';\n\nexport const keywords = flatKeywordList({\n  // https://cwiki.apache.org/confluence/display/hive/languagemanual+ddl\n  // Non-reserved keywords have proscribed meanings in. HiveQL, but can still be used as table or column names\n  nonReserved: [\n    'ADD',\n    'ADMIN',\n    'AFTER',\n    'ANALYZE',\n    'ARCHIVE',\n    'ASC',\n    'BEFORE',\n    'BUCKET',\n    'BUCKETS',\n    'CASCADE',\n    'CHANGE',\n    'CLUSTER',\n    'CLUSTERED',\n    'CLUSTERSTATUS',\n    'COLLECTION',\n    'COLUMNS',\n    'COMMENT',\n    'COMPACT',\n    'COMPACTIONS',\n    'COMPUTE',\n    'CONCATENATE',\n    'CONTINUE',\n    'DATA',\n    'DATABASES',\n    'DATETIME',\n    'DAY',\n    'DBPROPERTIES',\n    'DEFERRED',\n    'DEFINED',\n    'DELIMITED',\n    'DEPENDENCY',\n    'DESC',\n    'DIRECTORIES',\n    'DIRECTORY',\n    'DISABLE',\n    'DISTRIBUTE',\n    'ELEM_TYPE',\n    'ENABLE',\n    'ESCAPED',\n    'EXCLUSIVE',\n    'EXPLAIN',\n    'EXPORT',\n    'FIELDS',\n    'FILE',\n    'FILEFORMAT',\n    'FIRST',\n    'FORMAT',\n    'FORMATTED',\n    'FUNCTIONS',\n    'HOLD_DDLTIME',\n    'HOUR',\n    'IDXPROPERTIES',\n    'IGNORE',\n    'INDEX',\n    'INDEXES',\n    'INPATH',\n    'INPUTDRIVER',\n    'INPUTFORMAT',\n    'ITEMS',\n    'JAR',\n    'KEYS',\n    'KEY_TYPE',\n    'LIMIT',\n    'LINES',\n    'LOAD',\n    'LOCATION',\n    'LOCK',\n    'LOCKS',\n    'LOGICAL',\n    'LONG',\n    'MAPJOIN',\n    'MATERIALIZED',\n    'METADATA',\n    'MINUS',\n    'MINUTE',\n    'MONTH',\n    'MSCK',\n    'NOSCAN',\n    'NO_DROP',\n    'OFFLINE',\n    'OPTION',\n    'OUTPUTDRIVER',\n    'OUTPUTFORMAT',\n    'OVERWRITE',\n    'OWNER',\n    'PARTITIONED',\n    'PARTITIONS',\n    'PLUS',\n    'PRETTY',\n    'PRINCIPALS',\n    'PROTECTION',\n    'PURGE',\n    'READ',\n    'READONLY',\n    'REBUILD',\n    'RECORDREADER',\n    'RECORDWRITER',\n    'RELOAD',\n    'RENAME',\n    'REPAIR',\n    'REPLACE',\n    'REPLICATION',\n    'RESTRICT',\n    'REWRITE',\n    'ROLE',\n    'ROLES',\n    'SCHEMA',\n    'SCHEMAS',\n    'SECOND',\n    'SEMI',\n    'SERDE',\n    'SERDEPROPERTIES',\n    'SERVER',\n    'SETS',\n    'SHARED',\n    'SHOW',\n    'SHOW_DATABASE',\n    'SKEWED',\n    'SORT',\n    'SORTED',\n    'SSL',\n    'STATISTICS',\n    'STORED',\n    'STREAMTABLE',\n    'STRING',\n    'STRUCT',\n    'TABLES',\n    'TBLPROPERTIES',\n    'TEMPORARY',\n    'TERMINATED',\n    'TINYINT',\n    'TOUCH',\n    'TRANSACTIONS',\n    'UNARCHIVE',\n    'UNDO',\n    'UNIONTYPE',\n    'UNLOCK',\n    'UNSET',\n    'UNSIGNED',\n    'URI',\n    'USE',\n    'UTC',\n    'UTCTIMESTAMP',\n    'VALUE_TYPE',\n    'VIEW',\n    'WHILE',\n    'YEAR',\n    'AUTOCOMMIT',\n    'ISOLATION',\n    'LEVEL',\n    'OFFSET',\n    'SNAPSHOT',\n    'TRANSACTION',\n    'WORK',\n    'WRITE',\n    'ABORT',\n    'KEY',\n    'LAST',\n    'NORELY',\n    'NOVALIDATE',\n    'NULLS',\n    'RELY',\n    'VALIDATE',\n    'DETAIL',\n    'DOW',\n    'EXPRESSION',\n    'OPERATOR',\n    'QUARTER',\n    'SUMMARY',\n    'VECTORIZATION',\n    'WEEK',\n    'YEARS',\n    'MONTHS',\n    'WEEKS',\n    'DAYS',\n    'HOURS',\n    'MINUTES',\n    'SECONDS',\n    'TIMESTAMPTZ',\n    'ZONE',\n  ],\n  reserved: [\n    'ALL',\n    'ALTER',\n    'AND',\n    'ARRAY',\n    'AS',\n    'AUTHORIZATION',\n    'BETWEEN',\n    'BIGINT',\n    'BINARY',\n    'BOOLEAN',\n    'BOTH',\n    'BY',\n    'CASE',\n    'CAST',\n    'CHAR',\n    'COLUMN',\n    'CONF',\n    'CREATE',\n    'CROSS',\n    'CUBE',\n    'CURRENT',\n    'CURRENT_DATE',\n    'CURRENT_TIMESTAMP',\n    'CURSOR',\n    'DATABASE',\n    'DATE',\n    'DECIMAL',\n    'DELETE',\n    'DESCRIBE',\n    'DISTINCT',\n    'DOUBLE',\n    'DROP',\n    'ELSE',\n    'END',\n    'EXCHANGE',\n    'EXISTS',\n    'EXTENDED',\n    'EXTERNAL',\n    'FALSE',\n    'FETCH',\n    'FLOAT',\n    'FOLLOWING',\n    'FOR',\n    'FROM',\n    'FULL',\n    'FUNCTION',\n    'GRANT',\n    'GROUP',\n    'GROUPING',\n    'HAVING',\n    'IF',\n    'IMPORT',\n    'IN',\n    'INNER',\n    'INSERT',\n    'INT',\n    'INTERSECT',\n    'INTERVAL',\n    'INTO',\n    'IS',\n    'JOIN',\n    'LATERAL',\n    'LEFT',\n    'LESS',\n    'LIKE',\n    'LOCAL',\n    'MACRO',\n    'MAP',\n    'MORE',\n    'NONE',\n    'NOT',\n    'NULL',\n    'OF',\n    'ON',\n    'OR',\n    'ORDER',\n    'OUT',\n    'OUTER',\n    'OVER',\n    'PARTIALSCAN',\n    'PARTITION',\n    'PERCENT',\n    'PRECEDING',\n    'PRESERVE',\n    'PROCEDURE',\n    'RANGE',\n    'READS',\n    'REDUCE',\n    'REVOKE',\n    'RIGHT',\n    'ROLLUP',\n    'ROW',\n    'ROWS',\n    'SELECT',\n    'SET',\n    'SMALLINT',\n    'TABLE',\n    'TABLESAMPLE',\n    'THEN',\n    'TIMESTAMP',\n    'TO',\n    'TRANSFORM',\n    'TRIGGER',\n    'TRUE',\n    'TRUNCATE',\n    'UNBOUNDED',\n    'UNION',\n    'UNIQUEJOIN',\n    'UPDATE',\n    'USER',\n    'USING',\n    'UTC_TMESTAMP',\n    'VALUES',\n    'VARCHAR',\n    'WHEN',\n    'WHERE',\n    'WINDOW',\n    'WITH',\n    'COMMIT',\n    'ONLY',\n    'REGEXP',\n    'RLIKE',\n    'ROLLBACK',\n    'START',\n    'CACHE',\n    'CONSTRAINT',\n    'FOREIGN',\n    'PRIMARY',\n    'REFERENCES',\n    'DAYOFWEEK',\n    'EXTRACT',\n    'FLOOR',\n    'INTEGER',\n    'PRECISION',\n    'VIEWS',\n    'TIME',\n    'NUMERIC',\n    'SYNC',\n  ],\n  fileTypes: [\n    'TEXTFILE',\n    'SEQUENCEFILE',\n    'ORC',\n    'CSV',\n    'TSV',\n    'PARQUET',\n    'AVRO',\n    'RCFILE',\n    'JSONFILE',\n    'INPUTFORMAT',\n    'OUTPUTFORMAT',\n  ],\n});\n","import { expandPhrases } from 'src/expandPhrases';\nimport Formatter from 'src/formatter/Formatter';\nimport Tokenizer from 'src/lexer/Tokenizer';\nimport { functions } from './hive.functions';\nimport { keywords } from './hive.keywords';\n\nconst reservedCommands = expandPhrases([\n  // queries\n  'WITH',\n  'SELECT [ALL | DISTINCT]',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'SORT BY',\n  'CLUSTER BY',\n  'DISTRIBUTE BY',\n  'LIMIT',\n  // Data manipulation\n  // - insert:\n  //   Hive does not actually support plain INSERT INTO, only INSERT INTO TABLE\n  //   but it's a nuisance to not support it, as all other dialects do.\n  'INSERT INTO [TABLE]',\n  'VALUES',\n  // - update:\n  'UPDATE',\n  'SET',\n  // - delete:\n  'DELETE FROM',\n  // - truncate:\n  'TRUNCATE [TABLE]',\n  // - merge:\n  'MERGE INTO',\n  'WHEN [NOT] MATCHED [THEN]',\n  'UPDATE SET',\n  'INSERT [VALUES]',\n  // - insert overwrite directory:\n  //   https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DML#LanguageManualDML-Writingdataintothefilesystemfromqueries\n  'INSERT OVERWRITE [LOCAL] DIRECTORY',\n  // - load:\n  //   https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DML#LanguageManualDML-Loadingfilesintotables\n  'LOAD DATA [LOCAL] INPATH',\n  '[OVERWRITE] INTO TABLE',\n  // Data definition\n  'CREATE [MATERIALIZED] VIEW [IF NOT EXISTS]',\n  'CREATE [TEMPORARY] [EXTERNAL] TABLE [IF NOT EXISTS]',\n  'DROP TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER TABLE',\n  'RENAME TO',\n\n  // other\n  'ALTER',\n  'CREATE',\n  'USE',\n  'DESCRIBE',\n  'DROP',\n  'FETCH',\n  'SET SCHEMA', // added\n  'SHOW',\n  // newline keywords\n  'STORED AS',\n  'STORED BY',\n  'ROW FORMAT',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL | DISTINCT]']);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  // non-standard joins\n  'LEFT SEMI JOIN',\n]);\n\n// https://cwiki.apache.org/confluence/display/Hive/LanguageManual\nexport default class HiveFormatter extends Formatter {\n  static operators = ['<=>', '==', '||'];\n\n  tokenizer() {\n    return new Tokenizer({\n      reservedCommands,\n      reservedSetOperations,\n      reservedJoins,\n      reservedDependentClauses: ['WHEN', 'ELSE'],\n      reservedKeywords: keywords,\n      reservedFunctionNames: functions,\n      openParens: ['(', '['],\n      closeParens: [')', ']'],\n      stringTypes: ['\"\"', \"''\"],\n      identTypes: ['``'],\n      variableTypes: [{ quote: '{}', prefixes: ['$'], requirePrefix: true }],\n      operators: HiveFormatter.operators,\n    });\n  }\n}\n","import { flatKeywordList } from '../../utils';\n\nexport const keywords = flatKeywordList({\n  // https://mariadb.com/kb/en/information-schema-keywords-table/\n  all: [\n    'ACCESSIBLE',\n    'ACCOUNT',\n    'ACTION',\n    'ADD',\n    'ADMIN',\n    'AFTER',\n    'AGAINST',\n    'AGGREGATE',\n    'ALL',\n    'ALGORITHM',\n    'ALTER',\n    'ALWAYS',\n    'ANALYZE',\n    'AND',\n    'ANY',\n    'AS',\n    'ASC',\n    'ASCII',\n    'ASENSITIVE',\n    'AT',\n    'ATOMIC',\n    'AUTHORS',\n    'AUTO_INCREMENT',\n    'AUTOEXTEND_SIZE',\n    'AUTO',\n    'AVG',\n    'AVG_ROW_LENGTH',\n    'BACKUP',\n    'BEFORE',\n    'BEGIN',\n    'BETWEEN',\n    'BIGINT',\n    'BINARY',\n    'BINLOG',\n    'BIT',\n    'BLOB',\n    'BLOCK',\n    'BODY',\n    'BOOL',\n    'BOOLEAN',\n    'BOTH',\n    'BTREE',\n    'BY',\n    'BYTE',\n    'CACHE',\n    'CALL',\n    'CASCADE',\n    'CASCADED',\n    'CASE',\n    'CATALOG_NAME',\n    'CHAIN',\n    'CHANGE',\n    'CHANGED',\n    'CHAR',\n    'CHARACTER',\n    'CHARSET',\n    'CHECK',\n    'CHECKPOINT',\n    'CHECKSUM',\n    'CIPHER',\n    'CLASS_ORIGIN',\n    'CLIENT',\n    'CLOB',\n    'CLOSE',\n    'COALESCE',\n    'CODE',\n    'COLLATE',\n    'COLLATION',\n    'COLUMN',\n    'COLUMN_NAME',\n    'COLUMNS',\n    'COLUMN_ADD',\n    'COLUMN_CHECK',\n    'COLUMN_CREATE',\n    'COLUMN_DELETE',\n    'COLUMN_GET',\n    'COMMENT',\n    'COMMIT',\n    'COMMITTED',\n    'COMPACT',\n    'COMPLETION',\n    'COMPRESSED',\n    'CONCURRENT',\n    'CONDITION',\n    'CONNECTION',\n    'CONSISTENT',\n    'CONSTRAINT',\n    'CONSTRAINT_CATALOG',\n    'CONSTRAINT_NAME',\n    'CONSTRAINT_SCHEMA',\n    'CONTAINS',\n    'CONTEXT',\n    'CONTINUE',\n    'CONTRIBUTORS',\n    'CONVERT',\n    'CPU',\n    'CREATE',\n    'CROSS',\n    'CUBE',\n    'CURRENT',\n    'CURRENT_DATE',\n    'CURRENT_POS',\n    'CURRENT_ROLE',\n    'CURRENT_TIME',\n    'CURRENT_TIMESTAMP',\n    'CURRENT_USER',\n    'CURSOR',\n    'CURSOR_NAME',\n    'CYCLE',\n    'DATA',\n    'DATABASE',\n    'DATABASES',\n    'DATAFILE',\n    'DATE',\n    'DATETIME',\n    'DAY',\n    'DAY_HOUR',\n    'DAY_MICROSECOND',\n    'DAY_MINUTE',\n    'DAY_SECOND',\n    'DEALLOCATE',\n    'DEC',\n    'DECIMAL',\n    'DECLARE',\n    'DEFAULT',\n    'DEFINER',\n    'DELAYED',\n    'DELAY_KEY_WRITE',\n    'DELETE',\n    'DELETE_DOMAIN_ID',\n    'DESC',\n    'DESCRIBE',\n    'DES_KEY_FILE',\n    'DETERMINISTIC',\n    'DIAGNOSTICS',\n    'DIRECTORY',\n    'DISABLE',\n    'DISCARD',\n    'DISK',\n    'DISTINCT',\n    'DISTINCTROW',\n    'DIV',\n    'DO',\n    'DOUBLE',\n    'DO_DOMAIN_IDS',\n    'DROP',\n    'DUAL',\n    'DUMPFILE',\n    'DUPLICATE',\n    'DYNAMIC',\n    'EACH',\n    'ELSE',\n    'ELSEIF',\n    'ELSIF',\n    'EMPTY',\n    'ENABLE',\n    'ENCLOSED',\n    'END',\n    'ENDS',\n    'ENGINE',\n    'ENGINES',\n    'ENUM',\n    'ERROR',\n    'ERRORS',\n    'ESCAPE',\n    'ESCAPED',\n    'EVENT',\n    'EVENTS',\n    'EVERY',\n    'EXAMINED',\n    'EXCEPT',\n    'EXCHANGE',\n    'EXCLUDE',\n    'EXECUTE',\n    'EXCEPTION',\n    'EXISTS',\n    'EXIT',\n    'EXPANSION',\n    'EXPIRE',\n    'EXPORT',\n    'EXPLAIN',\n    'EXTENDED',\n    'EXTENT_SIZE',\n    'FALSE',\n    'FAST',\n    'FAULTS',\n    'FEDERATED',\n    'FETCH',\n    'FIELDS',\n    'FILE',\n    'FIRST',\n    'FIXED',\n    'FLOAT',\n    'FLOAT4',\n    'FLOAT8',\n    'FLUSH',\n    'FOLLOWING',\n    'FOLLOWS',\n    'FOR',\n    'FORCE',\n    'FOREIGN',\n    'FORMAT',\n    'FOUND',\n    'FROM',\n    'FULL',\n    'FULLTEXT',\n    'FUNCTION',\n    'GENERAL',\n    'GENERATED',\n    'GET_FORMAT',\n    'GET',\n    'GLOBAL',\n    'GOTO',\n    'GRANT',\n    'GRANTS',\n    'GROUP',\n    'HANDLER',\n    'HARD',\n    'HASH',\n    'HAVING',\n    'HELP',\n    'HIGH_PRIORITY',\n    'HISTORY',\n    'HOST',\n    'HOSTS',\n    'HOUR',\n    'HOUR_MICROSECOND',\n    'HOUR_MINUTE',\n    'HOUR_SECOND',\n    // 'ID', // conflicts with common column name\n    'IDENTIFIED',\n    'IF',\n    'IGNORE',\n    'IGNORED',\n    'IGNORE_DOMAIN_IDS',\n    'IGNORE_SERVER_IDS',\n    'IMMEDIATE',\n    'IMPORT',\n    'INTERSECT',\n    'IN',\n    'INCREMENT',\n    'INDEX',\n    'INDEXES',\n    'INFILE',\n    'INITIAL_SIZE',\n    'INNER',\n    'INOUT',\n    'INSENSITIVE',\n    'INSERT',\n    'INSERT_METHOD',\n    'INSTALL',\n    'INT',\n    'INT1',\n    'INT2',\n    'INT3',\n    'INT4',\n    'INT8',\n    'INTEGER',\n    'INTERVAL',\n    'INVISIBLE',\n    'INTO',\n    'IO',\n    'IO_THREAD',\n    'IPC',\n    'IS',\n    'ISOLATION',\n    'ISOPEN',\n    'ISSUER',\n    'ITERATE',\n    'INVOKER',\n    'JOIN',\n    'JSON',\n    'JSON_TABLE',\n    'KEY',\n    'KEYS',\n    'KEY_BLOCK_SIZE',\n    'KILL',\n    'LANGUAGE',\n    'LAST',\n    'LAST_VALUE',\n    'LASTVAL',\n    'LEADING',\n    'LEAVE',\n    'LEAVES',\n    'LEFT',\n    'LESS',\n    'LEVEL',\n    'LIKE',\n    'LIMIT',\n    'LINEAR',\n    'LINES',\n    'LIST',\n    'LOAD',\n    'LOCAL',\n    'LOCALTIME',\n    'LOCALTIMESTAMP',\n    'LOCK',\n    'LOCKED',\n    'LOCKS',\n    'LOGFILE',\n    'LOGS',\n    'LONG',\n    'LONGBLOB',\n    'LONGTEXT',\n    'LOOP',\n    'LOW_PRIORITY',\n    'MASTER',\n    'MASTER_CONNECT_RETRY',\n    'MASTER_DELAY',\n    'MASTER_GTID_POS',\n    'MASTER_HOST',\n    'MASTER_LOG_FILE',\n    'MASTER_LOG_POS',\n    'MASTER_PASSWORD',\n    'MASTER_PORT',\n    'MASTER_SERVER_ID',\n    'MASTER_SSL',\n    'MASTER_SSL_CA',\n    'MASTER_SSL_CAPATH',\n    'MASTER_SSL_CERT',\n    'MASTER_SSL_CIPHER',\n    'MASTER_SSL_CRL',\n    'MASTER_SSL_CRLPATH',\n    'MASTER_SSL_KEY',\n    'MASTER_SSL_VERIFY_SERVER_CERT',\n    'MASTER_USER',\n    'MASTER_USE_GTID',\n    'MASTER_HEARTBEAT_PERIOD',\n    'MATCH',\n    'MAX_CONNECTIONS_PER_HOUR',\n    'MAX_QUERIES_PER_HOUR',\n    'MAX_ROWS',\n    'MAX_SIZE',\n    'MAX_STATEMENT_TIME',\n    'MAX_UPDATES_PER_HOUR',\n    'MAX_USER_CONNECTIONS',\n    'MAXVALUE',\n    'MEDIUM',\n    'MEDIUMBLOB',\n    'MEDIUMINT',\n    'MEDIUMTEXT',\n    'MEMORY',\n    'MERGE',\n    'MESSAGE_TEXT',\n    'MICROSECOND',\n    'MIDDLEINT',\n    'MIGRATE',\n    'MINUS',\n    'MINUTE',\n    'MINUTE_MICROSECOND',\n    'MINUTE_SECOND',\n    'MINVALUE',\n    'MIN_ROWS',\n    'MOD',\n    'MODE',\n    'MODIFIES',\n    'MODIFY',\n    'MONITOR',\n    'MONTH',\n    'MUTEX',\n    'MYSQL',\n    'MYSQL_ERRNO',\n    'NAME',\n    'NAMES',\n    'NATIONAL',\n    'NATURAL',\n    'NCHAR',\n    'NESTED',\n    'NEVER',\n    'NEW',\n    'NEXT',\n    'NEXTVAL',\n    'NO',\n    'NOMAXVALUE',\n    'NOMINVALUE',\n    'NOCACHE',\n    'NOCYCLE',\n    'NO_WAIT',\n    'NOWAIT',\n    'NODEGROUP',\n    'NONE',\n    'NOT',\n    'NOTFOUND',\n    'NO_WRITE_TO_BINLOG',\n    'NULL',\n    'NUMBER',\n    'NUMERIC',\n    'NVARCHAR',\n    'OF',\n    'OFFSET',\n    'OLD_PASSWORD',\n    'ON',\n    'ONE',\n    'ONLINE',\n    'ONLY',\n    'OPEN',\n    'OPTIMIZE',\n    'OPTIONS',\n    'OPTION',\n    'OPTIONALLY',\n    'OR',\n    'ORDER',\n    'ORDINALITY',\n    'OTHERS',\n    'OUT',\n    'OUTER',\n    'OUTFILE',\n    'OVER',\n    'OVERLAPS',\n    'OWNER',\n    'PACKAGE',\n    'PACK_KEYS',\n    'PAGE',\n    'PAGE_CHECKSUM',\n    'PARSER',\n    'PARSE_VCOL_EXPR',\n    'PATH',\n    'PERIOD',\n    'PARTIAL',\n    'PARTITION',\n    'PARTITIONING',\n    'PARTITIONS',\n    'PASSWORD',\n    'PERSISTENT',\n    'PHASE',\n    'PLUGIN',\n    'PLUGINS',\n    'PORT',\n    'PORTION',\n    'PRECEDES',\n    'PRECEDING',\n    'PRECISION',\n    'PREPARE',\n    'PRESERVE',\n    'PREV',\n    'PREVIOUS',\n    'PRIMARY',\n    'PRIVILEGES',\n    'PROCEDURE',\n    'PROCESS',\n    'PROCESSLIST',\n    'PROFILE',\n    'PROFILES',\n    'PROXY',\n    'PURGE',\n    'QUARTER',\n    'QUERY',\n    'QUICK',\n    'RAISE',\n    'RANGE',\n    'RAW',\n    'READ',\n    'READ_ONLY',\n    'READ_WRITE',\n    'READS',\n    'REAL',\n    'REBUILD',\n    'RECOVER',\n    'RECURSIVE',\n    'REDO_BUFFER_SIZE',\n    'REDOFILE',\n    'REDUNDANT',\n    'REFERENCES',\n    'REGEXP',\n    'RELAY',\n    'RELAYLOG',\n    'RELAY_LOG_FILE',\n    'RELAY_LOG_POS',\n    'RELAY_THREAD',\n    'RELEASE',\n    'RELOAD',\n    'REMOVE',\n    'RENAME',\n    'REORGANIZE',\n    'REPAIR',\n    'REPEATABLE',\n    'REPLACE',\n    'REPLAY',\n    'REPLICA',\n    'REPLICAS',\n    'REPLICA_POS',\n    'REPLICATION',\n    'REPEAT',\n    'REQUIRE',\n    'RESET',\n    'RESIGNAL',\n    'RESTART',\n    'RESTORE',\n    'RESTRICT',\n    'RESUME',\n    'RETURNED_SQLSTATE',\n    'RETURN',\n    'RETURNING',\n    'RETURNS',\n    'REUSE',\n    'REVERSE',\n    'REVOKE',\n    'RIGHT',\n    'RLIKE',\n    'ROLE',\n    'ROLLBACK',\n    'ROLLUP',\n    'ROUTINE',\n    'ROW',\n    'ROWCOUNT',\n    'ROWNUM',\n    'ROWS',\n    'ROWTYPE',\n    'ROW_COUNT',\n    'ROW_FORMAT',\n    'RTREE',\n    'SAVEPOINT',\n    'SCHEDULE',\n    'SCHEMA',\n    'SCHEMA_NAME',\n    'SCHEMAS',\n    'SECOND',\n    'SECOND_MICROSECOND',\n    'SECURITY',\n    'SELECT',\n    'SENSITIVE',\n    'SEPARATOR',\n    'SEQUENCE',\n    'SERIAL',\n    'SERIALIZABLE',\n    'SESSION',\n    'SERVER',\n    'SET',\n    'SETVAL',\n    'SHARE',\n    'SHOW',\n    'SHUTDOWN',\n    'SIGNAL',\n    'SIGNED',\n    'SIMPLE',\n    'SKIP',\n    'SLAVE',\n    'SLAVES',\n    'SLAVE_POS',\n    'SLOW',\n    'SNAPSHOT',\n    'SMALLINT',\n    'SOCKET',\n    'SOFT',\n    'SOME',\n    'SONAME',\n    'SOUNDS',\n    'SOURCE',\n    'STAGE',\n    'STORED',\n    'SPATIAL',\n    'SPECIFIC',\n    'REF_SYSTEM_ID',\n    'SQL',\n    'SQLEXCEPTION',\n    'SQLSTATE',\n    'SQLWARNING',\n    'SQL_BIG_RESULT',\n    'SQL_BUFFER_RESULT',\n    'SQL_CACHE',\n    'SQL_CALC_FOUND_ROWS',\n    'SQL_NO_CACHE',\n    'SQL_SMALL_RESULT',\n    'SQL_THREAD',\n    'SQL_TSI_SECOND',\n    'SQL_TSI_MINUTE',\n    'SQL_TSI_HOUR',\n    'SQL_TSI_DAY',\n    'SQL_TSI_WEEK',\n    'SQL_TSI_MONTH',\n    'SQL_TSI_QUARTER',\n    'SQL_TSI_YEAR',\n    'SSL',\n    'START',\n    'STARTING',\n    'STARTS',\n    'STATEMENT',\n    'STATS_AUTO_RECALC',\n    'STATS_PERSISTENT',\n    'STATS_SAMPLE_PAGES',\n    'STATUS',\n    'STOP',\n    'STORAGE',\n    'STRAIGHT_JOIN',\n    'STRING',\n    'SUBCLASS_ORIGIN',\n    'SUBJECT',\n    'SUBPARTITION',\n    'SUBPARTITIONS',\n    'SUPER',\n    'SUSPEND',\n    'SWAPS',\n    'SWITCHES',\n    'SYSDATE',\n    'SYSTEM',\n    'SYSTEM_TIME',\n    'TABLE',\n    'TABLE_NAME',\n    'TABLES',\n    'TABLESPACE',\n    'TABLE_CHECKSUM',\n    'TEMPORARY',\n    'TEMPTABLE',\n    'TERMINATED',\n    'TEXT',\n    'THAN',\n    'THEN',\n    'TIES',\n    'TIME',\n    'TIMESTAMP',\n    'TIMESTAMPADD',\n    'TIMESTAMPDIFF',\n    'TINYBLOB',\n    'TINYINT',\n    'TINYTEXT',\n    'TO',\n    'TRAILING',\n    'TRANSACTION',\n    'TRANSACTIONAL',\n    'THREADS',\n    'TRIGGER',\n    'TRIGGERS',\n    'TRUE',\n    'TRUNCATE',\n    'TYPE',\n    'TYPES',\n    'UNBOUNDED',\n    'UNCOMMITTED',\n    'UNDEFINED',\n    'UNDO_BUFFER_SIZE',\n    'UNDOFILE',\n    'UNDO',\n    'UNICODE',\n    'UNION',\n    'UNIQUE',\n    'UNKNOWN',\n    'UNLOCK',\n    'UNINSTALL',\n    'UNSIGNED',\n    'UNTIL',\n    'UPDATE',\n    'UPGRADE',\n    'USAGE',\n    'USE',\n    'USER',\n    'USER_RESOURCES',\n    'USE_FRM',\n    'USING',\n    'UTC_DATE',\n    'UTC_TIME',\n    'UTC_TIMESTAMP',\n    'VALUE',\n    'VALUES',\n    'VARBINARY',\n    'VARCHAR',\n    'VARCHARACTER',\n    'VARCHAR2',\n    'VARIABLES',\n    'VARYING',\n    'VIA',\n    'VIEW',\n    'VIRTUAL',\n    'VISIBLE',\n    'VERSIONING',\n    'WAIT',\n    'WARNINGS',\n    'WEEK',\n    'WEIGHT_STRING',\n    'WHEN',\n    'WHERE',\n    'WHILE',\n    'WINDOW',\n    'WITH',\n    'WITHIN',\n    'WITHOUT',\n    'WORK',\n    'WRAPPER',\n    'WRITE',\n    'X509',\n    'XOR',\n    'XA',\n    'XML',\n    'YEAR',\n    'YEAR_MONTH',\n    'ZEROFILL',\n  ],\n});\n","import { flatKeywordList } from '../../utils';\n\nexport const functions = flatKeywordList({\n  // https://mariadb.com/kb/en/information-schema-sql_functions-table/\n  all: [\n    'ADDDATE',\n    'ADD_MONTHS',\n    'BIT_AND',\n    'BIT_OR',\n    'BIT_XOR',\n    'CAST',\n    'COUNT',\n    'CUME_DIST',\n    'CURDATE',\n    'CURTIME',\n    'DATE_ADD',\n    'DATE_SUB',\n    'DATE_FORMAT',\n    'DECODE',\n    'DENSE_RANK',\n    'EXTRACT',\n    'FIRST_VALUE',\n    'GROUP_CONCAT',\n    'JSON_ARRAYAGG',\n    'JSON_OBJECTAGG',\n    'LAG',\n    'LEAD',\n    'MAX',\n    'MEDIAN',\n    'MID',\n    'MIN',\n    'NOW',\n    'NTH_VALUE',\n    'NTILE',\n    'POSITION',\n    'PERCENT_RANK',\n    'PERCENTILE_CONT',\n    'PERCENTILE_DISC',\n    'RANK',\n    'ROW_NUMBER',\n    'SESSION_USER',\n    'STD',\n    'STDDEV',\n    'STDDEV_POP',\n    'STDDEV_SAMP',\n    'SUBDATE',\n    'SUBSTR',\n    'SUBSTRING',\n    'SUM',\n    'SYSTEM_USER',\n    'TRIM',\n    'TRIM_ORACLE',\n    'VARIANCE',\n    'VAR_POP',\n    'VAR_SAMP',\n    'ABS',\n    'ACOS',\n    'ADDTIME',\n    'AES_DECRYPT',\n    'AES_ENCRYPT',\n    'ASIN',\n    'ATAN',\n    'ATAN2',\n    'BENCHMARK',\n    'BIN',\n    'BINLOG_GTID_POS',\n    'BIT_COUNT',\n    'BIT_LENGTH',\n    'CEIL',\n    'CEILING',\n    'CHARACTER_LENGTH',\n    'CHAR_LENGTH',\n    'CHR',\n    'COERCIBILITY',\n    'COLUMN_CHECK',\n    'COLUMN_EXISTS',\n    'COLUMN_LIST',\n    'COLUMN_JSON',\n    'COMPRESS',\n    'CONCAT',\n    'CONCAT_OPERATOR_ORACLE',\n    'CONCAT_WS',\n    'CONNECTION_ID',\n    'CONV',\n    'CONVERT_TZ',\n    'COS',\n    'COT',\n    'CRC32',\n    'DATEDIFF',\n    'DAYNAME',\n    'DAYOFMONTH',\n    'DAYOFWEEK',\n    'DAYOFYEAR',\n    'DEGREES',\n    'DECODE_HISTOGRAM',\n    'DECODE_ORACLE',\n    'DES_DECRYPT',\n    'DES_ENCRYPT',\n    'ELT',\n    'ENCODE',\n    'ENCRYPT',\n    'EXP',\n    'EXPORT_SET',\n    'EXTRACTVALUE',\n    'FIELD',\n    'FIND_IN_SET',\n    'FLOOR',\n    'FORMAT',\n    'FOUND_ROWS',\n    'FROM_BASE64',\n    'FROM_DAYS',\n    'FROM_UNIXTIME',\n    'GET_LOCK',\n    'GREATEST',\n    'HEX',\n    'IFNULL',\n    'INSTR',\n    'ISNULL',\n    'IS_FREE_LOCK',\n    'IS_USED_LOCK',\n    'JSON_ARRAY',\n    'JSON_ARRAY_APPEND',\n    'JSON_ARRAY_INSERT',\n    'JSON_COMPACT',\n    'JSON_CONTAINS',\n    'JSON_CONTAINS_PATH',\n    'JSON_DEPTH',\n    'JSON_DETAILED',\n    'JSON_EXISTS',\n    'JSON_EXTRACT',\n    'JSON_INSERT',\n    'JSON_KEYS',\n    'JSON_LENGTH',\n    'JSON_LOOSE',\n    'JSON_MERGE',\n    'JSON_MERGE_PATCH',\n    'JSON_MERGE_PRESERVE',\n    'JSON_QUERY',\n    'JSON_QUOTE',\n    'JSON_OBJECT',\n    'JSON_REMOVE',\n    'JSON_REPLACE',\n    'JSON_SET',\n    'JSON_SEARCH',\n    'JSON_TYPE',\n    'JSON_UNQUOTE',\n    'JSON_VALID',\n    'JSON_VALUE',\n    'LAST_DAY',\n    'LAST_INSERT_ID',\n    'LCASE',\n    'LEAST',\n    'LENGTH',\n    'LENGTHB',\n    'LN',\n    'LOAD_FILE',\n    'LOCATE',\n    'LOG',\n    'LOG10',\n    'LOG2',\n    'LOWER',\n    'LPAD',\n    'LPAD_ORACLE',\n    'LTRIM',\n    'LTRIM_ORACLE',\n    'MAKEDATE',\n    'MAKETIME',\n    'MAKE_SET',\n    'MASTER_GTID_WAIT',\n    'MASTER_POS_WAIT',\n    'MD5',\n    'MONTHNAME',\n    'NAME_CONST',\n    'NVL',\n    'NVL2',\n    'OCT',\n    'OCTET_LENGTH',\n    'ORD',\n    'PERIOD_ADD',\n    'PERIOD_DIFF',\n    'PI',\n    'POW',\n    'POWER',\n    'QUOTE',\n    'REGEXP_INSTR',\n    'REGEXP_REPLACE',\n    'REGEXP_SUBSTR',\n    'RADIANS',\n    'RAND',\n    'RELEASE_ALL_LOCKS',\n    'RELEASE_LOCK',\n    'REPLACE_ORACLE',\n    'REVERSE',\n    'ROUND',\n    'RPAD',\n    'RPAD_ORACLE',\n    'RTRIM',\n    'RTRIM_ORACLE',\n    'SEC_TO_TIME',\n    'SHA',\n    'SHA1',\n    'SHA2',\n    'SIGN',\n    'SIN',\n    'SLEEP',\n    'SOUNDEX',\n    'SPACE',\n    'SQRT',\n    'STRCMP',\n    'STR_TO_DATE',\n    'SUBSTR_ORACLE',\n    'SUBSTRING_INDEX',\n    'SUBTIME',\n    'SYS_GUID',\n    'TAN',\n    'TIMEDIFF',\n    'TIME_FORMAT',\n    'TIME_TO_SEC',\n    'TO_BASE64',\n    'TO_CHAR',\n    'TO_DAYS',\n    'TO_SECONDS',\n    'UCASE',\n    'UNCOMPRESS',\n    'UNCOMPRESSED_LENGTH',\n    'UNHEX',\n    'UNIX_TIMESTAMP',\n    'UPDATEXML',\n    'UPPER',\n    'UUID',\n    'UUID_SHORT',\n    'VERSION',\n    'WEEKDAY',\n    'WEEKOFYEAR',\n    'WSREP_LAST_WRITTEN_GTID',\n    'WSREP_LAST_SEEN_GTID',\n    'WSREP_SYNC_WAIT_UPTO_GTID',\n    'YEARWEEK',\n    // CASE expression shorthands\n    'COALESCE',\n    'NULLIF',\n    // Data types with parameters\n    // https://mariadb.com/kb/en/data-types/\n    'TINYINT',\n    'SMALLINT',\n    'MEDIUMINT',\n    'INT',\n    'INTEGER',\n    'BIGINT',\n    'DECIMAL',\n    'DEC',\n    'NUMERIC',\n    'FIXED',\n    // 'NUMBER', // ?? In oracle mode only\n    'FLOAT',\n    'DOUBLE',\n    'DOUBLE PRECISION',\n    'REAL',\n    'BIT',\n    'BINARY',\n    'BLOB',\n    'CHAR',\n    'NATIONAL CHAR',\n    'CHAR BYTE',\n    'ENUM',\n    'VARBINARY',\n    'VARCHAR',\n    'NATIONAL VARCHAR',\n    // 'SET' // handled as special-case in postProcess\n    'TIME',\n    'DATETIME',\n    'TIMESTAMP',\n    'YEAR',\n  ],\n});\n","import { expandPhrases } from 'src/expandPhrases';\nimport Formatter from 'src/formatter/Formatter';\nimport Tokenizer from 'src/lexer/Tokenizer';\nimport { EOF_TOKEN, isToken, type Token, TokenType } from 'src/lexer/token';\nimport { keywords } from './mariadb.keywords';\nimport { functions } from './mariadb.functions';\n\nconst reservedCommands = expandPhrases([\n  // queries\n  'WITH [RECURSIVE]',\n  'SELECT [ALL | DISTINCT | DISTINCTROW]',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  'FETCH {FIRST | NEXT}',\n  // Data manipulation\n  // - insert:\n  'INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]',\n  'REPLACE [LOW_PRIORITY | DELAYED] [INTO]',\n  'VALUES',\n  // - update:\n  'UPDATE [LOW_PRIORITY] [IGNORE]',\n  'SET',\n  // - delete:\n  'DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM',\n  // - truncate:\n  'TRUNCATE [TABLE]',\n  // Data definition\n  'CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]',\n  'CREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS]',\n  'DROP [TEMPORARY] TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER [ONLINE] [IGNORE] TABLE [IF EXISTS]',\n  'ADD [COLUMN] [IF NOT EXISTS]',\n  '{CHANGE | MODIFY} [COLUMN] [IF EXISTS]',\n  'DROP [COLUMN] [IF EXISTS]',\n  'RENAME [TO]',\n  'RENAME COLUMN',\n  'ALTER [COLUMN]',\n  '{SET | DROP} DEFAULT', // for alter column\n  'SET {VISIBLE | INVISIBLE}', // for alter column\n\n  // https://mariadb.com/docs/reference/mdb/sql-statements/\n  'ALTER DATABASE',\n  'ALTER DATABASE COMMENT',\n  'ALTER EVENT',\n  'ALTER FUNCTION',\n  'ALTER PROCEDURE',\n  'ALTER SCHEMA',\n  'ALTER SCHEMA COMMENT',\n  'ALTER SEQUENCE',\n  'ALTER SERVER',\n  'ALTER USER',\n  'ALTER VIEW',\n  'ANALYZE',\n  'ANALYZE TABLE',\n  'BACKUP LOCK',\n  'BACKUP STAGE',\n  'BACKUP UNLOCK',\n  'BEGIN',\n  'BINLOG',\n  'CACHE INDEX',\n  'CALL',\n  'CHANGE MASTER TO',\n  'CHECK TABLE',\n  'CHECK VIEW',\n  'CHECKSUM TABLE',\n  'COMMIT',\n  'CREATE AGGREGATE FUNCTION',\n  'CREATE DATABASE',\n  'CREATE EVENT',\n  'CREATE FUNCTION',\n  'CREATE INDEX',\n  'CREATE PROCEDURE',\n  'CREATE ROLE',\n  'CREATE SEQUENCE',\n  'CREATE SERVER',\n  'CREATE SPATIAL INDEX',\n  'CREATE TRIGGER',\n  'CREATE UNIQUE INDEX',\n  'CREATE USER',\n  'DEALLOCATE PREPARE',\n  'DESCRIBE',\n  'DO',\n  'DROP DATABASE',\n  'DROP EVENT',\n  'DROP FUNCTION',\n  'DROP INDEX',\n  'DROP PREPARE',\n  'DROP PROCEDURE',\n  'DROP ROLE',\n  'DROP SEQUENCE',\n  'DROP SERVER',\n  'DROP TRIGGER',\n  'DROP USER',\n  'DROP VIEW',\n  'EXECUTE',\n  'EXPLAIN',\n  'FLUSH',\n  'GET DIAGNOSTICS',\n  'GET DIAGNOSTICS CONDITION',\n  'GRANT',\n  'HANDLER',\n  'HELP',\n  'INSTALL PLUGIN',\n  'INSTALL SONAME',\n  'KILL',\n  'LOAD DATA INFILE',\n  'LOAD INDEX INTO CACHE',\n  'LOAD XML INFILE',\n  'LOCK TABLE',\n  'OPTIMIZE TABLE',\n  'PREPARE',\n  'PURGE BINARY LOGS',\n  'PURGE MASTER LOGS',\n  'RELEASE SAVEPOINT',\n  'RENAME TABLE',\n  'RENAME USER',\n  'REPAIR TABLE',\n  'REPAIR VIEW',\n  'RESET MASTER',\n  'RESET QUERY CACHE',\n  'RESET REPLICA',\n  'RESET SLAVE',\n  'RESIGNAL',\n  'RETURNING',\n  'REVOKE',\n  'ROLLBACK',\n  'SAVEPOINT',\n  'SELECT',\n  'SET CHARACTER SET',\n  'SET DEFAULT ROLE',\n  'SET GLOBAL TRANSACTION',\n  'SET NAMES',\n  'SET PASSWORD',\n  'SET ROLE',\n  'SET STATEMENT',\n  'SET TRANSACTION',\n  'SHOW',\n  'SHOW ALL REPLICAS STATUS',\n  'SHOW ALL SLAVES STATUS',\n  'SHOW AUTHORS',\n  'SHOW BINARY LOGS',\n  'SHOW BINLOG EVENTS',\n  'SHOW BINLOG STATUS',\n  'SHOW CHARACTER SET',\n  'SHOW CLIENT_STATISTICS',\n  'SHOW COLLATION',\n  'SHOW COLUMNS',\n  'SHOW CONTRIBUTORS',\n  'SHOW CREATE DATABASE',\n  'SHOW CREATE EVENT',\n  'SHOW CREATE FUNCTION',\n  'SHOW CREATE PACKAGE',\n  'SHOW CREATE PACKAGE BODY',\n  'SHOW CREATE PROCEDURE',\n  'SHOW CREATE SEQUENCE',\n  'SHOW CREATE TABLE',\n  'SHOW CREATE TRIGGER',\n  'SHOW CREATE USER',\n  'SHOW CREATE VIEW',\n  'SHOW DATABASES',\n  'SHOW ENGINE',\n  'SHOW ENGINE INNODB STATUS',\n  'SHOW ENGINES',\n  'SHOW ERRORS',\n  'SHOW EVENTS',\n  'SHOW EXPLAIN',\n  'SHOW FUNCTION CODE',\n  'SHOW FUNCTION STATUS',\n  'SHOW GRANTS',\n  'SHOW INDEX',\n  'SHOW INDEXES',\n  'SHOW INDEX_STATISTICS',\n  'SHOW KEYS',\n  'SHOW LOCALES',\n  'SHOW MASTER LOGS',\n  'SHOW MASTER STATUS',\n  'SHOW OPEN TABLES',\n  'SHOW PACKAGE BODY CODE',\n  'SHOW PACKAGE BODY STATUS',\n  'SHOW PACKAGE STATUS',\n  'SHOW PLUGINS',\n  'SHOW PLUGINS SONAME',\n  'SHOW PRIVILEGES',\n  'SHOW PROCEDURE CODE',\n  'SHOW PROCEDURE STATUS',\n  'SHOW PROCESSLIST',\n  'SHOW PROFILE',\n  'SHOW PROFILES',\n  'SHOW QUERY_RESPONSE_TIME',\n  'SHOW RELAYLOG EVENTS',\n  'SHOW REPLICA',\n  'SHOW REPLICA HOSTS',\n  'SHOW REPLICA STATUS',\n  'SHOW SCHEMAS',\n  'SHOW SLAVE',\n  'SHOW SLAVE HOSTS',\n  'SHOW SLAVE STATUS',\n  'SHOW STATUS',\n  'SHOW STORAGE ENGINES',\n  'SHOW TABLE STATUS',\n  'SHOW TABLES',\n  'SHOW TRIGGERS',\n  'SHOW USER_STATISTICS',\n  'SHOW VARIABLES',\n  'SHOW WARNINGS',\n  'SHOW WSREP_MEMBERSHIP',\n  'SHOW WSREP_STATUS',\n  'SHUTDOWN',\n  'SIGNAL',\n  'START ALL REPLICAS',\n  'START ALL SLAVES',\n  'START REPLICA',\n  'START SLAVE',\n  'START TRANSACTION',\n  'STOP ALL REPLICAS',\n  'STOP ALL SLAVES',\n  'STOP REPLICA',\n  'STOP SLAVE',\n  'UNINSTALL PLUGIN',\n  'UNINSTALL SONAME',\n  'UNLOCK TABLE',\n  'USE',\n  'XA BEGIN',\n  'XA COMMIT',\n  'XA END',\n  'XA PREPARE',\n  'XA RECOVER',\n  'XA ROLLBACK',\n  'XA START',\n]);\n\nconst reservedSetOperations = expandPhrases([\n  'UNION [ALL | DISTINCT]',\n  'EXCEPT [ALL | DISTINCT]',\n  'INTERSECT [ALL | DISTINCT]',\n  'MINUS [ALL | DISTINCT]',\n]);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL JOIN',\n  'NATURAL {LEFT | RIGHT} [OUTER] JOIN',\n  // non-standard joins\n  'STRAIGHT_JOIN',\n]);\n\nconst reservedPhrases = ['ON DELETE', 'ON UPDATE', 'CHARACTER SET'];\n\n// For reference: https://mariadb.com/kb/en/sql-statements-structure/\nexport default class MariaDbFormatter extends Formatter {\n  static operators = [':=', '<<', '>>', '<=>', '&&', '||'];\n\n  tokenizer() {\n    return new Tokenizer({\n      reservedCommands,\n      reservedSetOperations,\n      reservedJoins,\n      reservedDependentClauses: ['WHEN', 'ELSE', 'ELSEIF', 'ELSIF'],\n      reservedPhrases,\n      reservedLogicalOperators: ['AND', 'OR', 'XOR'],\n      reservedKeywords: keywords,\n      reservedFunctionNames: functions,\n      // TODO: support _ char set prefixes such as _utf8, _latin1, _binary, _utf8mb4, etc.\n      stringTypes: [\n        { quote: \"''\", prefixes: ['B', 'X'] },\n        { quote: '\"\"', prefixes: ['B', 'X'] },\n      ],\n      identTypes: ['``'],\n      identChars: { first: '$', rest: '$', allowFirstCharNumber: true },\n      variableTypes: [\n        { regex: '@[A-Za-z0-9_.$]+' },\n        { quote: '\"\"', prefixes: ['@'], requirePrefix: true },\n        { quote: \"''\", prefixes: ['@'], requirePrefix: true },\n        { quote: '``', prefixes: ['@'], requirePrefix: true },\n      ],\n      paramTypes: { positional: true },\n      lineCommentTypes: ['--', '#'],\n      operators: MariaDbFormatter.operators,\n      postProcess,\n    });\n  }\n}\n\nfunction postProcess(tokens: Token[]) {\n  return tokens.map((token, i) => {\n    const nextToken = tokens[i + 1] || EOF_TOKEN;\n    if (isToken.SET(token) && nextToken.text === '(') {\n      // This is SET datatype, not SET statement\n      return { ...token, type: TokenType.RESERVED_FUNCTION_NAME };\n    }\n    return token;\n  });\n}\n","import { flatKeywordList } from '../../utils';\n\nexport const keywords = flatKeywordList({\n  // https://dev.mysql.com/doc/refman/8.0/en/keywords.html\n  all: [\n    'ACCESSIBLE', // (R)\n    'ACCOUNT',\n    'ACTION',\n    'ACTIVE',\n    'ADD', // (R)\n    'ADMIN',\n    'AFTER',\n    'AGAINST',\n    'AGGREGATE',\n    'ALGORITHM',\n    'ALL', // (R)\n    'ALTER', // (R)\n    'ALWAYS',\n    'ANALYZE', // (R)\n    'AND', // (R)\n    'ANY',\n    'ARRAY',\n    'AS', // (R)\n    'ASC', // (R)\n    'ASCII',\n    'ASENSITIVE', // (R)\n    'AT',\n    'ATTRIBUTE',\n    'AUTHENTICATION',\n    'AUTOEXTEND_SIZE',\n    'AUTO_INCREMENT',\n    'AVG',\n    'AVG_ROW_LENGTH',\n    'BACKUP',\n    'BEFORE', // (R)\n    'BEGIN',\n    'BETWEEN', // (R)\n    'BIGINT', // (R)\n    'BINARY', // (R)\n    'BINLOG',\n    'BIT',\n    'BLOB', // (R)\n    'BLOCK',\n    'BOOL',\n    'BOOLEAN',\n    'BOTH', // (R)\n    'BTREE',\n    'BUCKETS',\n    'BY', // (R)\n    'BYTE',\n    'CACHE',\n    'CALL', // (R)\n    'CASCADE', // (R)\n    'CASCADED',\n    'CASE', // (R)\n    'CATALOG_NAME',\n    'CHAIN',\n    'CHALLENGE_RESPONSE',\n    'CHANGE', // (R)\n    'CHANGED',\n    'CHANNEL',\n    'CHAR', // (R)\n    'CHARACTER', // (R)\n    'CHARSET',\n    'CHECK', // (R)\n    'CHECKSUM',\n    'CIPHER',\n    'CLASS_ORIGIN',\n    'CLIENT',\n    'CLONE',\n    'CLOSE',\n    'COALESCE',\n    'CODE',\n    'COLLATE', // (R)\n    'COLLATION',\n    'COLUMN', // (R)\n    'COLUMNS',\n    'COLUMN_FORMAT',\n    'COLUMN_NAME',\n    'COMMENT',\n    'COMMIT',\n    'COMMITTED',\n    'COMPACT',\n    'COMPLETION',\n    'COMPONENT',\n    'COMPRESSED',\n    'COMPRESSION',\n    'CONCURRENT',\n    'CONDITION', // (R)\n    'CONNECTION',\n    'CONSISTENT',\n    'CONSTRAINT', // (R)\n    'CONSTRAINT_CATALOG',\n    'CONSTRAINT_NAME',\n    'CONSTRAINT_SCHEMA',\n    'CONTAINS',\n    'CONTEXT',\n    'CONTINUE', // (R)\n    'CONVERT', // (R)\n    'CPU',\n    'CREATE', // (R)\n    'CROSS', // (R)\n    'CUBE', // (R)\n    'CUME_DIST', // (R)\n    'CURRENT',\n    'CURRENT_DATE', // (R)\n    'CURRENT_TIME', // (R)\n    'CURRENT_TIMESTAMP', // (R)\n    'CURRENT_USER', // (R)\n    'CURSOR', // (R)\n    'CURSOR_NAME',\n    'DATA',\n    'DATABASE', // (R)\n    'DATABASES', // (R)\n    'DATAFILE',\n    'DATE',\n    'DATETIME',\n    'DAY',\n    'DAY_HOUR', // (R)\n    'DAY_MICROSECOND', // (R)\n    'DAY_MINUTE', // (R)\n    'DAY_SECOND', // (R)\n    'DEALLOCATE',\n    'DEC', // (R)\n    'DECIMAL', // (R)\n    'DECLARE', // (R)\n    'DEFAULT', // (R)\n    'DEFAULT_AUTH',\n    'DEFINER',\n    'DEFINITION',\n    'DELAYED', // (R)\n    'DELAY_KEY_WRITE',\n    'DELETE', // (R)\n    'DENSE_RANK', // (R)\n    'DESC', // (R)\n    'DESCRIBE', // (R)\n    'DESCRIPTION',\n    'DETERMINISTIC', // (R)\n    'DIAGNOSTICS',\n    'DIRECTORY',\n    'DISABLE',\n    'DISCARD',\n    'DISK',\n    'DISTINCT', // (R)\n    'DISTINCTROW', // (R)\n    'DIV', // (R)\n    'DO',\n    'DOUBLE', // (R)\n    'DROP', // (R)\n    'DUAL', // (R)\n    'DUMPFILE',\n    'DUPLICATE',\n    'DYNAMIC',\n    'EACH', // (R)\n    'ELSE', // (R)\n    'ELSEIF', // (R)\n    'EMPTY', // (R)\n    'ENABLE',\n    'ENCLOSED', // (R)\n    'ENCRYPTION',\n    'END',\n    'ENDS',\n    'ENFORCED',\n    'ENGINE',\n    'ENGINES',\n    'ENGINE_ATTRIBUTE',\n    'ENUM',\n    'ERROR',\n    'ERRORS',\n    'ESCAPE',\n    'ESCAPED', // (R)\n    'EVENT',\n    'EVENTS',\n    'EVERY',\n    'EXCEPT', // (R)\n    'EXCHANGE',\n    'EXCLUDE',\n    'EXECUTE',\n    'EXISTS', // (R)\n    'EXIT', // (R)\n    'EXPANSION',\n    'EXPIRE',\n    'EXPLAIN', // (R)\n    'EXPORT',\n    'EXTENDED',\n    'EXTENT_SIZE',\n    'FACTOR',\n    'FAILED_LOGIN_ATTEMPTS',\n    'FALSE', // (R)\n    'FAST',\n    'FAULTS',\n    'FETCH', // (R)\n    'FIELDS',\n    'FILE',\n    'FILE_BLOCK_SIZE',\n    'FILTER',\n    'FINISH',\n    'FIRST',\n    'FIRST_VALUE', // (R)\n    'FIXED',\n    'FLOAT', // (R)\n    'FLOAT4', // (R)\n    'FLOAT8', // (R)\n    'FLUSH',\n    'FOLLOWING',\n    'FOLLOWS',\n    'FOR', // (R)\n    'FORCE', // (R)\n    'FOREIGN', // (R)\n    'FORMAT',\n    'FOUND',\n    'FROM', // (R)\n    'FULL',\n    'FULLTEXT', // (R)\n    'FUNCTION', // (R)\n    'GENERAL',\n    'GENERATED', // (R)\n    'GEOMCOLLECTION',\n    'GEOMETRY',\n    'GEOMETRYCOLLECTION',\n    'GET', // (R)\n    'GET_FORMAT',\n    'GET_MASTER_PUBLIC_KEY',\n    'GET_SOURCE_PUBLIC_KEY',\n    'GLOBAL',\n    'GRANT', // (R)\n    'GRANTS',\n    'GROUP', // (R)\n    'GROUPING', // (R)\n    'GROUPS', // (R)\n    'GROUP_REPLICATION',\n    'GTID_ONLY',\n    'HANDLER',\n    'HASH',\n    'HAVING', // (R)\n    'HELP',\n    'HIGH_PRIORITY', // (R)\n    'HISTOGRAM',\n    'HISTORY',\n    'HOST',\n    'HOSTS',\n    'HOUR',\n    'HOUR_MICROSECOND', // (R)\n    'HOUR_MINUTE', // (R)\n    'HOUR_SECOND', // (R)\n    'IDENTIFIED',\n    'IF', // (R)\n    'IGNORE', // (R)\n    'IGNORE_SERVER_IDS',\n    'IMPORT',\n    'IN', // (R)\n    'INACTIVE',\n    'INDEX', // (R)\n    'INDEXES',\n    'INFILE', // (R)\n    'INITIAL',\n    'INITIAL_SIZE',\n    'INITIATE',\n    'INNER', // (R)\n    'INOUT', // (R)\n    'INSENSITIVE', // (R)\n    'INSERT', // (R)\n    'INSERT_METHOD',\n    'INSTALL',\n    'INSTANCE',\n    'IN', // <-- moved over from functions\n    'INT', // (R)\n    'INT1', // (R)\n    'INT2', // (R)\n    'INT3', // (R)\n    'INT4', // (R)\n    'INT8', // (R)\n    'INTEGER', // (R)\n    'INTERSECT', // (R)\n    'INTERVAL', // (R)\n    'INTO', // (R)\n    'INVISIBLE',\n    'INVOKER',\n    'IO',\n    'IO_AFTER_GTIDS', // (R)\n    'IO_BEFORE_GTIDS', // (R)\n    'IO_THREAD',\n    'IPC',\n    'IS', // (R)\n    'ISOLATION',\n    'ISSUER',\n    'ITERATE', // (R)\n    'JOIN', // (R)\n    'JSON',\n    'JSON_TABLE', // (R)\n    'JSON_VALUE',\n    'KEY', // (R)\n    'KEYRING',\n    'KEYS', // (R)\n    'KEY_BLOCK_SIZE',\n    'KILL', // (R)\n    'LAG', // (R)\n    'LANGUAGE',\n    'LAST',\n    'LAST_VALUE', // (R)\n    'LATERAL', // (R)\n    'LEAD', // (R)\n    'LEADING', // (R)\n    'LEAVE', // (R)\n    'LEAVES',\n    'LEFT', // (R)\n    'LESS',\n    'LEVEL',\n    'LIKE', // (R)\n    'LIMIT', // (R)\n    'LINEAR', // (R)\n    'LINES', // (R)\n    'LINESTRING',\n    'LIST',\n    'LOAD', // (R)\n    'LOCAL',\n    'LOCALTIME', // (R)\n    'LOCALTIMESTAMP', // (R)\n    'LOCK', // (R)\n    'LOCKED',\n    'LOCKS',\n    'LOGFILE',\n    'LOGS',\n    'LONG', // (R)\n    'LONGBLOB', // (R)\n    'LONGTEXT', // (R)\n    'LOOP', // (R)\n    'LOW_PRIORITY', // (R)\n    'MASTER',\n    'MASTER_AUTO_POSITION',\n    'MASTER_BIND', // (R)\n    'MASTER_COMPRESSION_ALGORITHMS',\n    'MASTER_CONNECT_RETRY',\n    'MASTER_DELAY',\n    'MASTER_HEARTBEAT_PERIOD',\n    'MASTER_HOST',\n    'MASTER_LOG_FILE',\n    'MASTER_LOG_POS',\n    'MASTER_PASSWORD',\n    'MASTER_PORT',\n    'MASTER_PUBLIC_KEY_PATH',\n    'MASTER_RETRY_COUNT',\n    'MASTER_SSL',\n    'MASTER_SSL_CA',\n    'MASTER_SSL_CAPATH',\n    'MASTER_SSL_CERT',\n    'MASTER_SSL_CIPHER',\n    'MASTER_SSL_CRL',\n    'MASTER_SSL_CRLPATH',\n    'MASTER_SSL_KEY',\n    'MASTER_SSL_VERIFY_SERVER_CERT', // (R)\n    'MASTER_TLS_CIPHERSUITES',\n    'MASTER_TLS_VERSION',\n    'MASTER_USER',\n    'MASTER_ZSTD_COMPRESSION_LEVEL',\n    'MATCH', // (R)\n    'MAXVALUE', // (R)\n    'MAX_CONNECTIONS_PER_HOUR',\n    'MAX_QUERIES_PER_HOUR',\n    'MAX_ROWS',\n    'MAX_SIZE',\n    'MAX_UPDATES_PER_HOUR',\n    'MAX_USER_CONNECTIONS',\n    'MEDIUM',\n    'MEDIUMBLOB', // (R)\n    'MEDIUMINT', // (R)\n    'MEDIUMTEXT', // (R)\n    'MEMBER',\n    'MEMORY',\n    'MERGE',\n    'MESSAGE_TEXT',\n    'MICROSECOND',\n    'MIDDLEINT', // (R)\n    'MIGRATE',\n    'MINUTE',\n    'MINUTE_MICROSECOND', // (R)\n    'MINUTE_SECOND', // (R)\n    'MIN_ROWS',\n    'MOD', // (R)\n    'MODE',\n    'MODIFIES', // (R)\n    'MODIFY',\n    'MONTH',\n    'MULTILINESTRING',\n    'MULTIPOINT',\n    'MULTIPOLYGON',\n    'MUTEX',\n    'MYSQL_ERRNO',\n    'NAME',\n    'NAMES',\n    'NATIONAL',\n    'NATURAL', // (R)\n    'NCHAR',\n    'NDB',\n    'NDBCLUSTER',\n    'NESTED',\n    'NETWORK_NAMESPACE',\n    'NEVER',\n    'NEW',\n    'NEXT',\n    'NO',\n    'NODEGROUP',\n    'NONE',\n    'NOT', // (R)\n    'NOWAIT',\n    'NO_WAIT',\n    'NO_WRITE_TO_BINLOG', // (R)\n    'NTH_VALUE', // (R)\n    'NTILE', // (R)\n    'NULL', // (R)\n    'NULLS',\n    'NUMBER',\n    'NUMERIC', // (R)\n    'NVARCHAR',\n    'OF', // (R)\n    'OFF',\n    'OFFSET',\n    'OJ',\n    'OLD',\n    'ON', // (R)\n    'ONE',\n    'ONLY',\n    'OPEN',\n    'OPTIMIZE', // (R)\n    'OPTIMIZER_COSTS', // (R)\n    'OPTION', // (R)\n    'OPTIONAL',\n    'OPTIONALLY', // (R)\n    'OPTIONS',\n    'OR', // (R)\n    'ORDER', // (R)\n    'ORDINALITY',\n    'ORGANIZATION',\n    'OTHERS',\n    'OUT', // (R)\n    'OUTER', // (R)\n    'OUTFILE', // (R)\n    'OVER', // (R)\n    'OWNER',\n    'PACK_KEYS',\n    'PAGE',\n    'PARSER',\n    'PARTIAL',\n    'PARTITION', // (R)\n    'PARTITIONING',\n    'PARTITIONS',\n    'PASSWORD',\n    'PASSWORD_LOCK_TIME',\n    'PATH',\n    'PERCENT_RANK', // (R)\n    'PERSIST',\n    'PERSIST_ONLY',\n    'PHASE',\n    'PLUGIN',\n    'PLUGINS',\n    'PLUGIN_DIR',\n    'POINT',\n    'POLYGON',\n    'PORT',\n    'PRECEDES',\n    'PRECEDING',\n    'PRECISION', // (R)\n    'PREPARE',\n    'PRESERVE',\n    'PREV',\n    'PRIMARY', // (R)\n    'PRIVILEGES',\n    'PRIVILEGE_CHECKS_USER',\n    'PROCEDURE', // (R)\n    'PROCESS',\n    'PROCESSLIST',\n    'PROFILE',\n    'PROFILES',\n    'PROXY',\n    'PURGE', // (R)\n    'QUARTER',\n    'QUERY',\n    'QUICK',\n    'RANDOM',\n    'RANGE', // (R)\n    'RANK', // (R)\n    'READ', // (R)\n    'READS', // (R)\n    'READ_ONLY',\n    'READ_WRITE', // (R)\n    'REAL', // (R)\n    'REBUILD',\n    'RECOVER',\n    'RECURSIVE', // (R)\n    'REDO_BUFFER_SIZE',\n    'REDUNDANT',\n    'REFERENCE',\n    'REFERENCES', // (R)\n    'REGEXP', // (R)\n    'REGISTRATION',\n    'RELAY',\n    'RELAYLOG',\n    'RELAY_LOG_FILE',\n    'RELAY_LOG_POS',\n    'RELAY_THREAD',\n    'RELEASE', // (R)\n    'RELOAD',\n    'REMOVE',\n    'RENAME', // (R)\n    'REORGANIZE',\n    'REPAIR',\n    'REPEAT', // (R)\n    'REPEATABLE',\n    'REPLACE', // (R)\n    'REPLICA',\n    'REPLICAS',\n    'REPLICATE_DO_DB',\n    'REPLICATE_DO_TABLE',\n    'REPLICATE_IGNORE_DB',\n    'REPLICATE_IGNORE_TABLE',\n    'REPLICATE_REWRITE_DB',\n    'REPLICATE_WILD_DO_TABLE',\n    'REPLICATE_WILD_IGNORE_TABLE',\n    'REPLICATION',\n    'REQUIRE', // (R)\n    'REQUIRE_ROW_FORMAT',\n    'RESET',\n    'RESIGNAL', // (R)\n    'RESOURCE',\n    'RESPECT',\n    'RESTART',\n    'RESTORE',\n    'RESTRICT', // (R)\n    'RESUME',\n    'RETAIN',\n    'RETURN', // (R)\n    'RETURNED_SQLSTATE',\n    'RETURNING',\n    'RETURNS',\n    'REUSE',\n    'REVERSE',\n    'REVOKE', // (R)\n    'RIGHT', // (R)\n    'RLIKE', // (R)\n    'ROLE',\n    'ROLLBACK',\n    'ROLLUP',\n    'ROTATE',\n    'ROUTINE',\n    'ROW', // (R)\n    'ROWS', // (R)\n    'ROW_COUNT',\n    'ROW_FORMAT',\n    'ROW_NUMBER', // (R)\n    'RTREE',\n    'SAVEPOINT',\n    'SCHEDULE',\n    'SCHEMA', // (R)\n    'SCHEMAS', // (R)\n    'SCHEMA_NAME',\n    'SECOND',\n    'SECONDARY',\n    'SECONDARY_ENGINE',\n    'SECONDARY_ENGINE_ATTRIBUTE',\n    'SECONDARY_LOAD',\n    'SECONDARY_UNLOAD',\n    'SECOND_MICROSECOND', // (R)\n    'SECURITY',\n    'SELECT', // (R)\n    'SENSITIVE', // (R)\n    'SEPARATOR', // (R)\n    'SERIAL',\n    'SERIALIZABLE',\n    'SERVER',\n    'SESSION',\n    'SET', // (R)\n    'SHARE',\n    'SHOW', // (R)\n    'SHUTDOWN',\n    'SIGNAL', // (R)\n    'SIGNED',\n    'SIMPLE',\n    'SKIP',\n    'SLAVE',\n    'SLOW',\n    'SMALLINT', // (R)\n    'SNAPSHOT',\n    'SOCKET',\n    'SOME',\n    'SONAME',\n    'SOUNDS',\n    'SOURCE',\n    'SOURCE_AUTO_POSITION',\n    'SOURCE_BIND',\n    'SOURCE_COMPRESSION_ALGORITHMS',\n    'SOURCE_CONNECT_RETRY',\n    'SOURCE_DELAY',\n    'SOURCE_HEARTBEAT_PERIOD',\n    'SOURCE_HOST',\n    'SOURCE_LOG_FILE',\n    'SOURCE_LOG_POS',\n    'SOURCE_PASSWORD',\n    'SOURCE_PORT',\n    'SOURCE_PUBLIC_KEY_PATH',\n    'SOURCE_RETRY_COUNT',\n    'SOURCE_SSL',\n    'SOURCE_SSL_CA',\n    'SOURCE_SSL_CAPATH',\n    'SOURCE_SSL_CERT',\n    'SOURCE_SSL_CIPHER',\n    'SOURCE_SSL_CRL',\n    'SOURCE_SSL_CRLPATH',\n    'SOURCE_SSL_KEY',\n    'SOURCE_SSL_VERIFY_SERVER_CERT',\n    'SOURCE_TLS_CIPHERSUITES',\n    'SOURCE_TLS_VERSION',\n    'SOURCE_USER',\n    'SOURCE_ZSTD_COMPRESSION_LEVEL',\n    'SPATIAL', // (R)\n    'SPECIFIC', // (R)\n    'SQL', // (R)\n    'SQLEXCEPTION', // (R)\n    'SQLSTATE', // (R)\n    'SQLWARNING', // (R)\n    'SQL_AFTER_GTIDS',\n    'SQL_AFTER_MTS_GAPS',\n    'SQL_BEFORE_GTIDS',\n    'SQL_BIG_RESULT', // (R)\n    'SQL_BUFFER_RESULT',\n    'SQL_CALC_FOUND_ROWS', // (R)\n    'SQL_NO_CACHE',\n    'SQL_SMALL_RESULT', // (R)\n    'SQL_THREAD',\n    'SQL_TSI_DAY',\n    'SQL_TSI_HOUR',\n    'SQL_TSI_MINUTE',\n    'SQL_TSI_MONTH',\n    'SQL_TSI_QUARTER',\n    'SQL_TSI_SECOND',\n    'SQL_TSI_WEEK',\n    'SQL_TSI_YEAR',\n    'SRID',\n    'SSL', // (R)\n    'STACKED',\n    'START',\n    'STARTING', // (R)\n    'STARTS',\n    'STATS_AUTO_RECALC',\n    'STATS_PERSISTENT',\n    'STATS_SAMPLE_PAGES',\n    'STATUS',\n    'STOP',\n    'STORAGE',\n    'STORED', // (R)\n    'STRAIGHT_JOIN', // (R)\n    'STREAM',\n    'STRING',\n    'SUBCLASS_ORIGIN',\n    'SUBJECT',\n    'SUBPARTITION',\n    'SUBPARTITIONS',\n    'SUPER',\n    'SUSPEND',\n    'SWAPS',\n    'SWITCHES',\n    'SYSTEM', // (R)\n    'TABLE', // (R)\n    'TABLES',\n    'TABLESPACE',\n    'TABLE_CHECKSUM',\n    'TABLE_NAME',\n    'TEMPORARY',\n    'TEMPTABLE',\n    'TERMINATED', // (R)\n    'TEXT',\n    'THAN',\n    'THEN', // (R)\n    'THREAD_PRIORITY',\n    'TIES',\n    'TIME',\n    'TIMESTAMP',\n    'TIMESTAMPADD',\n    'TIMESTAMPDIFF',\n    'TINYBLOB', // (R)\n    'TINYINT', // (R)\n    'TINYTEXT', // (R)\n    'TLS',\n    'TO', // (R)\n    'TRAILING', // (R)\n    'TRANSACTION',\n    'TRIGGER', // (R)\n    'TRIGGERS',\n    'TRUE', // (R)\n    'TRUNCATE',\n    'TYPE',\n    'TYPES',\n    'UNBOUNDED',\n    'UNCOMMITTED',\n    'UNDEFINED',\n    'UNDO', // (R)\n    'UNDOFILE',\n    'UNDO_BUFFER_SIZE',\n    'UNICODE',\n    'UNINSTALL',\n    'UNION', // (R)\n    'UNIQUE', // (R)\n    'UNKNOWN',\n    'UNLOCK', // (R)\n    'UNREGISTER',\n    'UNSIGNED', // (R)\n    'UNTIL',\n    'UPDATE', // (R)\n    'UPGRADE',\n    'USAGE', // (R)\n    'USE', // (R)\n    'USER',\n    'USER_RESOURCES',\n    'USE_FRM',\n    'USING', // (R)\n    'UTC_DATE', // (R)\n    'UTC_TIME', // (R)\n    'UTC_TIMESTAMP', // (R)\n    'VALIDATION',\n    'VALUE',\n    'VALUES', // (R)\n    'VARBINARY', // (R)\n    'VARCHAR', // (R)\n    'VARCHARACTER', // (R)\n    'VARIABLES',\n    'VARYING', // (R)\n    'VCPU',\n    'VIEW',\n    'VIRTUAL', // (R)\n    'VISIBLE',\n    'WAIT',\n    'WARNINGS',\n    'WEEK',\n    'WEIGHT_STRING',\n    'WHEN', // (R)\n    'WHERE', // (R)\n    'WHILE', // (R)\n    'WINDOW', // (R)\n    'WITH', // (R)\n    'WITHOUT',\n    'WORK',\n    'WRAPPER',\n    'WRITE', // (R)\n    'X509',\n    'XA',\n    'XID',\n    'XML',\n    'XOR', // (R)\n    'YEAR',\n    'YEAR_MONTH', // (R)\n    'ZEROFILL', // (R)\n    'ZONE',\n  ],\n});\n","import { flatKeywordList } from '../../utils';\n\nexport const functions = flatKeywordList({\n  // https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html\n  all: [\n    'ABS',\n    'ACOS',\n    'ADDDATE',\n    'ADDTIME',\n    'AES_DECRYPT',\n    'AES_ENCRYPT',\n    // 'AND',\n    'ANY_VALUE',\n    'ASCII',\n    'ASIN',\n    'ATAN',\n    'ATAN2',\n    'AVG',\n    'BENCHMARK',\n    'BIN',\n    'BIN_TO_UUID',\n    'BINARY',\n    'BIT_AND',\n    'BIT_COUNT',\n    'BIT_LENGTH',\n    'BIT_OR',\n    'BIT_XOR',\n    'CAN_ACCESS_COLUMN',\n    'CAN_ACCESS_DATABASE',\n    'CAN_ACCESS_TABLE',\n    'CAN_ACCESS_USER',\n    'CAN_ACCESS_VIEW',\n    'CAST',\n    'CEIL',\n    'CEILING',\n    'CHAR',\n    'CHAR_LENGTH',\n    'CHARACTER_LENGTH',\n    'CHARSET',\n    'COALESCE',\n    'COERCIBILITY',\n    'COLLATION',\n    'COMPRESS',\n    'CONCAT',\n    'CONCAT_WS',\n    'CONNECTION_ID',\n    'CONV',\n    'CONVERT',\n    'CONVERT_TZ',\n    'COS',\n    'COT',\n    'COUNT',\n    'CRC32',\n    'CUME_DIST',\n    'CURDATE',\n    'CURRENT_DATE',\n    'CURRENT_ROLE',\n    'CURRENT_TIME',\n    'CURRENT_TIMESTAMP',\n    'CURRENT_USER',\n    'CURTIME',\n    'DATABASE',\n    'DATE',\n    'DATE_ADD',\n    'DATE_FORMAT',\n    'DATE_SUB',\n    'DATEDIFF',\n    'DAY',\n    'DAYNAME',\n    'DAYOFMONTH',\n    'DAYOFWEEK',\n    'DAYOFYEAR',\n    'DEFAULT',\n    'DEGREES',\n    'DENSE_RANK',\n    'DIV',\n    'ELT',\n    'EXP',\n    'EXPORT_SET',\n    'EXTRACT',\n    'EXTRACTVALUE',\n    'FIELD',\n    'FIND_IN_SET',\n    'FIRST_VALUE',\n    'FLOOR',\n    'FORMAT',\n    'FORMAT_BYTES',\n    'FORMAT_PICO_TIME',\n    'FOUND_ROWS',\n    'FROM_BASE64',\n    'FROM_DAYS',\n    'FROM_UNIXTIME',\n    'GEOMCOLLECTION',\n    'GEOMETRYCOLLECTION',\n    'GET_DD_COLUMN_PRIVILEGES',\n    'GET_DD_CREATE_OPTIONS',\n    'GET_DD_INDEX_SUB_PART_LENGTH',\n    'GET_FORMAT',\n    'GET_LOCK',\n    'GREATEST',\n    'GROUP_CONCAT',\n    'GROUPING',\n    'GTID_SUBSET',\n    'GTID_SUBTRACT',\n    'HEX',\n    'HOUR',\n    'ICU_VERSION',\n    'IF',\n    'IFNULL',\n    // 'IN',\n    'INET_ATON',\n    'INET_NTOA',\n    'INET6_ATON',\n    'INET6_NTOA',\n    'INSERT',\n    'INSTR',\n    'INTERNAL_AUTO_INCREMENT',\n    'INTERNAL_AVG_ROW_LENGTH',\n    'INTERNAL_CHECK_TIME',\n    'INTERNAL_CHECKSUM',\n    'INTERNAL_DATA_FREE',\n    'INTERNAL_DATA_LENGTH',\n    'INTERNAL_DD_CHAR_LENGTH',\n    'INTERNAL_GET_COMMENT_OR_ERROR',\n    'INTERNAL_GET_ENABLED_ROLE_JSON',\n    'INTERNAL_GET_HOSTNAME',\n    'INTERNAL_GET_USERNAME',\n    'INTERNAL_GET_VIEW_WARNING_OR_ERROR',\n    'INTERNAL_INDEX_COLUMN_CARDINALITY',\n    'INTERNAL_INDEX_LENGTH',\n    'INTERNAL_IS_ENABLED_ROLE',\n    'INTERNAL_IS_MANDATORY_ROLE',\n    'INTERNAL_KEYS_DISABLED',\n    'INTERNAL_MAX_DATA_LENGTH',\n    'INTERNAL_TABLE_ROWS',\n    'INTERNAL_UPDATE_TIME',\n    'INTERVAL',\n    'IS',\n    'IS_FREE_LOCK',\n    'IS_IPV4',\n    'IS_IPV4_COMPAT',\n    'IS_IPV4_MAPPED',\n    'IS_IPV6',\n    'IS NOT',\n    'IS NOT NULL',\n    'IS NULL',\n    'IS_USED_LOCK',\n    'IS_UUID',\n    'ISNULL',\n    'JSON_ARRAY',\n    'JSON_ARRAY_APPEND',\n    'JSON_ARRAY_INSERT',\n    'JSON_ARRAYAGG',\n    'JSON_CONTAINS',\n    'JSON_CONTAINS_PATH',\n    'JSON_DEPTH',\n    'JSON_EXTRACT',\n    'JSON_INSERT',\n    'JSON_KEYS',\n    'JSON_LENGTH',\n    'JSON_MERGE',\n    'JSON_MERGE_PATCH',\n    'JSON_MERGE_PRESERVE',\n    'JSON_OBJECT',\n    'JSON_OBJECTAGG',\n    'JSON_OVERLAPS',\n    'JSON_PRETTY',\n    'JSON_QUOTE',\n    'JSON_REMOVE',\n    'JSON_REPLACE',\n    'JSON_SCHEMA_VALID',\n    'JSON_SCHEMA_VALIDATION_REPORT',\n    'JSON_SEARCH',\n    'JSON_SET',\n    'JSON_STORAGE_FREE',\n    'JSON_STORAGE_SIZE',\n    'JSON_TABLE',\n    'JSON_TYPE',\n    'JSON_UNQUOTE',\n    'JSON_VALID',\n    'JSON_VALUE',\n    'LAG',\n    'LAST_DAY',\n    'LAST_INSERT_ID',\n    'LAST_VALUE',\n    'LCASE',\n    'LEAD',\n    'LEAST',\n    'LEFT',\n    'LENGTH',\n    'LIKE',\n    'LINESTRING',\n    'LN',\n    'LOAD_FILE',\n    'LOCALTIME',\n    'LOCALTIMESTAMP',\n    'LOCATE',\n    'LOG',\n    'LOG10',\n    'LOG2',\n    'LOWER',\n    'LPAD',\n    'LTRIM',\n    'MAKE_SET',\n    'MAKEDATE',\n    'MAKETIME',\n    'MASTER_POS_WAIT',\n    'MATCH',\n    'MAX',\n    'MBRCONTAINS',\n    'MBRCOVEREDBY',\n    'MBRCOVERS',\n    'MBRDISJOINT',\n    'MBREQUALS',\n    'MBRINTERSECTS',\n    'MBROVERLAPS',\n    'MBRTOUCHES',\n    'MBRWITHIN',\n    'MD5',\n    'MEMBER OF',\n    'MICROSECOND',\n    'MID',\n    'MIN',\n    'MINUTE',\n    'MOD',\n    'MONTH',\n    'MONTHNAME',\n    'MULTILINESTRING',\n    'MULTIPOINT',\n    'MULTIPOLYGON',\n    'NAME_CONST',\n    'NOT',\n    'NOT IN',\n    'NOT LIKE',\n    'NOT REGEXP',\n    'NOW',\n    'NTH_VALUE',\n    'NTILE',\n    'NULLIF',\n    'OCT',\n    'OCTET_LENGTH',\n    // 'OR',\n    'ORD',\n    'PERCENT_RANK',\n    'PERIOD_ADD',\n    'PERIOD_DIFF',\n    'PI',\n    'POINT',\n    'POLYGON',\n    'POSITION',\n    'POW',\n    'POWER',\n    'PS_CURRENT_THREAD_ID',\n    'PS_THREAD_ID',\n    'QUARTER',\n    'QUOTE',\n    'RADIANS',\n    'RAND',\n    'RANDOM_BYTES',\n    'RANK',\n    'REGEXP',\n    'REGEXP_INSTR',\n    'REGEXP_LIKE',\n    'REGEXP_REPLACE',\n    'REGEXP_SUBSTR',\n    'RELEASE_ALL_LOCKS',\n    'RELEASE_LOCK',\n    'REPEAT',\n    'REPLACE',\n    'REVERSE',\n    'RIGHT',\n    'RLIKE',\n    'ROLES_GRAPHML',\n    'ROUND',\n    'ROW_COUNT',\n    'ROW_NUMBER',\n    'RPAD',\n    'RTRIM',\n    'SCHEMA',\n    'SEC_TO_TIME',\n    'SECOND',\n    'SESSION_USER',\n    'SHA1',\n    'SHA2',\n    'SIGN',\n    'SIN',\n    'SLEEP',\n    'SOUNDEX',\n    'SOUNDS LIKE',\n    'SOURCE_POS_WAIT',\n    'SPACE',\n    'SQRT',\n    'ST_AREA',\n    'ST_ASBINARY',\n    'ST_ASGEOJSON',\n    'ST_ASTEXT',\n    'ST_BUFFER',\n    'ST_BUFFER_STRATEGY',\n    'ST_CENTROID',\n    'ST_COLLECT',\n    'ST_CONTAINS',\n    'ST_CONVEXHULL',\n    'ST_CROSSES',\n    'ST_DIFFERENCE',\n    'ST_DIMENSION',\n    'ST_DISJOINT',\n    'ST_DISTANCE',\n    'ST_DISTANCE_SPHERE',\n    'ST_ENDPOINT',\n    'ST_ENVELOPE',\n    'ST_EQUALS',\n    'ST_EXTERIORRING',\n    'ST_FRECHETDISTANCE',\n    'ST_GEOHASH',\n    'ST_GEOMCOLLFROMTEXT',\n    'ST_GEOMCOLLFROMWKB',\n    'ST_GEOMETRYN',\n    'ST_GEOMETRYTYPE',\n    'ST_GEOMFROMGEOJSON',\n    'ST_GEOMFROMTEXT',\n    'ST_GEOMFROMWKB',\n    'ST_HAUSDORFFDISTANCE',\n    'ST_INTERIORRINGN',\n    'ST_INTERSECTION',\n    'ST_INTERSECTS',\n    'ST_ISCLOSED',\n    'ST_ISEMPTY',\n    'ST_ISSIMPLE',\n    'ST_ISVALID',\n    'ST_LATFROMGEOHASH',\n    'ST_LATITUDE',\n    'ST_LENGTH',\n    'ST_LINEFROMTEXT',\n    'ST_LINEFROMWKB',\n    'ST_LINEINTERPOLATEPOINT',\n    'ST_LINEINTERPOLATEPOINTS',\n    'ST_LONGFROMGEOHASH',\n    'ST_LONGITUDE',\n    'ST_MAKEENVELOPE',\n    'ST_MLINEFROMTEXT',\n    'ST_MLINEFROMWKB',\n    'ST_MPOINTFROMTEXT',\n    'ST_MPOINTFROMWKB',\n    'ST_MPOLYFROMTEXT',\n    'ST_MPOLYFROMWKB',\n    'ST_NUMGEOMETRIES',\n    'ST_NUMINTERIORRING',\n    'ST_NUMPOINTS',\n    'ST_OVERLAPS',\n    'ST_POINTATDISTANCE',\n    'ST_POINTFROMGEOHASH',\n    'ST_POINTFROMTEXT',\n    'ST_POINTFROMWKB',\n    'ST_POINTN',\n    'ST_POLYFROMTEXT',\n    'ST_POLYFROMWKB',\n    'ST_SIMPLIFY',\n    'ST_SRID',\n    'ST_STARTPOINT',\n    'ST_SWAPXY',\n    'ST_SYMDIFFERENCE',\n    'ST_TOUCHES',\n    'ST_TRANSFORM',\n    'ST_UNION',\n    'ST_VALIDATE',\n    'ST_WITHIN',\n    'ST_X',\n    'ST_Y',\n    'STATEMENT_DIGEST',\n    'STATEMENT_DIGEST_TEXT',\n    'STD',\n    'STDDEV',\n    'STDDEV_POP',\n    'STDDEV_SAMP',\n    'STR_TO_DATE',\n    'STRCMP',\n    'SUBDATE',\n    'SUBSTR',\n    'SUBSTRING',\n    'SUBSTRING_INDEX',\n    'SUBTIME',\n    'SUM',\n    'SYSDATE',\n    'SYSTEM_USER',\n    'TAN',\n    'TIME',\n    'TIME_FORMAT',\n    'TIME_TO_SEC',\n    'TIMEDIFF',\n    'TIMESTAMP',\n    'TIMESTAMPADD',\n    'TIMESTAMPDIFF',\n    'TO_BASE64',\n    'TO_DAYS',\n    'TO_SECONDS',\n    'TRIM',\n    'TRUNCATE',\n    'UCASE',\n    'UNCOMPRESS',\n    'UNCOMPRESSED_LENGTH',\n    'UNHEX',\n    'UNIX_TIMESTAMP',\n    'UPDATEXML',\n    'UPPER',\n    'USER',\n    'UTC_DATE',\n    'UTC_TIME',\n    'UTC_TIMESTAMP',\n    'UUID',\n    'UUID_SHORT',\n    'UUID_TO_BIN',\n    'VALIDATE_PASSWORD_STRENGTH',\n    'VALUES',\n    'VAR_POP',\n    'VAR_SAMP',\n    'VARIANCE',\n    'VERSION',\n    'WAIT_FOR_EXECUTED_GTID_SET',\n    'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS',\n    'WEEK',\n    'WEEKDAY',\n    'WEEKOFYEAR',\n    'WEIGHT_STRING',\n    // 'XOR',\n    'YEAR',\n    'YEARWEEK',\n    // Data types with parameters\n    // https://dev.mysql.com/doc/refman/8.0/en/data-types.html\n    'BIT',\n    'TINYINT',\n    'SMALLINT',\n    'MEDIUMINT',\n    'INT',\n    'INTEGER',\n    'BIGINT',\n    'DECIMAL',\n    'DEC',\n    'NUMERIC',\n    'FIXED',\n    'FLOAT',\n    'DOUBLE',\n    'DOUBLE PRECISION',\n    'REAL',\n    'DATETIME',\n    'TIMESTAMP',\n    'TIME',\n    'YEAR',\n    'CHAR',\n    'NATIONAL CHAR',\n    'VARCHAR',\n    'NATIONAL VARCHAR',\n    'BINARY',\n    'VARBINARY',\n    'BLOB',\n    'TEXT',\n    'ENUM',\n    // 'SET' // handled as special-case in postProcess\n  ],\n});\n","import { expandPhrases } from 'src/expandPhrases';\nimport Formatter from 'src/formatter/Formatter';\nimport Tokenizer from 'src/lexer/Tokenizer';\nimport { EOF_TOKEN, isToken, type Token, TokenType } from 'src/lexer/token';\nimport { keywords } from './mysql.keywords';\nimport { functions } from './mysql.functions';\n\nconst reservedCommands = expandPhrases([\n  // queries\n  'WITH [RECURSIVE]',\n  'SELECT [ALL | DISTINCT | DISTINCTROW]',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  // Data manipulation\n  // - insert:\n  'INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]',\n  'REPLACE [LOW_PRIORITY | DELAYED] [INTO]',\n  'VALUES',\n  // - update:\n  'UPDATE [LOW_PRIORITY] [IGNORE]',\n  'SET',\n  // - delete:\n  'DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM',\n  // - truncate:\n  'TRUNCATE [TABLE]',\n  // Data definition\n  'CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]',\n  'CREATE [TEMPORARY] TABLE [IF NOT EXISTS]',\n  'DROP [TEMPORARY] TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER TABLE',\n  'ADD [COLUMN]',\n  '{CHANGE | MODIFY} [COLUMN]',\n  'DROP [COLUMN]',\n  'RENAME [TO | AS]',\n  'RENAME COLUMN',\n  'ALTER [COLUMN]',\n  '{SET | DROP} DEFAULT', // for alter column\n\n  // https://dev.mysql.com/doc/refman/8.0/en/sql-statements.html\n  'ALTER DATABASE',\n  'ALTER EVENT',\n  'ALTER FUNCTION',\n  'ALTER INSTANCE',\n  'ALTER LOGFILE GROUP',\n  'ALTER PROCEDURE',\n  'ALTER RESOURCE GROUP',\n  'ALTER SERVER',\n  'ALTER TABLESPACE',\n  'ALTER USER',\n  'ALTER VIEW',\n  'ANALYZE TABLE',\n  'BINLOG',\n  'CACHE INDEX',\n  'CALL',\n  'CHANGE MASTER TO',\n  'CHANGE REPLICATION FILTER',\n  'CHANGE REPLICATION SOURCE TO',\n  'CHECK TABLE',\n  'CHECKSUM TABLE',\n  'CLONE',\n  'COMMIT',\n  'CREATE DATABASE',\n  'CREATE EVENT',\n  'CREATE FUNCTION',\n  'CREATE FUNCTION',\n  'CREATE INDEX',\n  'CREATE LOGFILE GROUP',\n  'CREATE PROCEDURE',\n  'CREATE RESOURCE GROUP',\n  'CREATE ROLE',\n  'CREATE SERVER',\n  'CREATE SPATIAL REFERENCE SYSTEM',\n  'CREATE TABLESPACE',\n  'CREATE TRIGGER',\n  'CREATE USER',\n  'DEALLOCATE PREPARE',\n  'DESCRIBE',\n  'DO',\n  'DROP DATABASE',\n  'DROP EVENT',\n  'DROP FUNCTION',\n  'DROP FUNCTION',\n  'DROP INDEX',\n  'DROP LOGFILE GROUP',\n  'DROP PROCEDURE',\n  'DROP RESOURCE GROUP',\n  'DROP ROLE',\n  'DROP SERVER',\n  'DROP SPATIAL REFERENCE SYSTEM',\n  'DROP TABLESPACE',\n  'DROP TRIGGER',\n  'DROP USER',\n  'DROP VIEW',\n  'EXECUTE',\n  'EXPLAIN',\n  'FLUSH',\n  'GRANT',\n  'HANDLER',\n  'HELP',\n  'IMPORT TABLE',\n  'INSTALL COMPONENT',\n  'INSTALL PLUGIN',\n  'KILL',\n  'LOAD DATA',\n  'LOAD INDEX INTO CACHE',\n  'LOAD XML',\n  'LOCK INSTANCE FOR BACKUP',\n  'LOCK TABLES',\n  'MASTER_POS_WAIT',\n  'OPTIMIZE TABLE',\n  'PREPARE',\n  'PURGE BINARY LOGS',\n  'RELEASE SAVEPOINT',\n  'RENAME TABLE',\n  'RENAME USER',\n  'REPAIR TABLE',\n  'RESET',\n  'RESET MASTER',\n  'RESET PERSIST',\n  'RESET REPLICA',\n  'RESET SLAVE',\n  'RESTART',\n  'REVOKE',\n  'ROLLBACK',\n  'ROLLBACK TO SAVEPOINT',\n  'SAVEPOINT',\n  'SET CHARACTER SET',\n  'SET DEFAULT ROLE',\n  'SET NAMES',\n  'SET PASSWORD',\n  'SET RESOURCE GROUP',\n  'SET ROLE',\n  'SET TRANSACTION',\n  'SHOW',\n  'SHOW BINARY LOGS',\n  'SHOW BINLOG EVENTS',\n  'SHOW CHARACTER SET',\n  'SHOW COLLATION',\n  'SHOW COLUMNS',\n  'SHOW CREATE DATABASE',\n  'SHOW CREATE EVENT',\n  'SHOW CREATE FUNCTION',\n  'SHOW CREATE PROCEDURE',\n  'SHOW CREATE TABLE',\n  'SHOW CREATE TRIGGER',\n  'SHOW CREATE USER',\n  'SHOW CREATE VIEW',\n  'SHOW DATABASES',\n  'SHOW ENGINE',\n  'SHOW ENGINES',\n  'SHOW ERRORS',\n  'SHOW EVENTS',\n  'SHOW FUNCTION CODE',\n  'SHOW FUNCTION STATUS',\n  'SHOW GRANTS',\n  'SHOW INDEX',\n  'SHOW MASTER STATUS',\n  'SHOW OPEN TABLES',\n  'SHOW PLUGINS',\n  'SHOW PRIVILEGES',\n  'SHOW PROCEDURE CODE',\n  'SHOW PROCEDURE STATUS',\n  'SHOW PROCESSLIST',\n  'SHOW PROFILE',\n  'SHOW PROFILES',\n  'SHOW RELAYLOG EVENTS',\n  'SHOW REPLICA STATUS',\n  'SHOW REPLICAS',\n  'SHOW SLAVE',\n  'SHOW SLAVE HOSTS',\n  'SHOW STATUS',\n  'SHOW TABLE STATUS',\n  'SHOW TABLES',\n  'SHOW TRIGGERS',\n  'SHOW VARIABLES',\n  'SHOW WARNINGS',\n  'SHUTDOWN',\n  'SOURCE_POS_WAIT',\n  'START GROUP_REPLICATION',\n  'START REPLICA',\n  'START SLAVE',\n  'START TRANSACTION',\n  'STOP GROUP_REPLICATION',\n  'STOP REPLICA',\n  'STOP SLAVE',\n  'TABLE',\n  'UNINSTALL COMPONENT',\n  'UNINSTALL PLUGIN',\n  'UNLOCK INSTANCE',\n  'UNLOCK TABLES',\n  'USE',\n  'XA',\n  // flow control\n  // 'IF',\n  'ITERATE',\n  'LEAVE',\n  'LOOP',\n  'REPEAT',\n  'RETURN',\n  'WHILE',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL | DISTINCT]']);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT} [OUTER] JOIN',\n  // non-standard joins\n  'STRAIGHT_JOIN',\n]);\n\nconst reservedPhrases = ['ON DELETE', 'ON UPDATE', 'CHARACTER SET'];\n\n// https://dev.mysql.com/doc/refman/8.0/en/\nexport default class MySqlFormatter extends Formatter {\n  static operators = ['~', ':=', '<<', '>>', '<=>', '&&', '||', '->', '->>'];\n\n  tokenizer() {\n    return new Tokenizer({\n      reservedCommands,\n      reservedSetOperations,\n      reservedJoins,\n      reservedDependentClauses: ['WHEN', 'ELSE', 'ELSEIF'],\n      reservedPhrases,\n      reservedLogicalOperators: ['AND', 'OR', 'XOR'],\n      reservedKeywords: keywords,\n      reservedFunctionNames: functions,\n      // TODO: support _ char set prefixes such as _utf8, _latin1, _binary, _utf8mb4, etc.\n      stringTypes: [\n        { quote: \"''\", prefixes: ['B', 'N', 'X'] },\n        { quote: '\"\"', prefixes: ['B', 'N', 'X'] },\n      ],\n      identTypes: ['``'],\n      identChars: { first: '$', rest: '$', allowFirstCharNumber: true },\n      variableTypes: [\n        { regex: '@[A-Za-z0-9_.$]+' },\n        { quote: '\"\"', prefixes: ['@'], requirePrefix: true },\n        { quote: \"''\", prefixes: ['@'], requirePrefix: true },\n        { quote: '``', prefixes: ['@'], requirePrefix: true },\n      ],\n      paramTypes: { positional: true },\n      lineCommentTypes: ['--', '#'],\n      operators: MySqlFormatter.operators,\n      postProcess,\n    });\n  }\n}\n\nfunction postProcess(tokens: Token[]) {\n  return tokens.map((token, i) => {\n    const nextToken = tokens[i + 1] || EOF_TOKEN;\n    if (isToken.SET(token) && nextToken.text === '(') {\n      // This is SET datatype, not SET statement\n      return { ...token, type: TokenType.RESERVED_FUNCTION_NAME };\n    }\n    return token;\n  });\n}\n","import { flatKeywordList } from '../../utils';\n\nexport const functions = flatKeywordList({\n  // https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/functions.html\n  all: [\n    'ABORT',\n    'ABS',\n    'ACOS',\n    'ADVISOR',\n    'ARRAY_AGG',\n    'ARRAY_AGG',\n    'ARRAY_APPEND',\n    'ARRAY_AVG',\n    'ARRAY_BINARY_SEARCH',\n    'ARRAY_CONCAT',\n    'ARRAY_CONTAINS',\n    'ARRAY_COUNT',\n    'ARRAY_DISTINCT',\n    'ARRAY_EXCEPT',\n    'ARRAY_FLATTEN',\n    'ARRAY_IFNULL',\n    'ARRAY_INSERT',\n    'ARRAY_INTERSECT',\n    'ARRAY_LENGTH',\n    'ARRAY_MAX',\n    'ARRAY_MIN',\n    'ARRAY_MOVE',\n    'ARRAY_POSITION',\n    'ARRAY_PREPEND',\n    'ARRAY_PUT',\n    'ARRAY_RANGE',\n    'ARRAY_REMOVE',\n    'ARRAY_REPEAT',\n    'ARRAY_REPLACE',\n    'ARRAY_REVERSE',\n    'ARRAY_SORT',\n    'ARRAY_STAR',\n    'ARRAY_SUM',\n    'ARRAY_SYMDIFF',\n    'ARRAY_SYMDIFF1',\n    'ARRAY_SYMDIFFN',\n    'ARRAY_UNION',\n    'ASIN',\n    'ATAN',\n    'ATAN2',\n    'AVG',\n    'BASE64',\n    'BASE64_DECODE',\n    'BASE64_ENCODE',\n    'BITAND ',\n    'BITCLEAR ',\n    'BITNOT ',\n    'BITOR ',\n    'BITSET ',\n    'BITSHIFT ',\n    'BITTEST ',\n    'BITXOR ',\n    'CEIL',\n    'CLOCK_LOCAL',\n    'CLOCK_MILLIS',\n    'CLOCK_STR',\n    'CLOCK_TZ',\n    'CLOCK_UTC',\n    'COALESCE',\n    'CONCAT',\n    'CONCAT2',\n    'CONTAINS',\n    'CONTAINS_TOKEN',\n    'CONTAINS_TOKEN_LIKE',\n    'CONTAINS_TOKEN_REGEXP',\n    'COS',\n    'COUNT',\n    'COUNT',\n    'COUNTN',\n    'CUME_DIST',\n    'CURL',\n    'DATE_ADD_MILLIS',\n    'DATE_ADD_STR',\n    'DATE_DIFF_MILLIS',\n    'DATE_DIFF_STR',\n    'DATE_FORMAT_STR',\n    'DATE_PART_MILLIS',\n    'DATE_PART_STR',\n    'DATE_RANGE_MILLIS',\n    'DATE_RANGE_STR',\n    'DATE_TRUNC_MILLIS',\n    'DATE_TRUNC_STR',\n    'DECODE',\n    'DECODE_JSON',\n    'DEGREES',\n    'DENSE_RANK',\n    'DURATION_TO_STR',\n    // 'E',\n    'ENCODED_SIZE',\n    'ENCODE_JSON',\n    'EXP',\n    'FIRST_VALUE',\n    'FLOOR',\n    'GREATEST',\n    'HAS_TOKEN',\n    'IFINF',\n    'IFMISSING',\n    'IFMISSINGORNULL',\n    'IFNAN',\n    'IFNANORINF',\n    'IFNULL',\n    'INITCAP',\n    'ISARRAY',\n    'ISATOM',\n    'ISBITSET',\n    'ISBOOLEAN',\n    'ISNUMBER',\n    'ISOBJECT',\n    'ISSTRING',\n    'LAG',\n    'LAST_VALUE',\n    'LEAD',\n    'LEAST',\n    'LENGTH',\n    'LN',\n    'LOG',\n    'LOWER',\n    'LTRIM',\n    'MAX',\n    'MEAN',\n    'MEDIAN',\n    'META',\n    'MILLIS',\n    'MILLIS_TO_LOCAL',\n    'MILLIS_TO_STR',\n    'MILLIS_TO_TZ',\n    'MILLIS_TO_UTC',\n    'MILLIS_TO_ZONE_NAME',\n    'MIN',\n    'MISSINGIF',\n    'NANIF',\n    'NEGINFIF',\n    'NOW_LOCAL',\n    'NOW_MILLIS',\n    'NOW_STR',\n    'NOW_TZ',\n    'NOW_UTC',\n    'NTH_VALUE',\n    'NTILE',\n    'NULLIF',\n    'NVL',\n    'NVL2',\n    'OBJECT_ADD',\n    'OBJECT_CONCAT',\n    'OBJECT_INNER_PAIRS',\n    'OBJECT_INNER_VALUES',\n    'OBJECT_LENGTH',\n    'OBJECT_NAMES',\n    'OBJECT_PAIRS',\n    'OBJECT_PUT',\n    'OBJECT_REMOVE',\n    'OBJECT_RENAME',\n    'OBJECT_REPLACE',\n    'OBJECT_UNWRAP',\n    'OBJECT_VALUES',\n    'PAIRS',\n    'PERCENT_RANK',\n    'PI',\n    'POLY_LENGTH',\n    'POSINFIF',\n    'POSITION',\n    'POWER',\n    'RADIANS',\n    'RANDOM',\n    'RANK',\n    'RATIO_TO_REPORT',\n    'REGEXP_CONTAINS',\n    'REGEXP_LIKE',\n    'REGEXP_MATCHES',\n    'REGEXP_POSITION',\n    'REGEXP_REPLACE',\n    'REGEXP_SPLIT',\n    'REGEX_CONTAINS',\n    'REGEX_LIKE',\n    'REGEX_MATCHES',\n    'REGEX_POSITION',\n    'REGEX_REPLACE',\n    'REGEX_SPLIT',\n    'REPEAT',\n    'REPLACE',\n    'REVERSE',\n    'ROUND',\n    'ROW_NUMBER',\n    'RTRIM',\n    'SEARCH',\n    'SEARCH_META',\n    'SEARCH_SCORE',\n    'SIGN',\n    'SIN',\n    'SPLIT',\n    'SQRT',\n    'STDDEV',\n    'STDDEV_POP',\n    'STDDEV_SAMP',\n    'STR_TO_DURATION',\n    'STR_TO_MILLIS',\n    'STR_TO_TZ',\n    'STR_TO_UTC',\n    'STR_TO_ZONE_NAME',\n    'SUBSTR',\n    'SUFFIXES',\n    'SUM',\n    'TAN',\n    'TITLE',\n    'TOARRAY',\n    'TOATOM',\n    'TOBOOLEAN',\n    'TOKENS',\n    'TOKENS',\n    'TONUMBER',\n    'TOOBJECT',\n    'TOSTRING',\n    'TRIM',\n    'TRUNC',\n    // 'TYPE', // disabled\n    'UPPER',\n    'UUID',\n    'VARIANCE',\n    'VARIANCE_POP',\n    'VARIANCE_SAMP',\n    'VAR_POP',\n    'VAR_SAMP',\n    'WEEKDAY_MILLIS',\n    'WEEKDAY_STR',\n    // type casting\n    // not implemented in N1QL, but added here now for the sake of tests\n    // https://docs.couchbase.com/server/current/analytics/3_query.html#Vs_SQL-92\n    'CAST',\n  ],\n});\n","import { flatKeywordList } from '../../utils';\n\nexport const keywords = flatKeywordList({\n  // https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/reservedwords.html\n  all: [\n    'ADVISE',\n    'ALL',\n    'ALTER',\n    'ANALYZE',\n    'AND',\n    'ANY',\n    'ARRAY',\n    'AS',\n    'ASC',\n    'AT',\n    'BEGIN',\n    'BETWEEN',\n    'BINARY',\n    'BOOLEAN',\n    'BREAK',\n    'BUCKET',\n    'BUILD',\n    'BY',\n    'CALL',\n    'CASE',\n    'CAST',\n    'CLUSTER',\n    'COLLATE',\n    'COLLECTION',\n    'COMMIT',\n    'COMMITTED',\n    'CONNECT',\n    'CONTINUE',\n    'CORRELATED',\n    'COVER',\n    'CREATE',\n    'CURRENT',\n    'DATABASE',\n    'DATASET',\n    'DATASTORE',\n    'DECLARE',\n    'DECREMENT',\n    'DELETE',\n    'DERIVED',\n    'DESC',\n    'DESCRIBE',\n    'DISTINCT',\n    'DO',\n    'DROP',\n    'EACH',\n    'ELEMENT',\n    'ELSE',\n    'END',\n    'EVERY',\n    'EXCEPT',\n    'EXCLUDE',\n    'EXECUTE',\n    'EXISTS',\n    'EXPLAIN',\n    'FALSE',\n    'FETCH',\n    'FILTER',\n    'FIRST',\n    'FLATTEN',\n    'FLUSH',\n    'FOLLOWING',\n    'FOR',\n    'FORCE',\n    'FROM',\n    'FTS',\n    'FUNCTION',\n    'GOLANG',\n    'GRANT',\n    'GROUP',\n    'GROUPS',\n    'GSI',\n    'HASH',\n    'HAVING',\n    'IF',\n    'ISOLATION',\n    'IGNORE',\n    'ILIKE',\n    'IN',\n    'INCLUDE',\n    'INCREMENT',\n    'INDEX',\n    'INFER',\n    'INLINE',\n    'INNER',\n    'INSERT',\n    'INTERSECT',\n    'INTO',\n    'IS',\n    'JAVASCRIPT',\n    'JOIN',\n    'KEY',\n    'KEYS',\n    'KEYSPACE',\n    'KNOWN',\n    'LANGUAGE',\n    'LAST',\n    'LEFT',\n    'LET',\n    'LETTING',\n    'LEVEL',\n    'LIKE',\n    'LIMIT',\n    'LSM',\n    'MAP',\n    'MAPPING',\n    'MATCHED',\n    'MATERIALIZED',\n    'MERGE',\n    'MINUS',\n    'MISSING',\n    'NAMESPACE',\n    'NEST',\n    'NL',\n    'NO',\n    'NOT',\n    'NTH_VALUE',\n    'NULL',\n    'NULLS',\n    'NUMBER',\n    'OBJECT',\n    'OFFSET',\n    'ON',\n    'OPTION',\n    'OPTIONS',\n    'OR',\n    'ORDER',\n    'OTHERS',\n    'OUTER',\n    'OVER',\n    'PARSE',\n    'PARTITION',\n    'PASSWORD',\n    'PATH',\n    'POOL',\n    'PRECEDING',\n    'PREPARE',\n    'PRIMARY',\n    'PRIVATE',\n    'PRIVILEGE',\n    'PROBE',\n    'PROCEDURE',\n    'PUBLIC',\n    'RANGE',\n    'RAW',\n    'REALM',\n    'REDUCE',\n    'RENAME',\n    'RESPECT',\n    'RETURN',\n    'RETURNING',\n    'REVOKE',\n    'RIGHT',\n    'ROLE',\n    'ROLLBACK',\n    'ROW',\n    'ROWS',\n    'SATISFIES',\n    'SAVEPOINT',\n    'SCHEMA',\n    'SCOPE',\n    'SELECT',\n    'SELF',\n    'SEMI',\n    'SET',\n    'SHOW',\n    'SOME',\n    'START',\n    'STATISTICS',\n    'STRING',\n    'SYSTEM',\n    'THEN',\n    'TIES',\n    'TO',\n    'TRAN',\n    'TRANSACTION',\n    'TRIGGER',\n    'TRUE',\n    'TRUNCATE',\n    'UNBOUNDED',\n    'UNDER',\n    'UNION',\n    'UNIQUE',\n    'UNKNOWN',\n    'UNNEST',\n    'UNSET',\n    'UPDATE',\n    'UPSERT',\n    'USE',\n    'USER',\n    'USING',\n    'VALIDATE',\n    'VALUE',\n    'VALUED',\n    'VALUES',\n    'VIA',\n    'VIEW',\n    'WHEN',\n    'WHERE',\n    'WHILE',\n    'WINDOW',\n    'WITH',\n    'WITHIN',\n    'WORK',\n    'XOR',\n  ],\n});\n","import { expandPhrases } from 'src/expandPhrases';\nimport Formatter from 'src/formatter/Formatter';\nimport Tokenizer from 'src/lexer/Tokenizer';\nimport { functions } from './n1ql.functions';\nimport { keywords } from './n1ql.keywords';\n\nconst reservedCommands = expandPhrases([\n  // queries\n  'WITH',\n  'SELECT [ALL | DISTINCT]',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  // Data manipulation\n  // - insert:\n  'INSERT INTO',\n  'VALUES',\n  // - update:\n  'UPDATE',\n  'SET',\n  // - delete:\n  'DELETE FROM',\n  // - merge:\n  'MERGE INTO',\n  'WHEN [NOT] MATCHED THEN',\n  'UPDATE SET',\n  'INSERT',\n  // https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/reservedwords.html\n  'ADVISE',\n  'ALTER INDEX',\n  'BEGIN TRANSACTION',\n  'BUILD INDEX',\n  'COMMIT TRANSACTION',\n  'CREATE COLLECTION',\n  'CREATE FUNCTION',\n  'CREATE INDEX',\n  'CREATE PRIMARY INDEX',\n  'CREATE SCOPE',\n  'DROP COLLECTION',\n  'DROP FUNCTION',\n  'DROP INDEX',\n  'DROP PRIMARY INDEX',\n  'DROP SCOPE',\n  'EXECUTE',\n  'EXECUTE FUNCTION',\n  'EXPLAIN',\n  'GRANT',\n  'INFER',\n  'PREPARE',\n  'RETURNING',\n  'REVOKE',\n  'ROLLBACK TRANSACTION',\n  'SAVEPOINT',\n  'SET TRANSACTION',\n  'UPDATE STATISTICS',\n  'UPSERT',\n  // other\n  'LET',\n  'NEST',\n  'SET CURRENT SCHEMA',\n  'SET SCHEMA',\n  'SHOW',\n  'UNNEST',\n  'USE KEYS',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL]', 'EXCEPT [ALL]', 'INTERSECT [ALL]']);\n\nconst reservedJoins = expandPhrases(['JOIN', '{LEFT | RIGHT} [OUTER] JOIN', 'INNER JOIN']);\n\n// For reference: http://docs.couchbase.com.s3-website-us-west-1.amazonaws.com/server/6.0/n1ql/n1ql-language-reference/index.html\nexport default class N1qlFormatter extends Formatter {\n  static operators = ['==', '||'];\n\n  tokenizer() {\n    return new Tokenizer({\n      reservedCommands,\n      reservedSetOperations,\n      reservedJoins,\n      reservedDependentClauses: ['WHEN', 'ELSE'],\n      reservedLogicalOperators: ['AND', 'OR', 'XOR'],\n      reservedKeywords: keywords,\n      reservedFunctionNames: functions,\n      // NOTE: single quotes are actually not supported in N1QL,\n      // but we support them anyway as all other SQL dialects do,\n      // which simplifies writing tests that are shared between all dialects.\n      stringTypes: ['\"\"', \"''\"],\n      identTypes: ['``'],\n      openParens: ['(', '[', '{'],\n      closeParens: [')', ']', '}'],\n      paramTypes: { positional: true, numbered: ['$'], named: ['$'] },\n      lineCommentTypes: ['#', '--'],\n      operators: N1qlFormatter.operators,\n    });\n  }\n}\n","import { flatKeywordList } from '../../utils';\n\nexport const keywords = flatKeywordList({\n  // https://docs.oracle.com/cd/B19306_01/appdev.102/b14261/reservewords.htm\n  all: [\n    // 'A',\n    'ADD',\n    'AGENT',\n    'AGGREGATE',\n    'ALL',\n    'ALTER',\n    'AND',\n    'ANY',\n    'ARRAY',\n    'ARROW',\n    'AS',\n    'ASC',\n    'AT',\n    'ATTRIBUTE',\n    'AUTHID',\n    'AVG',\n    'BEGIN',\n    'BETWEEN',\n    'BFILE_BASE',\n    'BINARY',\n    'BLOB_BASE',\n    'BLOCK',\n    'BODY',\n    'BOTH',\n    'BOUND',\n    'BULK',\n    'BY',\n    'BYTE',\n    // 'C',\n    'CALL',\n    'CALLING',\n    'CASCADE',\n    'CASE',\n    'CHAR',\n    'CHAR_BASE',\n    'CHARACTER',\n    'CHARSET',\n    'CHARSETFORM',\n    'CHARSETID',\n    'CHECK',\n    'CLOB_BASE',\n    'CLOSE',\n    'CLUSTER',\n    'CLUSTERS',\n    'COLAUTH',\n    'COLLECT',\n    'COLUMNS',\n    'COMMENT',\n    'COMMIT',\n    'COMMITTED',\n    'COMPILED',\n    'COMPRESS',\n    'CONNECT',\n    'CONSTANT',\n    'CONSTRUCTOR',\n    'CONTEXT',\n    'CONVERT',\n    'COUNT',\n    'CRASH',\n    'CREATE',\n    'CURRENT',\n    'CURSOR',\n    'CUSTOMDATUM',\n    'DANGLING',\n    'DATA',\n    'DATE',\n    'DATE_BASE',\n    'DAY',\n    'DECIMAL',\n    'DECLARE',\n    'DEFAULT',\n    'DEFINE',\n    'DELETE',\n    'DESC',\n    'DETERMINISTIC',\n    'DISTINCT',\n    'DOUBLE',\n    'DROP',\n    'DURATION',\n    'ELEMENT',\n    'ELSE',\n    'ELSIF',\n    'EMPTY',\n    'END',\n    'ESCAPE',\n    'EXCEPT',\n    'EXCEPTION',\n    'EXCEPTIONS',\n    'EXCLUSIVE',\n    'EXECUTE',\n    'EXISTS',\n    'EXIT',\n    'EXTERNAL',\n    'FETCH',\n    'FINAL',\n    'FIXED',\n    'FLOAT',\n    'FOR',\n    'FORALL',\n    'FORCE',\n    'FORM',\n    'FROM',\n    'FUNCTION',\n    'GENERAL',\n    'GOTO',\n    'GRANT',\n    'GROUP',\n    'HASH',\n    'HAVING',\n    'HEAP',\n    'HIDDEN',\n    'HOUR',\n    'IDENTIFIED',\n    'IF',\n    'IMMEDIATE',\n    'IN',\n    'INCLUDING',\n    'INDEX',\n    'INDEXES',\n    'INDICATOR',\n    'INDICES',\n    'INFINITE',\n    'INSERT',\n    'INSTANTIABLE',\n    'INT',\n    'INTERFACE',\n    'INTERSECT',\n    'INTERVAL',\n    'INTO',\n    'INVALIDATE',\n    'IS',\n    'ISOLATION',\n    'JAVA',\n    'LANGUAGE',\n    'LARGE',\n    'LEADING',\n    'LENGTH',\n    'LEVEL',\n    'LIBRARY',\n    'LIKE',\n    'LIKE2',\n    'LIKE4',\n    'LIKEC',\n    'LIMIT',\n    'LIMITED',\n    'LOCAL',\n    'LOCK',\n    'LONG',\n    'LOOP',\n    'MAP',\n    'MAX',\n    'MAXLEN',\n    'MEMBER',\n    'MERGE',\n    'MIN',\n    'MINUS',\n    'MINUTE',\n    'MOD',\n    'MODE',\n    'MODIFY',\n    'MONTH',\n    'MULTISET',\n    'NAME',\n    'NAN',\n    'NATIONAL',\n    'NATIVE',\n    'NCHAR',\n    'NEW',\n    'NOCOMPRESS',\n    'NOCOPY',\n    'NOT',\n    'NOWAIT',\n    'NULL',\n    'NUMBER_BASE',\n    'OBJECT',\n    'OCICOLL',\n    'OCIDATE',\n    'OCIDATETIME',\n    'OCIDURATION',\n    'OCIINTERVAL',\n    'OCILOBLOCATOR',\n    'OCINUMBER',\n    'OCIRAW',\n    'OCIREF',\n    'OCIREFCURSOR',\n    'OCIROWID',\n    'OCISTRING',\n    'OCITYPE',\n    'OF',\n    'ON',\n    'ONLY',\n    'OPAQUE',\n    'OPEN',\n    'OPERATOR',\n    'OPTION',\n    'OR',\n    'ORACLE',\n    'ORADATA',\n    'ORDER',\n    'OVERLAPS',\n    'ORGANIZATION',\n    'ORLANY',\n    'ORLVARY',\n    'OTHERS',\n    'OUT',\n    'OVERRIDING',\n    'PACKAGE',\n    'PARALLEL_ENABLE',\n    'PARAMETER',\n    'PARAMETERS',\n    'PARTITION',\n    'PASCAL',\n    'PIPE',\n    'PIPELINED',\n    'PRAGMA',\n    'PRECISION',\n    'PRIOR',\n    'PRIVATE',\n    'PROCEDURE',\n    'PUBLIC',\n    'RAISE',\n    'RANGE',\n    'RAW',\n    'READ',\n    'RECORD',\n    'REF',\n    'REFERENCE',\n    'REM',\n    'REMAINDER',\n    'RENAME',\n    'RESOURCE',\n    'RESULT',\n    'RETURN',\n    'RETURNING',\n    'REVERSE',\n    'REVOKE',\n    'ROLLBACK',\n    'ROW',\n    'SAMPLE',\n    'SAVE',\n    'SAVEPOINT',\n    'SB1',\n    'SB2',\n    'SB4',\n    'SECOND',\n    'SEGMENT',\n    'SELECT',\n    'SELF',\n    'SEPARATE',\n    'SEQUENCE',\n    'SERIALIZABLE',\n    'SET',\n    'SHARE',\n    'SHORT',\n    'SIZE',\n    'SIZE_T',\n    'SOME',\n    'SPARSE',\n    'SQL',\n    'SQLCODE',\n    'SQLDATA',\n    'SQLNAME',\n    'SQLSTATE',\n    'STANDARD',\n    'START',\n    'STATIC',\n    'STDDEV',\n    'STORED',\n    'STRING',\n    'STRUCT',\n    'STYLE',\n    'SUBMULTISET',\n    'SUBPARTITION',\n    'SUBSTITUTABLE',\n    'SUBTYPE',\n    'SUM',\n    'SYNONYM',\n    'TABAUTH',\n    'TABLE',\n    'TDO',\n    'THE',\n    'THEN',\n    'TIME',\n    'TIMESTAMP',\n    'TIMEZONE_ABBR',\n    'TIMEZONE_HOUR',\n    'TIMEZONE_MINUTE',\n    'TIMEZONE_REGION',\n    'TO',\n    'TRAILING',\n    'TRANSAC',\n    'TRANSACTIONAL',\n    'TRUSTED',\n    'TYPE',\n    'UB1',\n    'UB2',\n    'UB4',\n    'UNDER',\n    'UNION',\n    'UNIQUE',\n    'UNSIGNED',\n    'UNTRUSTED',\n    'UPDATE',\n    'USE',\n    'USING',\n    'VALIST',\n    'VALUE',\n    'VALUES',\n    'VARIABLE',\n    'VARIANCE',\n    'VARRAY',\n    'VARYING',\n    'VIEW',\n    'VIEWS',\n    'VOID',\n    'WHEN',\n    'WHERE',\n    'WHILE',\n    'WITH',\n    'WORK',\n    'WRAPPED',\n    'WRITE',\n    'YEAR',\n    'ZONE',\n  ],\n});\n","import { flatKeywordList } from '../../utils';\n\nexport const functions = flatKeywordList({\n  // https://docs.oracle.com/cd/B19306_01/server.102/b14200/functions001.htm\n  numeric: [\n    'ABS',\n    'ACOS',\n    'ASIN',\n    'ATAN',\n    'ATAN2',\n    'BITAND',\n    'CEIL',\n    'COS',\n    'COSH',\n    'EXP',\n    'FLOOR',\n    'LN',\n    'LOG',\n    'MOD',\n    'NANVL',\n    'POWER',\n    'REMAINDER',\n    'ROUND',\n    'SIGN',\n    'SIN',\n    'SINH',\n    'SQRT',\n    'TAN',\n    'TANH',\n    'TRUNC',\n    'WIDTH_BUCKET',\n  ],\n  character: [\n    'CHR',\n    'CONCAT',\n    'INITCAP',\n    'LOWER',\n    'LPAD',\n    'LTRIM',\n    'NLS_INITCAP',\n    'NLS_LOWER',\n    'NLSSORT',\n    'NLS_UPPER',\n    'REGEXP_REPLACE',\n    'REGEXP_SUBSTR',\n    'REPLACE',\n    'RPAD',\n    'RTRIM',\n    'SOUNDEX',\n    'SUBSTR',\n    'TRANSLATE',\n    'TREAT',\n    'TRIM',\n    'UPPER',\n\n    'NLS_CHARSET_DECL_LEN',\n    'NLS_CHARSET_ID',\n    'NLS_CHARSET_NAME',\n\n    'ASCII',\n    'INSTR',\n    'LENGTH',\n    'REGEXP_INSTR',\n  ],\n  datetime: [\n    'ADD_MONTHS',\n    'CURRENT_DATE',\n    'CURRENT_TIMESTAMP',\n    'DBTIMEZONE',\n    'EXTRACT',\n    'FROM_TZ',\n    'LAST_DAY',\n    'LOCALTIMESTAMP',\n    'MONTHS_BETWEEN',\n    'NEW_TIME',\n    'NEXT_DAY',\n    'NUMTODSINTERVAL',\n    'NUMTOYMINTERVAL',\n    'ROUND',\n    'SESSIONTIMEZONE',\n    'SYS_EXTRACT_UTC',\n    'SYSDATE',\n    'SYSTIMESTAMP',\n    'TO_CHAR',\n    'TO_TIMESTAMP',\n    'TO_TIMESTAMP_TZ',\n    'TO_DSINTERVAL',\n    'TO_YMINTERVAL',\n    'TRUNC',\n    'TZ_OFFSET',\n  ],\n  comparison: ['GREATEST', 'LEAST'],\n  conversion: [\n    'ASCIISTR',\n    'BIN_TO_NUM',\n    'CAST',\n    'CHARTOROWID',\n    'COMPOSE',\n    'CONVERT',\n    'DECOMPOSE',\n    'HEXTORAW',\n    'NUMTODSINTERVAL',\n    'NUMTOYMINTERVAL',\n    'RAWTOHEX',\n    'RAWTONHEX',\n    'ROWIDTOCHAR',\n    'ROWIDTONCHAR',\n    'SCN_TO_TIMESTAMP',\n    'TIMESTAMP_TO_SCN',\n    'TO_BINARY_DOUBLE',\n    'TO_BINARY_FLOAT',\n    'TO_CHAR',\n    'TO_CLOB',\n    'TO_DATE',\n    'TO_DSINTERVAL',\n    'TO_LOB',\n    'TO_MULTI_BYTE',\n    'TO_NCHAR',\n    'TO_NCLOB',\n    'TO_NUMBER',\n    'TO_DSINTERVAL',\n    'TO_SINGLE_BYTE',\n    'TO_TIMESTAMP',\n    'TO_TIMESTAMP_TZ',\n    'TO_YMINTERVAL',\n    'TO_YMINTERVAL',\n    'TRANSLATE',\n    'UNISTR',\n  ],\n  largeObject: ['BFILENAME', 'EMPTY_BLOB,', 'EMPTY_CLOB'],\n  collection: ['CARDINALITY', 'COLLECT', 'POWERMULTISET', 'POWERMULTISET_BY_CARDINALITY', 'SET'],\n  hierarchical: ['SYS_CONNECT_BY_PATH'],\n  dataMining: [\n    'CLUSTER_ID',\n    'CLUSTER_PROBABILITY',\n    'CLUSTER_SET',\n    'FEATURE_ID',\n    'FEATURE_SET',\n    'FEATURE_VALUE',\n    'PREDICTION',\n    'PREDICTION_COST',\n    'PREDICTION_DETAILS',\n    'PREDICTION_PROBABILITY',\n    'PREDICTION_SET',\n  ],\n  xml: [\n    'APPENDCHILDXML',\n    'DELETEXML',\n    'DEPTH',\n    'EXTRACT',\n    'EXISTSNODE',\n    'EXTRACTVALUE',\n    'INSERTCHILDXML',\n    'INSERTXMLBEFORE',\n    'PATH',\n    'SYS_DBURIGEN',\n    'SYS_XMLAGG',\n    'SYS_XMLGEN',\n    'UPDATEXML',\n    'XMLAGG',\n    'XMLCDATA',\n    'XMLCOLATTVAL',\n    'XMLCOMMENT',\n    'XMLCONCAT',\n    'XMLFOREST',\n    'XMLPARSE',\n    'XMLPI',\n    'XMLQUERY',\n    'XMLROOT',\n    'XMLSEQUENCE',\n    'XMLSERIALIZE',\n    'XMLTABLE',\n    'XMLTRANSFORM',\n  ],\n  encoding: ['DECODE', 'DUMP', 'ORA_HASH', 'VSIZE'],\n  nullRelated: ['COALESCE', 'LNNVL', 'NULLIF', 'NVL', 'NVL2'],\n  env: ['SYS_CONTEXT', 'SYS_GUID', 'SYS_TYPEID', 'UID', 'USER', 'USERENV'],\n  aggregate: [\n    'AVG',\n    'COLLECT',\n    'CORR',\n    'CORR_S',\n    'CORR_K',\n    'COUNT',\n    'COVAR_POP',\n    'COVAR_SAMP',\n    'CUME_DIST',\n    'DENSE_RANK',\n    'FIRST',\n    'GROUP_ID',\n    'GROUPING',\n    'GROUPING_ID',\n    'LAST',\n    'MAX',\n    'MEDIAN',\n    'MIN',\n    'PERCENTILE_CONT',\n    'PERCENTILE_DISC',\n    'PERCENT_RANK',\n    'RANK',\n    'REGR_SLOPE',\n    'REGR_INTERCEPT',\n    'REGR_COUNT',\n    'REGR_R2',\n    'REGR_AVGX',\n    'REGR_AVGY',\n    'REGR_SXX',\n    'REGR_SYY',\n    'REGR_SXY',\n    'STATS_BINOMIAL_TEST',\n    'STATS_CROSSTAB',\n    'STATS_F_TEST',\n    'STATS_KS_TEST',\n    'STATS_MODE',\n    'STATS_MW_TEST',\n    'STATS_ONE_WAY_ANOVA',\n    'STATS_T_TEST_ONE',\n    'STATS_T_TEST_PAIRED',\n    'STATS_T_TEST_INDEP',\n    'STATS_T_TEST_INDEPU',\n    'STATS_WSR_TEST',\n    'STDDEV',\n    'STDDEV_POP',\n    'STDDEV_SAMP',\n    'SUM',\n    'VAR_POP',\n    'VAR_SAMP',\n    'VARIANCE',\n  ],\n  // Windowing functions (minus the ones already listed in aggregates)\n  window: ['FIRST_VALUE', 'LAG', 'LAST_VALUE', 'LEAD', 'NTILE', 'RATIO_TO_REPORT', 'ROW_NUMBER'],\n  objectReference: ['DEREF', 'MAKE_REF', 'REF', 'REFTOHEX', 'VALUE'],\n  model: ['CV', 'ITERATION_NUMBER', 'PRESENTNNV', 'PRESENTV', 'PREVIOUS'],\n  // Parameterized data types\n  // https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/Data-Types.html\n  dataTypes: [\n    // Oracle builtin data types\n    'VARCHAR2',\n    'NVARCHAR2',\n    'NUMBER',\n    'FLOAT',\n    'TIMESTAMP',\n    'INTERVAL YEAR',\n    'INTERVAL DAY',\n    'RAW',\n    'UROWID',\n    'NCHAR',\n    // ANSI Data Types\n    'CHARACTER',\n    'CHAR',\n    'CHARACTER VARYING',\n    'CHAR VARYING',\n    'NATIONAL CHARACTER',\n    'NATIONAL CHAR',\n    'NATIONAL CHARACTER VARYING',\n    'NATIONAL CHAR VARYING',\n    'NCHAR VARYING',\n    'NUMERIC',\n    'DECIMAL',\n    'FLOAT',\n    // SQL/DS and DB2 Data Types\n    'VARCHAR',\n  ],\n});\n","import { expandPhrases } from 'src/expandPhrases';\nimport Formatter from 'src/formatter/Formatter';\nimport Tokenizer from 'src/lexer/Tokenizer';\nimport { EOF_TOKEN, isReserved, isToken, type Token, TokenType } from 'src/lexer/token';\nimport { keywords } from './plsql.keywords';\nimport { functions } from './plsql.functions';\n\nconst reservedCommands = expandPhrases([\n  // queries\n  'WITH',\n  'SELECT [ALL | DISTINCT | UNIQUE]',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'ORDER [SIBLINGS] BY',\n  'OFFSET',\n  'FETCH {FIRST | NEXT}',\n  // Data manipulation\n  // - insert:\n  'INSERT [INTO | ALL INTO]',\n  'VALUES',\n  // - update:\n  'UPDATE [ONLY]',\n  'SET',\n  // - delete:\n  'DELETE FROM [ONLY]',\n  // - truncate:\n  'TRUNCATE TABLE',\n  // - merge:\n  'MERGE [INTO]',\n  'WHEN [NOT] MATCHED [THEN]',\n  'UPDATE SET',\n  // Data definition\n  'CREATE [OR REPLACE] [NO FORCE | FORCE] [EDITIONING | EDITIONABLE | EDITIONABLE EDITIONING | NONEDITIONABLE] VIEW',\n  'CREATE MATERIALIZED VIEW',\n  'CREATE [GLOBAL TEMPORARY | PRIVATE TEMPORARY | SHARDED | DUPLICATED | IMMUTABLE BLOCKCHAIN | BLOCKCHAIN | IMMUTABLE] TABLE',\n  'DROP TABLE',\n  // - alter table:\n  'ALTER TABLE',\n  'ADD',\n  'DROP {COLUMN | UNUSED COLUMNS | COLUMNS CONTINUE}',\n  'MODIFY',\n  'RENAME TO',\n  'RENAME COLUMN',\n\n  // other\n  'BEGIN',\n  'CONNECT BY',\n  'DECLARE',\n  'EXCEPT',\n  'EXCEPTION',\n  'LOOP',\n  'RETURNING',\n  'START WITH',\n  'SET SCHEMA',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL]', 'EXCEPT', 'INTERSECT']);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN',\n  // non-standard joins\n  '{CROSS | OUTER} APPLY',\n]);\n\nconst reservedPhrases = ['ON DELETE', 'ON UPDATE', 'ON COMMIT'];\n\nexport default class PlSqlFormatter extends Formatter {\n  static operators = [\n    '||',\n    '**',\n    ':=',\n    '~=',\n    '^=',\n    '>>',\n    '<<',\n    '=>',\n    //  '..' // breaks operator test, handled by .\n  ];\n\n  tokenizer() {\n    return new Tokenizer({\n      reservedCommands,\n      reservedSetOperations,\n      reservedJoins,\n      reservedDependentClauses: ['WHEN', 'ELSE'],\n      reservedPhrases,\n      reservedLogicalOperators: ['AND', 'OR', 'XOR'],\n      reservedKeywords: keywords,\n      reservedFunctionNames: functions,\n      stringTypes: [\n        { quote: \"''\", prefixes: ['N'] },\n        { quote: \"q''\", prefixes: ['N'] },\n      ],\n      identTypes: [`\"\"`],\n      identChars: { rest: '$#' },\n      variableTypes: [{ regex: '&{1,2}[A-Za-z][A-Za-z0-9_$#]*' }],\n      paramTypes: { numbered: [':'], named: [':'] },\n      paramChars: {}, // Empty object used on purpose to not allow $ and # chars as specified in identChars\n      operators: PlSqlFormatter.operators,\n      postProcess,\n    });\n  }\n}\n\nfunction postProcess(tokens: Token[]) {\n  let previousReservedToken: Token = EOF_TOKEN;\n\n  return tokens.map(token => {\n    // BY [SET]\n    if (isToken.SET(token) && isToken.BY(previousReservedToken)) {\n      return { ...token, type: TokenType.RESERVED_KEYWORD };\n    }\n\n    if (isReserved(token)) {\n      previousReservedToken = token;\n    }\n\n    return token;\n  });\n}\n","import { flatKeywordList } from '../../utils';\n\nexport const functions = flatKeywordList({\n  // https://www.postgresql.org/docs/14/functions.html\n  //\n  // https://www.postgresql.org/docs/14/functions-math.html\n  math: [\n    'ABS',\n    'ACOS',\n    'ACOSD',\n    'ACOSH',\n    'ASIN',\n    'ASIND',\n    'ASINH',\n    'ATAN',\n    'ATAN2',\n    'ATAN2D',\n    'ATAND',\n    'ATANH',\n    'CBRT',\n    'CEIL',\n    'CEILING',\n    'COS',\n    'COSD',\n    'COSH',\n    'COT',\n    'COTD',\n    'DEGREES',\n    'DIV',\n    'EXP',\n    'FACTORIAL',\n    'FLOOR',\n    'GCD',\n    'LCM',\n    'LN',\n    'LOG',\n    'LOG10',\n    'MIN_SCALE',\n    'MOD',\n    'PI',\n    'POWER',\n    'RADIANS',\n    'RANDOM',\n    'ROUND',\n    'SCALE',\n    'SETSEED',\n    'SIGN',\n    'SIN',\n    'SIND',\n    'SINH',\n    'SQRT',\n    'TAN',\n    'TAND',\n    'TANH',\n    'TRIM_SCALE',\n    'TRUNC',\n    'WIDTH_BUCKET',\n  ],\n  // https://www.postgresql.org/docs/14/functions-string.html\n  string: [\n    'ABS',\n    'ASCII',\n    'BIT_LENGTH',\n    'BTRIM',\n    'CHARACTER_LENGTH',\n    'CHAR_LENGTH',\n    'CHR',\n    'CONCAT',\n    'CONCAT_WS',\n    'FORMAT',\n    'INITCAP',\n    'LEFT',\n    'LENGTH',\n    'LOWER',\n    'LPAD',\n    'LTRIM',\n    'MD5',\n    'NORMALIZE',\n    'OCTET_LENGTH',\n    'OVERLAY',\n    'PARSE_IDENT',\n    'PG_CLIENT_ENCODING',\n    'POSITION',\n    'QUOTE_IDENT',\n    'QUOTE_LITERAL',\n    'QUOTE_NULLABLE',\n    'REGEXP_MATCH',\n    'REGEXP_MATCHES',\n    'REGEXP_REPLACE',\n    'REGEXP_SPLIT_TO_ARRAY',\n    'REGEXP_SPLIT_TO_TABLE',\n    'REPEAT',\n    'REPLACE',\n    'REVERSE',\n    'RIGHT',\n    'RPAD',\n    'RTRIM',\n    'SPLIT_PART',\n    'SPRINTF',\n    'STARTS_WITH',\n    'STRING_AGG',\n    'STRING_TO_ARRAY',\n    'STRING_TO_TABLE',\n    'STRPOS',\n    'SUBSTR',\n    'SUBSTRING',\n    'TO_ASCII',\n    'TO_HEX',\n    'TRANSLATE',\n    'TRIM',\n    'UNISTR',\n    'UPPER',\n  ],\n  // https://www.postgresql.org/docs/14/functions-binarystring.html\n  binary: [\n    'BIT_COUNT',\n    'BIT_LENGTH',\n    'BTRIM',\n    'CONVERT',\n    'CONVERT_FROM',\n    'CONVERT_TO',\n    'DECODE',\n    'ENCODE',\n    'GET_BIT',\n    'GET_BYTE',\n    'LENGTH',\n    'LTRIM',\n    'MD5',\n    'OCTET_LENGTH',\n    'OVERLAY',\n    'POSITION',\n    'RTRIM',\n    'SET_BIT',\n    'SET_BYTE',\n    'SHA224',\n    'SHA256',\n    'SHA384',\n    'SHA512',\n    'STRING_AGG',\n    'SUBSTR',\n    'SUBSTRING',\n    'TRIM',\n  ],\n  // https://www.postgresql.org/docs/14/functions-bitstring.html\n  bitstring: [\n    'BIT_COUNT',\n    'BIT_LENGTH',\n    'GET_BIT',\n    'LENGTH',\n    'OCTET_LENGTH',\n    'OVERLAY',\n    'POSITION',\n    'SET_BIT',\n    'SUBSTRING',\n  ],\n  // https://www.postgresql.org/docs/14/functions-matching.html\n  pattern: [\n    'REGEXP_MATCH',\n    'REGEXP_MATCHES',\n    'REGEXP_REPLACE',\n    'REGEXP_SPLIT_TO_ARRAY',\n    'REGEXP_SPLIT_TO_TABLE',\n  ],\n  // https://www.postgresql.org/docs/14/functions-formatting.html\n  datatype: ['TO_CHAR', 'TO_DATE', 'TO_NUMBER', 'TO_TIMESTAMP'],\n  // https://www.postgresql.org/docs/14/functions-datetime.html\n  datetime: [\n    // 'AGE',\n    'CLOCK_TIMESTAMP',\n    'CURRENT_DATE',\n    'CURRENT_TIME',\n    'CURRENT_TIMESTAMP',\n    'DATE_BIN',\n    'DATE_PART',\n    'DATE_TRUNC',\n    'EXTRACT',\n    'ISFINITE',\n    'JUSTIFY_DAYS',\n    'JUSTIFY_HOURS',\n    'JUSTIFY_INTERVAL',\n    'LOCALTIME',\n    'LOCALTIMESTAMP',\n    'MAKE_DATE',\n    'MAKE_INTERVAL',\n    'MAKE_TIME',\n    'MAKE_TIMESTAMP',\n    'MAKE_TIMESTAMPTZ',\n    'NOW',\n    'PG_SLEEP',\n    'PG_SLEEP_FOR',\n    'PG_SLEEP_UNTIL',\n    'STATEMENT_TIMESTAMP',\n    'TIMEOFDAY',\n    'TO_TIMESTAMP',\n    'TRANSACTION_TIMESTAMP',\n  ],\n  // https://www.postgresql.org/docs/14/functions-enum.html\n  enum: ['ENUM_FIRST', 'ENUM_LAST', 'ENUM_RANGE'],\n  // https://www.postgresql.org/docs/14/functions-geometry.html\n  geometry: [\n    'AREA',\n    'BOUND_BOX',\n    'BOX',\n    'CENTER',\n    'CIRCLE',\n    'DIAGONAL',\n    'DIAMETER',\n    'HEIGHT',\n    'ISCLOSED',\n    'ISOPEN',\n    'LENGTH',\n    'LINE',\n    'LSEG',\n    'NPOINTS',\n    'PATH',\n    'PCLOSE',\n    'POINT',\n    'POLYGON',\n    'POPEN',\n    'RADIUS',\n    'SLOPE',\n    'WIDTH',\n  ],\n  // https://www.postgresql.org/docs/14/functions-net.html\n  network: [\n    'ABBREV',\n    'BROADCAST',\n    'FAMILY',\n    'HOST',\n    'HOSTMASK',\n    'INET_MERGE',\n    'INET_SAME_FAMILY',\n    'MACADDR8_SET7BIT',\n    'MASKLEN',\n    'NETMASK',\n    'NETWORK',\n    'SET_MASKLEN',\n    'TEXT',\n    'TRUNC',\n  ],\n  // https://www.postgresql.org/docs/14/functions-textsearch.html\n  textsearch: [\n    'ARRAY_TO_TSVECTOR',\n    'GET_CURRENT_TS_CONFIG',\n    'JSONB_TO_TSVECTOR',\n    'JSON_TO_TSVECTOR',\n    'LENGTH',\n    'NUMNODE',\n    'PHRASETO_TSQUERY',\n    'PLAINTO_TSQUERY',\n    'QUERYTREE',\n    'SETWEIGHT',\n    'STRIP',\n    'TO_TSQUERY',\n    'TO_TSVECTOR',\n    'TSQUERY_PHRASE',\n    'TSVECTOR_TO_ARRAY',\n    'TS_DEBUG',\n    'TS_DELETE',\n    'TS_FILTER',\n    'TS_HEADLINE',\n    'TS_LEXIZE',\n    'TS_PARSE',\n    'TS_RANK',\n    'TS_RANK_CD',\n    'TS_REWRITE',\n    'TS_STAT',\n    'TS_TOKEN_TYPE',\n    'WEBSEARCH_TO_TSQUERY',\n  ],\n  // https://www.postgresql.org/docs/14/functions-uuid.html\n  uuid: ['UUID'],\n  // https://www.postgresql.org/docs/14/functions-xml.html\n  xml: [\n    'CURSOR_TO_XML',\n    'CURSOR_TO_XMLSCHEMA',\n    'DATABASE_TO_XML',\n    'DATABASE_TO_XMLSCHEMA',\n    'DATABASE_TO_XML_AND_XMLSCHEMA',\n    'NEXTVAL',\n    'QUERY_TO_XML',\n    'QUERY_TO_XMLSCHEMA',\n    'QUERY_TO_XML_AND_XMLSCHEMA',\n    'SCHEMA_TO_XML',\n    'SCHEMA_TO_XMLSCHEMA',\n    'SCHEMA_TO_XML_AND_XMLSCHEMA',\n    'STRING',\n    'TABLE_TO_XML',\n    'TABLE_TO_XMLSCHEMA',\n    'TABLE_TO_XML_AND_XMLSCHEMA',\n    'XMLAGG',\n    'XMLCOMMENT',\n    'XMLCONCAT',\n    'XMLELEMENT',\n    'XMLEXISTS',\n    'XMLFOREST',\n    'XMLPARSE',\n    'XMLPI',\n    'XMLROOT',\n    'XMLSERIALIZE',\n    'XMLTABLE',\n    'XML_IS_WELL_FORMED',\n    'XML_IS_WELL_FORMED_CONTENT',\n    'XML_IS_WELL_FORMED_DOCUMENT',\n    'XPATH',\n    'XPATH_EXISTS',\n  ],\n  // https://www.postgresql.org/docs/14/functions-json.html\n  json: [\n    'ARRAY_TO_JSON',\n    'JSONB_AGG',\n    'JSONB_ARRAY_ELEMENTS',\n    'JSONB_ARRAY_ELEMENTS_TEXT',\n    'JSONB_ARRAY_LENGTH',\n    'JSONB_BUILD_ARRAY',\n    'JSONB_BUILD_OBJECT',\n    'JSONB_EACH',\n    'JSONB_EACH_TEXT',\n    'JSONB_EXTRACT_PATH',\n    'JSONB_EXTRACT_PATH_TEXT',\n    'JSONB_INSERT',\n    'JSONB_OBJECT',\n    'JSONB_OBJECT_AGG',\n    'JSONB_OBJECT_KEYS',\n    'JSONB_PATH_EXISTS',\n    'JSONB_PATH_EXISTS_TZ',\n    'JSONB_PATH_MATCH',\n    'JSONB_PATH_MATCH_TZ',\n    'JSONB_PATH_QUERY',\n    'JSONB_PATH_QUERY_ARRAY',\n    'JSONB_PATH_QUERY_ARRAY_TZ',\n    'JSONB_PATH_QUERY_FIRST',\n    'JSONB_PATH_QUERY_FIRST_TZ',\n    'JSONB_PATH_QUERY_TZ',\n    'JSONB_POPULATE_RECORD',\n    'JSONB_POPULATE_RECORDSET',\n    'JSONB_PRETTY',\n    'JSONB_SET',\n    'JSONB_SET_LAX',\n    'JSONB_STRIP_NULLS',\n    'JSONB_TO_RECORD',\n    'JSONB_TO_RECORDSET',\n    'JSONB_TYPEOF',\n    'JSON_AGG',\n    'JSON_ARRAY_ELEMENTS',\n    'JSON_ARRAY_ELEMENTS_TEXT',\n    'JSON_ARRAY_LENGTH',\n    'JSON_BUILD_ARRAY',\n    'JSON_BUILD_OBJECT',\n    'JSON_EACH',\n    'JSON_EACH_TEXT',\n    'JSON_EXTRACT_PATH',\n    'JSON_EXTRACT_PATH_TEXT',\n    'JSON_OBJECT',\n    'JSON_OBJECT_AGG',\n    'JSON_OBJECT_KEYS',\n    'JSON_POPULATE_RECORD',\n    'JSON_POPULATE_RECORDSET',\n    'JSON_STRIP_NULLS',\n    'JSON_TO_RECORD',\n    'JSON_TO_RECORDSET',\n    'JSON_TYPEOF',\n    'ROW_TO_JSON',\n    'TO_JSON',\n    'TO_JSONB',\n    'TO_TIMESTAMP',\n  ],\n  // https://www.postgresql.org/docs/14/functions-sequence.html\n  sequence: ['CURRVAL', 'LASTVAL', 'NEXTVAL', 'SETVAL'],\n  // https://www.postgresql.org/docs/14/functions-conditional.html\n  conditional: [\n    // 'CASE',\n    'COALESCE',\n    'GREATEST',\n    'LEAST',\n    'NULLIF',\n  ],\n  // https://www.postgresql.org/docs/14/functions-array.html\n  array: [\n    'ARRAY_AGG',\n    'ARRAY_APPEND',\n    'ARRAY_CAT',\n    'ARRAY_DIMS',\n    'ARRAY_FILL',\n    'ARRAY_LENGTH',\n    'ARRAY_LOWER',\n    'ARRAY_NDIMS',\n    'ARRAY_POSITION',\n    'ARRAY_POSITIONS',\n    'ARRAY_PREPEND',\n    'ARRAY_REMOVE',\n    'ARRAY_REPLACE',\n    'ARRAY_TO_STRING',\n    'ARRAY_UPPER',\n    'CARDINALITY',\n    'STRING_TO_ARRAY',\n    'TRIM_ARRAY',\n    'UNNEST',\n  ],\n  // https://www.postgresql.org/docs/14/functions-range.html\n  range: [\n    'ISEMPTY',\n    'LOWER',\n    'LOWER_INC',\n    'LOWER_INF',\n    'MULTIRANGE',\n    'RANGE_MERGE',\n    'UPPER',\n    'UPPER_INC',\n    'UPPER_INF',\n  ],\n  // https://www.postgresql.org/docs/14/functions-aggregate.html\n  aggregate: [\n    // 'ANY',\n    'ARRAY_AGG',\n    'AVG',\n    'BIT_AND',\n    'BIT_OR',\n    'BIT_XOR',\n    'BOOL_AND',\n    'BOOL_OR',\n    'COALESCE',\n    'CORR',\n    'COUNT',\n    'COVAR_POP',\n    'COVAR_SAMP',\n    'CUME_DIST',\n    'DENSE_RANK',\n    'EVERY',\n    'GROUPING',\n    'JSONB_AGG',\n    'JSONB_OBJECT_AGG',\n    'JSON_AGG',\n    'JSON_OBJECT_AGG',\n    'MAX',\n    'MIN',\n    'MODE',\n    'PERCENTILE_CONT',\n    'PERCENTILE_DISC',\n    'PERCENT_RANK',\n    'RANGE_AGG',\n    'RANGE_INTERSECT_AGG',\n    'RANK',\n    'REGR_AVGX',\n    'REGR_AVGY',\n    'REGR_COUNT',\n    'REGR_INTERCEPT',\n    'REGR_R2',\n    'REGR_SLOPE',\n    'REGR_SXX',\n    'REGR_SXY',\n    'REGR_SYY',\n    // 'SOME',\n    'STDDEV',\n    'STDDEV_POP',\n    'STDDEV_SAMP',\n    'STRING_AGG',\n    'SUM',\n    'TO_JSON',\n    'TO_JSONB',\n    'VARIANCE',\n    'VAR_POP',\n    'VAR_SAMP',\n    'XMLAGG',\n  ],\n  // https://www.postgresql.org/docs/14/functions-window.html\n  window: [\n    'CUME_DIST',\n    'DENSE_RANK',\n    'FIRST_VALUE',\n    'LAG',\n    'LAST_VALUE',\n    'LEAD',\n    'NTH_VALUE',\n    'NTILE',\n    'PERCENT_RANK',\n    'RANK',\n    'ROW_NUMBER',\n  ],\n  // https://www.postgresql.org/docs/14/functions-srf.html\n  set: ['GENERATE_SERIES', 'GENERATE_SUBSCRIPTS'],\n  // https://www.postgresql.org/docs/14/functions-info.html\n  sysInfo: [\n    'ACLDEFAULT',\n    'ACLEXPLODE',\n    'COL_DESCRIPTION',\n    'CURRENT_CATALOG',\n    'CURRENT_DATABASE',\n    'CURRENT_QUERY',\n    'CURRENT_ROLE',\n    'CURRENT_SCHEMA',\n    'CURRENT_SCHEMAS',\n    'CURRENT_USER',\n    'FORMAT_TYPE',\n    'HAS_ANY_COLUMN_PRIVILEGE',\n    'HAS_COLUMN_PRIVILEGE',\n    'HAS_DATABASE_PRIVILEGE',\n    'HAS_FOREIGN_DATA_WRAPPER_PRIVILEGE',\n    'HAS_FUNCTION_PRIVILEGE',\n    'HAS_LANGUAGE_PRIVILEGE',\n    'HAS_SCHEMA_PRIVILEGE',\n    'HAS_SEQUENCE_PRIVILEGE',\n    'HAS_SERVER_PRIVILEGE',\n    'HAS_TABLESPACE_PRIVILEGE',\n    'HAS_TABLE_PRIVILEGE',\n    'HAS_TYPE_PRIVILEGE',\n    'INET_CLIENT_ADDR',\n    'INET_CLIENT_PORT',\n    'INET_SERVER_ADDR',\n    'INET_SERVER_PORT',\n    'MAKEACLITEM',\n    'OBJ_DESCRIPTION',\n    'PG_BACKEND_PID',\n    'PG_BLOCKING_PIDS',\n    'PG_COLLATION_IS_VISIBLE',\n    'PG_CONF_LOAD_TIME',\n    'PG_CONTROL_CHECKPOINT',\n    'PG_CONTROL_INIT',\n    'PG_CONTROL_SYSTEM',\n    'PG_CONVERSION_IS_VISIBLE',\n    'PG_CURRENT_LOGFILE',\n    'PG_CURRENT_SNAPSHOT',\n    'PG_CURRENT_XACT_ID',\n    'PG_CURRENT_XACT_ID_IF_ASSIGNED',\n    'PG_DESCRIBE_OBJECT',\n    'PG_FUNCTION_IS_VISIBLE',\n    'PG_GET_CATALOG_FOREIGN_KEYS',\n    'PG_GET_CONSTRAINTDEF',\n    'PG_GET_EXPR',\n    'PG_GET_FUNCTIONDEF',\n    'PG_GET_FUNCTION_ARGUMENTS',\n    'PG_GET_FUNCTION_IDENTITY_ARGUMENTS',\n    'PG_GET_FUNCTION_RESULT',\n    'PG_GET_INDEXDEF',\n    'PG_GET_KEYWORDS',\n    'PG_GET_OBJECT_ADDRESS',\n    'PG_GET_OWNED_SEQUENCE',\n    'PG_GET_RULEDEF',\n    'PG_GET_SERIAL_SEQUENCE',\n    'PG_GET_STATISTICSOBJDEF',\n    'PG_GET_TRIGGERDEF',\n    'PG_GET_USERBYID',\n    'PG_GET_VIEWDEF',\n    'PG_HAS_ROLE',\n    'PG_IDENTIFY_OBJECT',\n    'PG_IDENTIFY_OBJECT_AS_ADDRESS',\n    'PG_INDEXAM_HAS_PROPERTY',\n    'PG_INDEX_COLUMN_HAS_PROPERTY',\n    'PG_INDEX_HAS_PROPERTY',\n    'PG_IS_OTHER_TEMP_SCHEMA',\n    'PG_JIT_AVAILABLE',\n    'PG_LAST_COMMITTED_XACT',\n    'PG_LISTENING_CHANNELS',\n    'PG_MY_TEMP_SCHEMA',\n    'PG_NOTIFICATION_QUEUE_USAGE',\n    'PG_OPCLASS_IS_VISIBLE',\n    'PG_OPERATOR_IS_VISIBLE',\n    'PG_OPFAMILY_IS_VISIBLE',\n    'PG_OPTIONS_TO_TABLE',\n    'PG_POSTMASTER_START_TIME',\n    'PG_SAFE_SNAPSHOT_BLOCKING_PIDS',\n    'PG_SNAPSHOT_XIP',\n    'PG_SNAPSHOT_XMAX',\n    'PG_SNAPSHOT_XMIN',\n    'PG_STATISTICS_OBJ_IS_VISIBLE',\n    'PG_TABLESPACE_DATABASES',\n    'PG_TABLESPACE_LOCATION',\n    'PG_TABLE_IS_VISIBLE',\n    'PG_TRIGGER_DEPTH',\n    'PG_TS_CONFIG_IS_VISIBLE',\n    'PG_TS_DICT_IS_VISIBLE',\n    'PG_TS_PARSER_IS_VISIBLE',\n    'PG_TS_TEMPLATE_IS_VISIBLE',\n    'PG_TYPEOF',\n    'PG_TYPE_IS_VISIBLE',\n    'PG_VISIBLE_IN_SNAPSHOT',\n    'PG_XACT_COMMIT_TIMESTAMP',\n    'PG_XACT_COMMIT_TIMESTAMP_ORIGIN',\n    'PG_XACT_STATUS',\n    'PQSERVERVERSION',\n    'ROW_SECURITY_ACTIVE',\n    'SESSION_USER',\n    'SHOBJ_DESCRIPTION',\n    'TO_REGCLASS',\n    'TO_REGCOLLATION',\n    'TO_REGNAMESPACE',\n    'TO_REGOPER',\n    'TO_REGOPERATOR',\n    'TO_REGPROC',\n    'TO_REGPROCEDURE',\n    'TO_REGROLE',\n    'TO_REGTYPE',\n    'TXID_CURRENT',\n    'TXID_CURRENT_IF_ASSIGNED',\n    'TXID_CURRENT_SNAPSHOT',\n    'TXID_SNAPSHOT_XIP',\n    'TXID_SNAPSHOT_XMAX',\n    'TXID_SNAPSHOT_XMIN',\n    'TXID_STATUS',\n    'TXID_VISIBLE_IN_SNAPSHOT',\n    'USER',\n    'VERSION',\n  ],\n  // https://www.postgresql.org/docs/14/functions-admin.html\n  sysAdmin: [\n    'BRIN_DESUMMARIZE_RANGE',\n    'BRIN_SUMMARIZE_NEW_VALUES',\n    'BRIN_SUMMARIZE_RANGE',\n    'CONVERT_FROM',\n    'CURRENT_SETTING',\n    'GIN_CLEAN_PENDING_LIST',\n    'PG_ADVISORY_LOCK',\n    'PG_ADVISORY_LOCK_SHARED',\n    'PG_ADVISORY_UNLOCK',\n    'PG_ADVISORY_UNLOCK_ALL',\n    'PG_ADVISORY_UNLOCK_SHARED',\n    'PG_ADVISORY_XACT_LOCK',\n    'PG_ADVISORY_XACT_LOCK_SHARED',\n    'PG_BACKUP_START_TIME',\n    'PG_CANCEL_BACKEND',\n    'PG_COLLATION_ACTUAL_VERSION',\n    'PG_COLUMN_COMPRESSION',\n    'PG_COLUMN_SIZE',\n    'PG_COPY_LOGICAL_REPLICATION_SLOT',\n    'PG_COPY_PHYSICAL_REPLICATION_SLOT',\n    'PG_CREATE_LOGICAL_REPLICATION_SLOT',\n    'PG_CREATE_PHYSICAL_REPLICATION_SLOT',\n    'PG_CREATE_RESTORE_POINT',\n    'PG_CURRENT_WAL_FLUSH_LSN',\n    'PG_CURRENT_WAL_INSERT_LSN',\n    'PG_CURRENT_WAL_LSN',\n    'PG_DATABASE_SIZE',\n    'PG_DROP_REPLICATION_SLOT',\n    'PG_EXPORT_SNAPSHOT',\n    'PG_FILENODE_RELATION',\n    'PG_GET_WAL_REPLAY_PAUSE_STATE',\n    'PG_IMPORT_SYSTEM_COLLATIONS',\n    'PG_INDEXES_SIZE',\n    'PG_IS_IN_BACKUP',\n    'PG_IS_IN_RECOVERY',\n    'PG_IS_WAL_REPLAY_PAUSED',\n    'PG_LAST_WAL_RECEIVE_LSN',\n    'PG_LAST_WAL_REPLAY_LSN',\n    'PG_LAST_XACT_REPLAY_TIMESTAMP',\n    'PG_LOGICAL_EMIT_MESSAGE',\n    'PG_LOGICAL_SLOT_GET_BINARY_CHANGES',\n    'PG_LOGICAL_SLOT_GET_CHANGES',\n    'PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES',\n    'PG_LOGICAL_SLOT_PEEK_CHANGES',\n    'PG_LOG_BACKEND_MEMORY_CONTEXTS',\n    'PG_LS_ARCHIVE_STATUSDIR',\n    'PG_LS_DIR',\n    'PG_LS_LOGDIR',\n    'PG_LS_TMPDIR',\n    'PG_LS_WALDIR',\n    'PG_PARTITION_ANCESTORS',\n    'PG_PARTITION_ROOT',\n    'PG_PARTITION_TREE',\n    'PG_PROMOTE',\n    'PG_READ_BINARY_FILE',\n    'PG_READ_FILE',\n    'PG_RELATION_FILENODE',\n    'PG_RELATION_FILEPATH',\n    'PG_RELATION_SIZE',\n    'PG_RELOAD_CONF',\n    'PG_REPLICATION_ORIGIN_ADVANCE',\n    'PG_REPLICATION_ORIGIN_CREATE',\n    'PG_REPLICATION_ORIGIN_DROP',\n    'PG_REPLICATION_ORIGIN_OID',\n    'PG_REPLICATION_ORIGIN_PROGRESS',\n    'PG_REPLICATION_ORIGIN_SESSION_IS_SETUP',\n    'PG_REPLICATION_ORIGIN_SESSION_PROGRESS',\n    'PG_REPLICATION_ORIGIN_SESSION_RESET',\n    'PG_REPLICATION_ORIGIN_SESSION_SETUP',\n    'PG_REPLICATION_ORIGIN_XACT_RESET',\n    'PG_REPLICATION_ORIGIN_XACT_SETUP',\n    'PG_REPLICATION_SLOT_ADVANCE',\n    'PG_ROTATE_LOGFILE',\n    'PG_SIZE_BYTES',\n    'PG_SIZE_PRETTY',\n    'PG_START_BACKUP',\n    'PG_STAT_FILE',\n    'PG_STOP_BACKUP',\n    'PG_SWITCH_WAL',\n    'PG_TABLESPACE_SIZE',\n    'PG_TABLE_SIZE',\n    'PG_TERMINATE_BACKEND',\n    'PG_TOTAL_RELATION_SIZE',\n    'PG_TRY_ADVISORY_LOCK',\n    'PG_TRY_ADVISORY_LOCK_SHARED',\n    'PG_TRY_ADVISORY_XACT_LOCK',\n    'PG_TRY_ADVISORY_XACT_LOCK_SHARED',\n    'PG_WALFILE_NAME',\n    'PG_WALFILE_NAME_OFFSET',\n    'PG_WAL_LSN_DIFF',\n    'PG_WAL_REPLAY_PAUSE',\n    'PG_WAL_REPLAY_RESUME',\n    'SET_CONFIG',\n  ],\n  // https://www.postgresql.org/docs/14/functions-trigger.html\n  trigger: [\n    'SUPPRESS_REDUNDANT_UPDATES_TRIGGER',\n    'TSVECTOR_UPDATE_TRIGGER',\n    'TSVECTOR_UPDATE_TRIGGER_COLUMN',\n  ],\n  // https://www.postgresql.org/docs/14/functions-event-triggers.html\n  eventTrigger: [\n    'PG_EVENT_TRIGGER_DDL_COMMANDS',\n    'PG_EVENT_TRIGGER_DROPPED_OBJECTS',\n    'PG_EVENT_TRIGGER_TABLE_REWRITE_OID',\n    'PG_EVENT_TRIGGER_TABLE_REWRITE_REASON',\n    'PG_GET_OBJECT_ADDRESS',\n  ],\n  // https://www.postgresql.org/docs/14/functions-statistics.html\n  stats: ['PG_MCV_LIST_ITEMS'],\n  cast: ['CAST'],\n  // Parameterized data types\n  // https://www.postgresql.org/docs/current/datatype.html\n  dataTypes: [\n    'BIT',\n    'BIT VARYING',\n    'CHARACTER',\n    'CHARACTER VARYING',\n    'VARCHAR',\n    'CHAR',\n    'DECIMAL',\n    'NUMERIC',\n    'TIME',\n    'TIMESTAMP',\n    'ENUM',\n  ],\n});\n","import { flatKeywordList } from '../../utils';\n\nexport const keywords = flatKeywordList({\n  // https://www.postgresql.org/docs/14/sql-keywords-appendix.html\n  all: [\n    'ABORT',\n    'ABSOLUTE',\n    'ACCESS',\n    'ACTION',\n    'ADD',\n    'ADMIN',\n    'AFTER',\n    'AGGREGATE',\n    'ALL', // reserved\n    'ALSO',\n    'ALTER',\n    'ALWAYS',\n    'ANALYSE', // reserved\n    'ANALYZE', // reserved\n    'AND', // reserved\n    'ANY', // reserved\n    'ARRAY', // reserved, requires AS\n    'AS', // reserved, requires AS\n    'ASC', // reserved\n    'ASENSITIVE',\n    'ASSERTION',\n    'ASSIGNMENT',\n    'ASYMMETRIC', // reserved\n    'AT',\n    'ATOMIC',\n    'ATTACH',\n    'ATTRIBUTE',\n    'AUTHORIZATION', // reserved (can be function or type)\n    'BACKWARD',\n    'BEFORE',\n    'BEGIN',\n    'BETWEEN', // (cannot be function or type)\n    'BIGINT', // (cannot be function or type)\n    'BINARY', // reserved (can be function or type)\n    'BIT', // (cannot be function or type)\n    'BOOLEAN', // (cannot be function or type)\n    'BOTH', // reserved\n    'BREADTH',\n    'BY',\n    'CACHE',\n    'CALL',\n    'CALLED',\n    'CASCADE',\n    'CASCADED',\n    'CASE', // reserved\n    'CAST', // reserved\n    'CATALOG',\n    'CHAIN',\n    'CHAR', // (cannot be function or type), requires AS\n    'CHARACTER', // (cannot be function or type), requires AS\n    'CHARACTERISTICS',\n    'CHECK', // reserved\n    'CHECKPOINT',\n    'CLASS',\n    'CLOSE',\n    'CLUSTER',\n    'COALESCE', // (cannot be function or type)\n    'COLLATE', // reserved\n    'COLLATION', // reserved (can be function or type)\n    'COLUMN', // reserved\n    'COLUMNS',\n    'COMMENT',\n    'COMMENTS',\n    'COMMIT',\n    'COMMITTED',\n    'COMPRESSION',\n    'CONCURRENTLY', // reserved (can be function or type)\n    'CONFIGURATION',\n    'CONFLICT',\n    'CONNECTION',\n    'CONSTRAINT', // reserved\n    'CONSTRAINTS',\n    'CONTENT',\n    'CONTINUE',\n    'CONVERSION',\n    'COPY',\n    'COST',\n    'CREATE', // reserved, requires AS\n    'CROSS', // reserved (can be function or type)\n    'CSV',\n    'CUBE',\n    'CURRENT',\n    'CURRENT_CATALOG', // reserved\n    'CURRENT_DATE', // reserved\n    'CURRENT_ROLE', // reserved\n    'CURRENT_SCHEMA', // reserved (can be function or type)\n    'CURRENT_TIME', // reserved\n    'CURRENT_TIMESTAMP', // reserved\n    'CURRENT_USER', // reserved\n    'CURSOR',\n    'CYCLE',\n    'DATA',\n    'DATABASE',\n    'DAY', // requires AS\n    'DEALLOCATE',\n    'DEC', // (cannot be function or type)\n    'DECIMAL', // (cannot be function or type)\n    'DECLARE',\n    'DEFAULT', // reserved\n    'DEFAULTS',\n    'DEFERRABLE', // reserved\n    'DEFERRED',\n    'DEFINER',\n    'DELETE',\n    'DELIMITER',\n    'DELIMITERS',\n    'DEPENDS',\n    'DEPTH',\n    'DESC', // reserved\n    'DETACH',\n    'DICTIONARY',\n    'DISABLE',\n    'DISCARD',\n    'DISTINCT', // reserved\n    'DO', // reserved\n    'DOCUMENT',\n    'DOMAIN',\n    'DOUBLE',\n    'DROP',\n    'EACH',\n    'ELSE', // reserved\n    'ENABLE',\n    'ENCODING',\n    'ENCRYPTED',\n    'END', // reserved\n    'ENUM',\n    'ESCAPE',\n    'EVENT',\n    'EXCEPT', // reserved, requires AS\n    'EXCLUDE',\n    'EXCLUDING',\n    'EXCLUSIVE',\n    'EXECUTE',\n    'EXISTS', // (cannot be function or type)\n    'EXPLAIN',\n    'EXPRESSION',\n    'EXTENSION',\n    'EXTERNAL',\n    'EXTRACT', // (cannot be function or type)\n    'FALSE', // reserved\n    'FAMILY',\n    'FETCH', // reserved, requires AS\n    'FILTER', // requires AS\n    'FINALIZE',\n    'FIRST',\n    'FLOAT', // (cannot be function or type)\n    'FOLLOWING',\n    'FOR', // reserved, requires AS\n    'FORCE',\n    'FOREIGN', // reserved\n    'FORWARD',\n    'FREEZE', // reserved (can be function or type)\n    'FROM', // reserved, requires AS\n    'FULL', // reserved (can be function or type)\n    'FUNCTION',\n    'FUNCTIONS',\n    'GENERATED',\n    'GLOBAL',\n    'GRANT', // reserved, requires AS\n    'GRANTED',\n    'GREATEST', // (cannot be function or type)\n    'GROUP', // reserved, requires AS\n    'GROUPING', // (cannot be function or type)\n    'GROUPS',\n    'HANDLER',\n    'HAVING', // reserved, requires AS\n    'HEADER',\n    'HOLD',\n    'HOUR', // requires AS\n    'IDENTITY',\n    'IF',\n    'ILIKE', // reserved (can be function or type)\n    'IMMEDIATE',\n    'IMMUTABLE',\n    'IMPLICIT',\n    'IMPORT',\n    'IN', // reserved\n    'INCLUDE',\n    'INCLUDING',\n    'INCREMENT',\n    'INDEX',\n    'INDEXES',\n    'INHERIT',\n    'INHERITS',\n    'INITIALLY', // reserved\n    'INLINE',\n    'INNER', // reserved (can be function or type)\n    'INOUT', // (cannot be function or type)\n    'INPUT',\n    'INSENSITIVE',\n    'INSERT',\n    'INSTEAD',\n    'INT', // (cannot be function or type)\n    'INTEGER', // (cannot be function or type)\n    'INTERSECT', // reserved, requires AS\n    'INTERVAL', // (cannot be function or type)\n    'INTO', // reserved, requires AS\n    'INVOKER',\n    'IS', // reserved (can be function or type)\n    'ISNULL', // reserved (can be function or type), requires AS\n    'ISOLATION',\n    'JOIN', // reserved (can be function or type)\n    'KEY',\n    'LABEL',\n    'LANGUAGE',\n    'LARGE',\n    'LAST',\n    'LATERAL', // reserved\n    'LEADING', // reserved\n    'LEAKPROOF',\n    'LEAST', // (cannot be function or type)\n    'LEFT', // reserved (can be function or type)\n    'LEVEL',\n    'LIKE', // reserved (can be function or type)\n    'LIMIT', // reserved, requires AS\n    'LISTEN',\n    'LOAD',\n    'LOCAL',\n    'LOCALTIME', // reserved\n    'LOCALTIMESTAMP', // reserved\n    'LOCATION',\n    'LOCK',\n    'LOCKED',\n    'LOGGED',\n    'MAPPING',\n    'MATCH',\n    'MATERIALIZED',\n    'MAXVALUE',\n    'METHOD',\n    'MINUTE', // requires AS\n    'MINVALUE',\n    'MODE',\n    'MONTH', // requires AS\n    'MOVE',\n    'NAME',\n    'NAMES',\n    'NATIONAL', // (cannot be function or type)\n    'NATURAL', // reserved (can be function or type)\n    'NCHAR', // (cannot be function or type)\n    'NEW',\n    'NEXT',\n    'NFC',\n    'NFD',\n    'NFKC',\n    'NFKD',\n    'NO',\n    'NONE', // (cannot be function or type)\n    'NORMALIZE', // (cannot be function or type)\n    'NORMALIZED',\n    'NOT', // reserved\n    'NOTHING',\n    'NOTIFY',\n    'NOTNULL', // reserved (can be function or type), requires AS\n    'NOWAIT',\n    'NULL', // reserved\n    'NULLIF', // (cannot be function or type)\n    'NULLS',\n    'NUMERIC', // (cannot be function or type)\n    'OBJECT',\n    'OF',\n    'OFF',\n    'OFFSET', // reserved, requires AS\n    'OIDS',\n    'OLD',\n    'ON', // reserved, requires AS\n    'ONLY', // reserved\n    'OPERATOR',\n    'OPTION',\n    'OPTIONS',\n    'OR', // reserved\n    'ORDER', // reserved, requires AS\n    'ORDINALITY',\n    'OTHERS',\n    'OUT', // (cannot be function or type)\n    'OUTER', // reserved (can be function or type)\n    'OVER', // requires AS\n    'OVERLAPS', // reserved (can be function or type), requires AS\n    'OVERLAY', // (cannot be function or type)\n    'OVERRIDING',\n    'OWNED',\n    'OWNER',\n    'PARALLEL',\n    'PARSER',\n    'PARTIAL',\n    'PARTITION',\n    'PASSING',\n    'PASSWORD',\n    'PLACING', // reserved\n    'PLANS',\n    'POLICY',\n    'POSITION', // (cannot be function or type)\n    'PRECEDING',\n    'PRECISION', // (cannot be function or type), requires AS\n    'PREPARE',\n    'PREPARED',\n    'PRESERVE',\n    'PRIMARY', // reserved\n    'PRIOR',\n    'PRIVILEGES',\n    'PROCEDURAL',\n    'PROCEDURE',\n    'PROCEDURES',\n    'PROGRAM',\n    'PUBLICATION',\n    'QUOTE',\n    'RANGE',\n    'READ',\n    'REAL', // (cannot be function or type)\n    'REASSIGN',\n    'RECHECK',\n    'RECURSIVE',\n    'REF',\n    'REFERENCES', // reserved\n    'REFERENCING',\n    'REFRESH',\n    'REINDEX',\n    'RELATIVE',\n    'RELEASE',\n    'RENAME',\n    'REPEATABLE',\n    'REPLACE',\n    'REPLICA',\n    'RESET',\n    'RESTART',\n    'RESTRICT',\n    'RETURN',\n    'RETURNING', // reserved, requires AS\n    'RETURNS',\n    'REVOKE',\n    'RIGHT', // reserved (can be function or type)\n    'ROLE',\n    'ROLLBACK',\n    'ROLLUP',\n    'ROUTINE',\n    'ROUTINES',\n    'ROW', // (cannot be function or type)\n    'ROWS',\n    'RULE',\n    'SAVEPOINT',\n    'SCHEMA',\n    'SCHEMAS',\n    'SCROLL',\n    'SEARCH',\n    'SECOND', // requires AS\n    'SECURITY',\n    'SELECT', // reserved\n    'SEQUENCE',\n    'SEQUENCES',\n    'SERIALIZABLE',\n    'SERVER',\n    'SESSION',\n    'SESSION_USER', // reserved\n    'SET',\n    'SETOF', // (cannot be function or type)\n    'SETS',\n    'SHARE',\n    'SHOW',\n    'SIMILAR', // reserved (can be function or type)\n    'SIMPLE',\n    'SKIP',\n    'SMALLINT', // (cannot be function or type)\n    'SNAPSHOT',\n    'SOME', // reserved\n    'SQL',\n    'STABLE',\n    'STANDALONE',\n    'START',\n    'STATEMENT',\n    'STATISTICS',\n    'STDIN',\n    'STDOUT',\n    'STORAGE',\n    'STORED',\n    'STRICT',\n    'STRIP',\n    'SUBSCRIPTION',\n    'SUBSTRING', // (cannot be function or type)\n    'SUPPORT',\n    'SYMMETRIC', // reserved\n    'SYSID',\n    'SYSTEM',\n    'TABLE', // reserved\n    'TABLES',\n    'TABLESAMPLE', // reserved (can be function or type)\n    'TABLESPACE',\n    'TEMP',\n    'TEMPLATE',\n    'TEMPORARY',\n    'TEXT',\n    'THEN', // reserved\n    'TIES',\n    'TIME', // (cannot be function or type)\n    'TIMESTAMP', // (cannot be function or type)\n    'TO', // reserved, requires AS\n    'TRAILING', // reserved\n    'TRANSACTION',\n    'TRANSFORM',\n    'TREAT', // (cannot be function or type)\n    'TRIGGER',\n    'TRIM', // (cannot be function or type)\n    'TRUE', // reserved\n    'TRUNCATE',\n    'TRUSTED',\n    'TYPE',\n    'TYPES',\n    'UESCAPE',\n    'UNBOUNDED',\n    'UNCOMMITTED',\n    'UNENCRYPTED',\n    'UNION', // reserved, requires AS\n    'UNIQUE', // reserved\n    'UNKNOWN',\n    'UNLISTEN',\n    'UNLOGGED',\n    'UNTIL',\n    'UPDATE',\n    'USER', // reserved\n    'USING', // reserved\n    'VACUUM',\n    'VALID',\n    'VALIDATE',\n    'VALIDATOR',\n    'VALUE',\n    'VALUES', // (cannot be function or type)\n    'VARCHAR', // (cannot be function or type)\n    'VARIADIC', // reserved\n    'VARYING', // requires AS\n    'VERBOSE', // reserved (can be function or type)\n    'VERSION',\n    'VIEW',\n    'VIEWS',\n    'VOLATILE',\n    'WHEN', // reserved\n    'WHERE', // reserved, requires AS\n    'WHITESPACE',\n    'WINDOW', // reserved, requires AS\n    'WITH', // reserved, requires AS\n    'WITHIN', // requires AS\n    'WITHOUT', // requires AS\n    'WORK',\n    'WRAPPER',\n    'WRITE',\n    'XML',\n    'XMLATTRIBUTES', // (cannot be function or type)\n    'XMLCONCAT', // (cannot be function or type)\n    'XMLELEMENT', // (cannot be function or type)\n    'XMLEXISTS', // (cannot be function or type)\n    'XMLFOREST', // (cannot be function or type)\n    'XMLNAMESPACES', // (cannot be function or type)\n    'XMLPARSE', // (cannot be function or type)\n    'XMLPI', // (cannot be function or type)\n    'XMLROOT', // (cannot be function or type)\n    'XMLSERIALIZE', // (cannot be function or type)\n    'XMLTABLE', // (cannot be function or type)\n    'YEAR', // requires AS\n    'YES',\n    'ZONE',\n  ],\n});\n","import { expandPhrases } from 'src/expandPhrases';\nimport Formatter from 'src/formatter/Formatter';\nimport Tokenizer from 'src/lexer/Tokenizer';\nimport { functions } from './postgresql.functions';\nimport { keywords } from './postgresql.keywords';\n\nconst reservedCommands = expandPhrases([\n  // queries\n  'WITH [RECURSIVE]',\n  'SELECT [ALL | DISTINCT]',\n  'FROM',\n  'WHERE',\n  'GROUP BY [ALL | DISTINCT]',\n  'HAVING',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  'FETCH {FIRST | NEXT}',\n  // Data manipulation\n  // - insert:\n  'INSERT INTO',\n  'VALUES',\n  // - update:\n  'UPDATE [ONLY]',\n  'SET',\n  'WHERE CURRENT OF',\n  // - delete:\n  'DELETE FROM [ONLY]',\n  // - truncate:\n  'TRUNCATE [TABLE] [ONLY]',\n  // Data definition\n  'CREATE [OR REPLACE] [TEMP | TEMPORARY] [RECURSIVE] VIEW',\n  'CREATE MATERIALIZED VIEW [IF NOT EXISTS]',\n  'CREATE [GLOBAL | LOCAL] [TEMPORARY | TEMP | UNLOGGED] TABLE [IF NOT EXISTS]',\n  'DROP TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER TABLE [IF EXISTS] [ONLY]',\n  'ALTER TABLE ALL IN TABLESPACE',\n  'RENAME [COLUMN]',\n  'RENAME TO',\n  'ADD [COLUMN] [IF NOT EXISTS]',\n  'DROP [COLUMN] [IF EXISTS]',\n  'ALTER [COLUMN]',\n  '[SET DATA] TYPE', // for alter column\n  '{SET | DROP} DEFAULT', // for alter column\n  '{SET | DROP} NOT NULL', // for alter column\n\n  // https://www.postgresql.org/docs/14/sql-commands.html\n  'ABORT',\n  'ALTER AGGREGATE',\n  'ALTER COLLATION',\n  'ALTER CONVERSION',\n  'ALTER DATABASE',\n  'ALTER DEFAULT PRIVILEGES',\n  'ALTER DOMAIN',\n  'ALTER EVENT TRIGGER',\n  'ALTER EXTENSION',\n  'ALTER FOREIGN DATA WRAPPER',\n  'ALTER FOREIGN TABLE',\n  'ALTER FUNCTION',\n  'ALTER GROUP',\n  'ALTER INDEX',\n  'ALTER LANGUAGE',\n  'ALTER LARGE OBJECT',\n  'ALTER MATERIALIZED VIEW',\n  'ALTER OPERATOR',\n  'ALTER OPERATOR CLASS',\n  'ALTER OPERATOR FAMILY',\n  'ALTER POLICY',\n  'ALTER PROCEDURE',\n  'ALTER PUBLICATION',\n  'ALTER ROLE',\n  'ALTER ROUTINE',\n  'ALTER RULE',\n  'ALTER SCHEMA',\n  'ALTER SEQUENCE',\n  'ALTER SERVER',\n  'ALTER STATISTICS',\n  'ALTER SUBSCRIPTION',\n  'ALTER SYSTEM',\n  'ALTER TABLESPACE',\n  'ALTER TEXT SEARCH CONFIGURATION',\n  'ALTER TEXT SEARCH DICTIONARY',\n  'ALTER TEXT SEARCH PARSER',\n  'ALTER TEXT SEARCH TEMPLATE',\n  'ALTER TRIGGER',\n  'ALTER TYPE',\n  'ALTER USER',\n  'ALTER USER MAPPING',\n  'ALTER VIEW',\n  'ANALYZE',\n  'BEGIN',\n  'CALL',\n  'CHECKPOINT',\n  'CLOSE',\n  'CLUSTER',\n  'COMMENT',\n  'COMMIT',\n  'COMMIT PREPARED',\n  'COPY',\n  'CREATE ACCESS METHOD',\n  'CREATE AGGREGATE',\n  'CREATE CAST',\n  'CREATE COLLATION',\n  'CREATE CONVERSION',\n  'CREATE DATABASE',\n  'CREATE DOMAIN',\n  'CREATE EVENT TRIGGER',\n  'CREATE EXTENSION',\n  'CREATE FOREIGN DATA WRAPPER',\n  'CREATE FOREIGN TABLE',\n  'CREATE FUNCTION',\n  'CREATE GROUP',\n  'CREATE INDEX',\n  'CREATE LANGUAGE',\n  'CREATE OPERATOR',\n  'CREATE OPERATOR CLASS',\n  'CREATE OPERATOR FAMILY',\n  'CREATE POLICY',\n  'CREATE PROCEDURE',\n  'CREATE PUBLICATION',\n  'CREATE ROLE',\n  'CREATE RULE',\n  'CREATE SCHEMA',\n  'CREATE SEQUENCE',\n  'CREATE SERVER',\n  'CREATE STATISTICS',\n  'CREATE SUBSCRIPTION',\n  'CREATE TABLESPACE',\n  'CREATE TEXT SEARCH CONFIGURATION',\n  'CREATE TEXT SEARCH DICTIONARY',\n  'CREATE TEXT SEARCH PARSER',\n  'CREATE TEXT SEARCH TEMPLATE',\n  'CREATE TRANSFORM',\n  'CREATE TRIGGER',\n  'CREATE TYPE',\n  'CREATE USER',\n  'CREATE USER MAPPING',\n  'DEALLOCATE',\n  'DECLARE',\n  'DISCARD',\n  'DO',\n  'DROP ACCESS METHOD',\n  'DROP AGGREGATE',\n  'DROP CAST',\n  'DROP COLLATION',\n  'DROP CONVERSION',\n  'DROP DATABASE',\n  'DROP DOMAIN',\n  'DROP EVENT TRIGGER',\n  'DROP EXTENSION',\n  'DROP FOREIGN DATA WRAPPER',\n  'DROP FOREIGN TABLE',\n  'DROP FUNCTION',\n  'DROP GROUP',\n  'DROP INDEX',\n  'DROP LANGUAGE',\n  'DROP MATERIALIZED VIEW',\n  'DROP OPERATOR',\n  'DROP OPERATOR CLASS',\n  'DROP OPERATOR FAMILY',\n  'DROP OWNED',\n  'DROP POLICY',\n  'DROP PROCEDURE',\n  'DROP PUBLICATION',\n  'DROP ROLE',\n  'DROP ROUTINE',\n  'DROP RULE',\n  'DROP SCHEMA',\n  'DROP SEQUENCE',\n  'DROP SERVER',\n  'DROP STATISTICS',\n  'DROP SUBSCRIPTION',\n  'DROP TABLESPACE',\n  'DROP TEXT SEARCH CONFIGURATION',\n  'DROP TEXT SEARCH DICTIONARY',\n  'DROP TEXT SEARCH PARSER',\n  'DROP TEXT SEARCH TEMPLATE',\n  'DROP TRANSFORM',\n  'DROP TRIGGER',\n  'DROP TYPE',\n  'DROP USER',\n  'DROP USER MAPPING',\n  'DROP VIEW',\n  'EXECUTE',\n  'EXPLAIN',\n  'FETCH',\n  'GRANT',\n  'IMPORT FOREIGN SCHEMA',\n  'LISTEN',\n  'LOAD',\n  'LOCK',\n  'MOVE',\n  'NOTIFY',\n  'PREPARE',\n  'PREPARE TRANSACTION',\n  'REASSIGN OWNED',\n  'REFRESH MATERIALIZED VIEW',\n  'REINDEX',\n  'RELEASE SAVEPOINT',\n  'RESET',\n  'RETURNING',\n  'REVOKE',\n  'ROLLBACK',\n  'ROLLBACK PREPARED',\n  'ROLLBACK TO SAVEPOINT',\n  'SAVEPOINT',\n  'SECURITY LABEL',\n  'SELECT INTO',\n  'SET CONSTRAINTS',\n  'SET ROLE',\n  'SET SESSION AUTHORIZATION',\n  'SET TRANSACTION',\n  'SHOW',\n  'START TRANSACTION',\n  'UNLISTEN',\n  'VACUUM',\n  // other\n  'AFTER',\n  'SET SCHEMA',\n]);\n\nconst reservedSetOperations = expandPhrases([\n  'UNION [ALL | DISTINCT]',\n  'EXCEPT [ALL | DISTINCT]',\n  'INTERSECT [ALL | DISTINCT]',\n]);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN',\n]);\n\nconst reservedPhrases = ['ON DELETE', 'ON UPDATE'];\n\nconst binaryOperators = [\n  // Math Operators\n  '<<',\n  '>>',\n  '|/',\n  '||/',\n  '!!',\n  // String Operators\n  '||',\n  // Pattern Matching Operators\n  '~~',\n  '~~*',\n  '!~~',\n  '!~~*',\n  // POSIX RegExp operators\n  '~',\n  '~*',\n  '!~',\n  '!~*',\n  // Similarity Operators\n  '<%',\n  '<<%',\n  '%>',\n  '%>>',\n  // Byte Comparison Operators\n  '~>~',\n  '~<~',\n  '~>=~',\n  '~<=~',\n  // Geometric operators\n  '@-@',\n  '@@',\n  '#',\n  '##',\n  '<->',\n  '&&',\n  '&<',\n  '&>',\n  '<<|',\n  '&<|',\n  '|>>',\n  '|&>',\n  '<^',\n  '^>',\n  '?#',\n  '?-',\n  '?|',\n  '?-|',\n  '?||',\n  '@>',\n  '<@',\n  '~=',\n  // Network Address operators\n  '>>=',\n  '<<=',\n  // Text Search Operators\n  '@@@',\n  // JSON Operators\n  '?',\n  '@?',\n  '?&',\n  '->',\n  '->>',\n  '#>',\n  '#>>',\n  '#-',\n  // Other Operators\n  ':=',\n  '::',\n  '=>',\n  '-|-',\n];\n\n// https://www.postgresql.org/docs/14/index.html\nexport default class PostgreSqlFormatter extends Formatter {\n  static operators = binaryOperators;\n\n  tokenizer() {\n    return new Tokenizer({\n      reservedCommands,\n      reservedSetOperations,\n      reservedJoins,\n      reservedDependentClauses: ['WHEN', 'ELSE'],\n      reservedPhrases,\n      reservedKeywords: keywords,\n      reservedFunctionNames: functions,\n      openParens: ['(', '['],\n      closeParens: [')', ']'],\n      stringTypes: ['$$', { quote: \"''\", prefixes: ['B', 'E', 'X', 'U&'] }],\n      identTypes: [{ quote: '\"\"', prefixes: ['U&'] }],\n      identChars: { rest: '$' },\n      paramTypes: { numbered: ['$'] },\n      operators: PostgreSqlFormatter.operators,\n    });\n  }\n}\n","import { flatKeywordList } from '../../utils';\n\nexport const functions = flatKeywordList({\n  // https://docs.aws.amazon.com/redshift/latest/dg/c_Aggregate_Functions.html\n  aggregate: [\n    'ANY_VALUE',\n    'APPROXIMATE PERCENTILE_DISC',\n    'AVG',\n    'COUNT',\n    'LISTAGG',\n    'MAX',\n    'MEDIAN',\n    'MIN',\n    'PERCENTILE_CONT',\n    'STDDEV_SAMP',\n    'STDDEV_POP',\n    'SUM',\n    'VAR_SAMP',\n    'VAR_POP',\n  ],\n  // https://docs.aws.amazon.com/redshift/latest/dg/c_Array_Functions.html\n  array: [\n    'array',\n    'array_concat',\n    'array_flatten',\n    'get_array_length',\n    'split_to_array',\n    'subarray',\n  ],\n  // https://docs.aws.amazon.com/redshift/latest/dg/c_bitwise_aggregate_functions.html\n  bitwise: ['BIT_AND', 'BIT_OR', 'BOOL_AND', 'BOOL_OR'],\n  // https://docs.aws.amazon.com/redshift/latest/dg/c_conditional_expressions.html\n  conditional: ['COALESCE', 'DECODE', 'GREATEST', 'LEAST', 'NVL', 'NVL2', 'NULLIF'],\n  // https://docs.aws.amazon.com/redshift/latest/dg/Date_functions_header.html\n  dateTime: [\n    'ADD_MONTHS',\n    'AT TIME ZONE',\n    'CONVERT_TIMEZONE',\n    'CURRENT_DATE',\n    'CURRENT_TIME',\n    'CURRENT_TIMESTAMP',\n    'DATE_CMP',\n    'DATE_CMP_TIMESTAMP',\n    'DATE_CMP_TIMESTAMPTZ',\n    'DATE_PART_YEAR',\n    'DATEADD',\n    'DATEDIFF',\n    'DATE_PART',\n    'DATE_TRUNC',\n    'EXTRACT',\n    'GETDATE',\n    'INTERVAL_CMP',\n    'LAST_DAY',\n    'MONTHS_BETWEEN',\n    'NEXT_DAY',\n    'SYSDATE',\n    'TIMEOFDAY',\n    'TIMESTAMP_CMP',\n    'TIMESTAMP_CMP_DATE',\n    'TIMESTAMP_CMP_TIMESTAMPTZ',\n    'TIMESTAMPTZ_CMP',\n    'TIMESTAMPTZ_CMP_DATE',\n    'TIMESTAMPTZ_CMP_TIMESTAMP',\n    'TIMEZONE',\n    'TO_TIMESTAMP',\n    'TRUNC',\n  ],\n  // https://docs.aws.amazon.com/redshift/latest/dg/geospatial-functions.html\n  spatial: [\n    'AddBBox',\n    'DropBBox',\n    'GeometryType',\n    'ST_AddPoint',\n    'ST_Angle',\n    'ST_Area',\n    'ST_AsBinary',\n    'ST_AsEWKB',\n    'ST_AsEWKT',\n    'ST_AsGeoJSON',\n    'ST_AsText',\n    'ST_Azimuth',\n    'ST_Boundary',\n    'ST_Collect',\n    'ST_Contains',\n    'ST_ContainsProperly',\n    'ST_ConvexHull',\n    'ST_CoveredBy',\n    'ST_Covers',\n    'ST_Crosses',\n    'ST_Dimension',\n    'ST_Disjoint',\n    'ST_Distance',\n    'ST_DistanceSphere',\n    'ST_DWithin',\n    'ST_EndPoint',\n    'ST_Envelope',\n    'ST_Equals',\n    'ST_ExteriorRing',\n    'ST_Force2D',\n    'ST_Force3D',\n    'ST_Force3DM',\n    'ST_Force3DZ',\n    'ST_Force4D',\n    'ST_GeometryN',\n    'ST_GeometryType',\n    'ST_GeomFromEWKB',\n    'ST_GeomFromEWKT',\n    'ST_GeomFromText',\n    'ST_GeomFromWKB',\n    'ST_InteriorRingN',\n    'ST_Intersects',\n    'ST_IsPolygonCCW',\n    'ST_IsPolygonCW',\n    'ST_IsClosed',\n    'ST_IsCollection',\n    'ST_IsEmpty',\n    'ST_IsSimple',\n    'ST_IsValid',\n    'ST_Length',\n    'ST_LengthSphere',\n    'ST_Length2D',\n    'ST_LineFromMultiPoint',\n    'ST_LineInterpolatePoint',\n    'ST_M',\n    'ST_MakeEnvelope',\n    'ST_MakeLine',\n    'ST_MakePoint',\n    'ST_MakePolygon',\n    'ST_MemSize',\n    'ST_MMax',\n    'ST_MMin',\n    'ST_Multi',\n    'ST_NDims',\n    'ST_NPoints',\n    'ST_NRings',\n    'ST_NumGeometries',\n    'ST_NumInteriorRings',\n    'ST_NumPoints',\n    'ST_Perimeter',\n    'ST_Perimeter2D',\n    'ST_Point',\n    'ST_PointN',\n    'ST_Points',\n    'ST_Polygon',\n    'ST_RemovePoint',\n    'ST_Reverse',\n    'ST_SetPoint',\n    'ST_SetSRID',\n    'ST_Simplify',\n    'ST_SRID',\n    'ST_StartPoint',\n    'ST_Touches',\n    'ST_Within',\n    'ST_X',\n    'ST_XMax',\n    'ST_XMin',\n    'ST_Y',\n    'ST_YMax',\n    'ST_YMin',\n    'ST_Z',\n    'ST_ZMax',\n    'ST_ZMin',\n    'SupportsBBox',\n  ],\n  // https://docs.aws.amazon.com/redshift/latest/dg/hash-functions.html\n  hash: ['CHECKSUM', 'FUNC_SHA1', 'FNV_HASH', 'MD5', 'SHA', 'SHA1', 'SHA2'],\n  // https://docs.aws.amazon.com/redshift/latest/dg/hyperloglog-functions.html\n  hyperLogLog: ['HLL', 'HLL_CREATE_SKETCH', 'HLL_CARDINALITY', 'HLL_COMBINE'],\n  // https://docs.aws.amazon.com/redshift/latest/dg/json-functions.html\n  json: [\n    'IS_VALID_JSON',\n    'IS_VALID_JSON_ARRAY',\n    'JSON_ARRAY_LENGTH',\n    'JSON_EXTRACT_ARRAY_ELEMENT_TEXT',\n    'JSON_EXTRACT_PATH_TEXT',\n    'JSON_PARSE',\n    'JSON_SERIALIZE',\n  ],\n  // https://docs.aws.amazon.com/redshift/latest/dg/Math_functions.html\n  math: [\n    'ABS',\n    'ACOS',\n    'ASIN',\n    'ATAN',\n    'ATAN2',\n    'CBRT',\n    'CEILING',\n    'CEIL',\n    'COS',\n    'COT',\n    'DEGREES',\n    'DEXP',\n    'DLOG1',\n    'DLOG10',\n    'EXP',\n    'FLOOR',\n    'LN',\n    'LOG',\n    'MOD',\n    'PI',\n    'POWER',\n    'RADIANS',\n    'RANDOM',\n    'ROUND',\n    'SIN',\n    'SIGN',\n    'SQRT',\n    'TAN',\n    'TO_HEX',\n    'TRUNC',\n  ],\n  // https://docs.aws.amazon.com/redshift/latest/dg/ml-function.html\n  machineLearning: ['EXPLAIN_MODEL'],\n  // https://docs.aws.amazon.com/redshift/latest/dg/String_functions_header.html\n  string: [\n    'ASCII',\n    'BPCHARCMP',\n    'BTRIM',\n    'BTTEXT_PATTERN_CMP',\n    'CHAR_LENGTH',\n    'CHARACTER_LENGTH',\n    'CHARINDEX',\n    'CHR',\n    'COLLATE',\n    'CONCAT',\n    'CRC32',\n    'DIFFERENCE',\n    'INITCAP',\n    'LEFT',\n    'RIGHT',\n    'LEN',\n    'LENGTH',\n    'LOWER',\n    'LPAD',\n    'RPAD',\n    'LTRIM',\n    'OCTETINDEX',\n    'OCTET_LENGTH',\n    'POSITION',\n    'QUOTE_IDENT',\n    'QUOTE_LITERAL',\n    'REGEXP_COUNT',\n    'REGEXP_INSTR',\n    'REGEXP_REPLACE',\n    'REGEXP_SUBSTR',\n    'REPEAT',\n    'REPLACE',\n    'REPLICATE',\n    'REVERSE',\n    'RTRIM',\n    'SOUNDEX',\n    'SPLIT_PART',\n    'STRPOS',\n    'STRTOL',\n    'SUBSTRING',\n    'TEXTLEN',\n    'TRANSLATE',\n    'TRIM',\n    'UPPER',\n  ],\n  // https://docs.aws.amazon.com/redshift/latest/dg/c_Type_Info_Functions.html\n  superType: [\n    'decimal_precision',\n    'decimal_scale',\n    'is_array',\n    'is_bigint',\n    'is_boolean',\n    'is_char',\n    'is_decimal',\n    'is_float',\n    'is_integer',\n    'is_object',\n    'is_scalar',\n    'is_smallint',\n    'is_varchar',\n    'json_typeof',\n  ],\n  // https://docs.aws.amazon.com/redshift/latest/dg/c_Window_functions.html\n  window: [\n    'AVG',\n    'COUNT',\n    'CUME_DIST',\n    'DENSE_RANK',\n    'FIRST_VALUE',\n    'LAST_VALUE',\n    'LAG',\n    'LEAD',\n    'LISTAGG',\n    'MAX',\n    'MEDIAN',\n    'MIN',\n    'NTH_VALUE',\n    'NTILE',\n    'PERCENT_RANK',\n    'PERCENTILE_CONT',\n    'PERCENTILE_DISC',\n    'RANK',\n    'RATIO_TO_REPORT',\n    'ROW_NUMBER',\n    'STDDEV_SAMP',\n    'STDDEV_POP',\n    'SUM',\n    'VAR_SAMP',\n    'VAR_POP',\n  ],\n  // https://docs.aws.amazon.com/redshift/latest/dg/r_Data_type_formatting.html\n  dataType: [\n    'CAST',\n    'CONVERT',\n    'TO_CHAR',\n    'TO_DATE',\n    'TO_NUMBER',\n    'TEXT_TO_INT_ALT',\n    'TEXT_TO_NUMERIC_ALT',\n  ],\n  // https://docs.aws.amazon.com/redshift/latest/dg/r_System_administration_functions.html\n  sysAdmin: [\n    'CHANGE_QUERY_PRIORITY',\n    'CHANGE_SESSION_PRIORITY',\n    'CHANGE_USER_PRIORITY',\n    'CURRENT_SETTING',\n    'PG_CANCEL_BACKEND',\n    'PG_TERMINATE_BACKEND',\n    'REBOOT_CLUSTER',\n    'SET_CONFIG',\n  ],\n  // https://docs.aws.amazon.com/redshift/latest/dg/r_System_information_functions.html\n  sysInfo: [\n    'CURRENT_AWS_ACCOUNT',\n    'CURRENT_DATABASE',\n    'CURRENT_NAMESPACE',\n    'CURRENT_SCHEMA',\n    'CURRENT_SCHEMAS',\n    'CURRENT_USER',\n    'CURRENT_USER_ID',\n    'HAS_ASSUMEROLE_PRIVILEGE',\n    'HAS_DATABASE_PRIVILEGE',\n    'HAS_SCHEMA_PRIVILEGE',\n    'HAS_TABLE_PRIVILEGE',\n    'PG_BACKEND_PID',\n    'PG_GET_COLS',\n    'PG_GET_GRANTEE_BY_IAM_ROLE',\n    'PG_GET_IAM_ROLE_BY_USER',\n    'PG_GET_LATE_BINDING_VIEW_COLS',\n    'PG_LAST_COPY_COUNT',\n    'PG_LAST_COPY_ID',\n    'PG_LAST_UNLOAD_ID',\n    'PG_LAST_QUERY_ID',\n    'PG_LAST_UNLOAD_COUNT',\n    'SESSION_USER',\n    'SLICE_NUM',\n    'USER',\n    'VERSION',\n  ],\n  dataTypes: [\n    'DECIMAL',\n    'NUMERIC',\n    'CHAR',\n    'CHARACTER',\n    'VARCHAR',\n    'CHARACTER VARYING',\n    'NCHAR',\n    'NVARCHAR',\n    'VARBYTE',\n  ],\n});\n","import { flatKeywordList } from '../../utils';\n\nexport const keywords = flatKeywordList({\n  // https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html\n  standard: [\n    'AES128',\n    'AES256',\n    'ALL',\n    'ALLOWOVERWRITE',\n    'ANY',\n    'ARRAY',\n    'AS',\n    'ASC',\n    'AUTHORIZATION',\n    'BACKUP',\n    'BETWEEN',\n    'BINARY',\n    'BOTH',\n    'CHECK',\n    'COLUMN',\n    'CONSTRAINT',\n    'CREATE',\n    'CROSS',\n    'DEFAULT',\n    'DEFERRABLE',\n    'DEFLATE',\n    'DEFRAG',\n    'DESC',\n    'DISABLE',\n    'DISTINCT',\n    'DO',\n    'ENABLE',\n    'ENCODE',\n    'ENCRYPT',\n    'ENCRYPTION',\n    'EXPLICIT',\n    'FALSE',\n    'FOR',\n    'FOREIGN',\n    'FREEZE',\n    'FROM',\n    'FULL',\n    'GLOBALDICT256',\n    'GLOBALDICT64K',\n    'GROUP',\n    'IDENTITY',\n    'IGNORE',\n    'ILIKE',\n    'IN',\n    'INITIALLY',\n    'INNER',\n    'INTO',\n    'IS',\n    'ISNULL',\n    'LANGUAGE',\n    'LEADING',\n    'LIKE',\n    'LIMIT',\n    'LOCALTIME',\n    'LOCALTIMESTAMP',\n    'LUN',\n    'LUNS',\n    'MINUS',\n    'NATURAL',\n    'NEW',\n    'NOT',\n    'NOTNULL',\n    'NULL',\n    'NULLS',\n    'OFF',\n    'OFFLINE',\n    'OFFSET',\n    'OID',\n    'OLD',\n    'ON',\n    'ONLY',\n    'OPEN',\n    'ORDER',\n    'OUTER',\n    'OVERLAPS',\n    'PARALLEL',\n    'PARTITION',\n    'PERCENT',\n    'PERMISSIONS',\n    'PLACING',\n    'PRIMARY',\n    'RECOVER',\n    'REFERENCES',\n    'REJECTLOG',\n    'RESORT',\n    'RESPECT',\n    'RESTORE',\n    'SIMILAR',\n    'SNAPSHOT',\n    'SOME',\n    'SYSTEM',\n    'TABLE',\n    'TAG',\n    'TDES',\n    'THEN',\n    'TIMESTAMP',\n    'TO',\n    'TOP',\n    'TRAILING',\n    'TRUE',\n    'UNIQUE',\n    'USING',\n    'VERBOSE',\n    'WALLET',\n    'WITHOUT',\n  ],\n  // https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-conversion.html\n  dataConversionParams: [\n    'ACCEPTANYDATE',\n    'ACCEPTINVCHARS',\n    'BLANKSASNULL',\n    'DATEFORMAT',\n    'EMPTYASNULL',\n    'ENCODING',\n    'ESCAPE',\n    'EXPLICIT_IDS',\n    'FILLRECORD',\n    'IGNOREBLANKLINES',\n    'IGNOREHEADER',\n    'REMOVEQUOTES',\n    'ROUNDEC',\n    'TIMEFORMAT',\n    'TRIMBLANKS',\n    'TRUNCATECOLUMNS',\n  ],\n  // https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-load.html\n  dataLoadParams: ['COMPROWS', 'COMPUPDATE', 'MAXERROR', 'NOLOAD', 'STATUPDATE'],\n  // https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-format.html\n  dataFormatParams: [\n    'FORMAT',\n    'CSV',\n    'DELIMITER',\n    'FIXEDWIDTH',\n    'SHAPEFILE',\n    'AVRO',\n    'JSON',\n    'PARQUET',\n    'ORC',\n  ],\n  // https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-authorization.html\n  copyAuthParams: [\n    'ACCESS_KEY_ID',\n    'CREDENTIALS',\n    'ENCRYPTED',\n    'IAM_ROLE',\n    'MASTER_SYMMETRIC_KEY',\n    'SECRET_ACCESS_KEY',\n    'SESSION_TOKEN',\n  ],\n  // https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-file-compression.html\n  copyCompressionParams: ['BZIP2', 'GZIP', 'LZOP', 'ZSTD'],\n  // https://docs.aws.amazon.com/redshift/latest/dg/r_COPY-alphabetical-parm-list.html\n  copyMiscParams: ['MANIFEST', 'READRATIO', 'REGION', 'SSH'],\n  // https://docs.aws.amazon.com/redshift/latest/dg/c_Compression_encodings.html\n  compressionEncodings: [\n    'RAW',\n    'AZ64',\n    'BYTEDICT',\n    'DELTA',\n    'DELTA32K',\n    'LZO',\n    'MOSTLY8',\n    'MOSTLY16',\n    'MOSTLY32',\n    'RUNLENGTH',\n    'TEXT255',\n    'TEXT32K',\n  ],\n  misc: [\n    // CREATE EXTERNAL SCHEMA (https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_SCHEMA.html)\n    'CATALOG_ROLE',\n    'SECRET_ARN',\n    'EXTERNAL',\n    // https://docs.aws.amazon.com/redshift/latest/dg/c_choosing_dist_sort.html\n    'AUTO',\n    'EVEN',\n    'KEY',\n    'PREDICATE', // ANALYZE | ANALYSE (https://docs.aws.amazon.com/redshift/latest/dg/r_ANALYZE.html)\n    // unknown\n    'COMPRESSION',\n  ],\n  /**\n   * Other keywords not included:\n   * STL: https://docs.aws.amazon.com/redshift/latest/dg/c_intro_STL_tables.html\n   * SVCS: https://docs.aws.amazon.com/redshift/latest/dg/svcs_views.html\n   * SVL: https://docs.aws.amazon.com/redshift/latest/dg/svl_views.html\n   * SVV: https://docs.aws.amazon.com/redshift/latest/dg/svv_views.html\n   */\n  // https://docs.aws.amazon.com/redshift/latest/dg/r_Character_types.html#r_Character_types-text-and-bpchar-types\n  dataTypes: ['BPCHAR', 'TEXT'],\n});\n","import { expandPhrases } from 'src/expandPhrases';\nimport Formatter from 'src/formatter/Formatter';\nimport Tokenizer from 'src/lexer/Tokenizer';\nimport { functions } from './redshift.functions';\nimport { keywords } from './redshift.keywords';\n\nconst reservedCommands = expandPhrases([\n  // queries\n  'WITH [RECURSIVE]',\n  'SELECT [ALL | DISTINCT]',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  // Data manipulation\n  // - insert:\n  'INSERT INTO',\n  'VALUES',\n  // - update:\n  'UPDATE',\n  'SET',\n  // - delete:\n  'DELETE [FROM]',\n  // - truncate:\n  'TRUNCATE [TABLE]',\n  // Data definition\n  'CREATE [OR REPLACE | MATERIALIZED] VIEW',\n  'CREATE [TEMPORARY | TEMP | LOCAL TEMPORARY | LOCAL TEMP] TABLE [IF NOT EXISTS]',\n  'DROP TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER TABLE',\n  'ALTER TABLE APPEND',\n  'ADD [COLUMN]',\n  'DROP [COLUMN]',\n  'RENAME TO',\n  'RENAME COLUMN',\n  'ALTER COLUMN',\n  'TYPE', // for alter column\n  'ENCODE', // for alter column\n\n  // https://docs.aws.amazon.com/redshift/latest/dg/c_SQL_commands.html\n  'ABORT',\n  'ALTER DATABASE',\n  'ALTER DATASHARE',\n  'ALTER DEFAULT PRIVILEGES',\n  'ALTER GROUP',\n  'ALTER MATERIALIZED VIEW',\n  'ALTER PROCEDURE',\n  'ALTER SCHEMA',\n  'ALTER USER',\n  'ANALYSE',\n  'ANALYZE',\n  'ANALYSE COMPRESSION',\n  'ANALYZE COMPRESSION',\n  'BEGIN',\n  'CALL',\n  'CANCEL',\n  'CLOSE',\n  'COMMENT',\n  'COMMIT',\n  'COPY',\n  'CREATE DATABASE',\n  'CREATE DATASHARE',\n  'CREATE EXTERNAL FUNCTION',\n  'CREATE EXTERNAL SCHEMA',\n  'CREATE EXTERNAL TABLE',\n  'CREATE FUNCTION',\n  'CREATE GROUP',\n  'CREATE LIBRARY',\n  'CREATE MODEL',\n  'CREATE PROCEDURE',\n  'CREATE SCHEMA',\n  'CREATE USER',\n  'DEALLOCATE',\n  'DECLARE',\n  'DESC DATASHARE',\n  'DROP DATABASE',\n  'DROP DATASHARE',\n  'DROP FUNCTION',\n  'DROP GROUP',\n  'DROP LIBRARY',\n  'DROP MODEL',\n  'DROP MATERIALIZED VIEW',\n  'DROP PROCEDURE',\n  'DROP SCHEMA',\n  'DROP USER',\n  'DROP VIEW',\n  'DROP',\n  'EXECUTE',\n  'EXPLAIN',\n  'FETCH',\n  'GRANT',\n  'LOCK',\n  'PREPARE',\n  'REFRESH MATERIALIZED VIEW',\n  'RESET',\n  'REVOKE',\n  'ROLLBACK',\n  'SELECT INTO',\n  'SET SESSION AUTHORIZATION',\n  'SET SESSION CHARACTERISTICS',\n  'SHOW',\n  'SHOW EXTERNAL TABLE',\n  'SHOW MODEL',\n  'SHOW DATASHARES',\n  'SHOW PROCEDURE',\n  'SHOW TABLE',\n  'SHOW VIEW',\n  'START TRANSACTION',\n  'UNLOAD',\n  'VACUUM',\n  // other\n  'ALTER COLUMN',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL]', 'EXCEPT', 'INTERSECT', 'MINUS']);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN',\n]);\n\nconst reservedPhrases = [\n  // https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-conversion.html\n  'NULL AS',\n  // https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_SCHEMA.html\n  'DATA CATALOG',\n  'HIVE METASTORE',\n];\n\n// https://docs.aws.amazon.com/redshift/latest/dg/cm_chap_SQLCommandRef.html\nexport default class RedshiftFormatter extends Formatter {\n  static operators = ['~', '|/', '||/', '<<', '>>', '||'];\n\n  tokenizer() {\n    return new Tokenizer({\n      reservedCommands,\n      reservedSetOperations,\n      reservedJoins,\n      reservedDependentClauses: ['WHEN', 'ELSE'],\n      reservedPhrases,\n      reservedKeywords: keywords,\n      reservedFunctionNames: functions,\n      stringTypes: [\"''\"],\n      identTypes: [`\"\"`],\n      identChars: { first: '#' },\n      paramTypes: { numbered: ['$'] },\n      operators: RedshiftFormatter.operators,\n    });\n  }\n}\n","import { flatKeywordList } from '../../utils';\n\nexport const keywords = flatKeywordList({\n  // https://deepkb.com/CO_000013/en/kb/IMPORT-fbfa59f0-2bf1-31fe-bb7b-0f9efe9932c6/spark-sql-keywords\n  all: [\n    'ADD',\n    'AFTER',\n    'ALL',\n    'ALTER',\n    'ANALYZE',\n    'AND',\n    'ANTI',\n    'ANY',\n    'ARCHIVE',\n    'ARRAY',\n    'AS',\n    'ASC',\n    'AT',\n    'AUTHORIZATION',\n    'BETWEEN',\n    'BOTH',\n    'BUCKET',\n    'BUCKETS',\n    'BY',\n    'CACHE',\n    'CASCADE',\n    'CAST',\n    'CHANGE',\n    'CHECK',\n    'CLEAR',\n    'CLUSTER',\n    'CLUSTERED',\n    'CODEGEN',\n    'COLLATE',\n    'COLLECTION',\n    'COLUMN',\n    'COLUMNS',\n    'COMMENT',\n    'COMMIT',\n    'COMPACT',\n    'COMPACTIONS',\n    'COMPUTE',\n    'CONCATENATE',\n    'CONSTRAINT',\n    'COST',\n    'CREATE',\n    'CROSS',\n    'CUBE',\n    'CURRENT',\n    'CURRENT_DATE',\n    'CURRENT_TIME',\n    'CURRENT_TIMESTAMP',\n    'CURRENT_USER',\n    'DATA',\n    'DATABASE',\n    'DATABASES',\n    'DAY',\n    'DBPROPERTIES',\n    'DEFINED',\n    'DELETE',\n    'DELIMITED',\n    'DESC',\n    'DESCRIBE',\n    'DFS',\n    'DIRECTORIES',\n    'DIRECTORY',\n    'DISTINCT',\n    'DISTRIBUTE',\n    'DIV',\n    'DROP',\n    'ESCAPE',\n    'ESCAPED',\n    'EXCEPT',\n    'EXCHANGE',\n    'EXISTS',\n    'EXPORT',\n    'EXTENDED',\n    'EXTERNAL',\n    'EXTRACT',\n    'FALSE',\n    'FETCH',\n    'FIELDS',\n    'FILTER',\n    'FILEFORMAT',\n    'FIRST',\n    'FIRST_VALUE',\n    'FOLLOWING',\n    'FOR',\n    'FOREIGN',\n    'FORMAT',\n    'FORMATTED',\n    'FULL',\n    'FUNCTION',\n    'FUNCTIONS',\n    'GLOBAL',\n    'GRANT',\n    'GROUP',\n    'GROUPING',\n    'HOUR',\n    'IF',\n    'IGNORE',\n    'IMPORT',\n    'IN',\n    'INDEX',\n    'INDEXES',\n    'INNER',\n    'INPATH',\n    'INPUTFORMAT',\n    'INTERSECT',\n    'INTERVAL',\n    'INTO',\n    'IS',\n    'ITEMS',\n    'KEYS',\n    'LAST',\n    'LAST_VALUE',\n    'LATERAL',\n    'LAZY',\n    'LEADING',\n    'LEFT',\n    'LIKE',\n    'LINES',\n    'LIST',\n    'LOCAL',\n    'LOCATION',\n    'LOCK',\n    'LOCKS',\n    'LOGICAL',\n    'MACRO',\n    'MAP',\n    'MATCHED',\n    'MERGE',\n    'MINUTE',\n    'MONTH',\n    'MSCK',\n    'NAMESPACE',\n    'NAMESPACES',\n    'NATURAL',\n    'NO',\n    'NOT',\n    'NULL',\n    'NULLS',\n    'OF',\n    'ONLY',\n    'OPTION',\n    'OPTIONS',\n    'OR',\n    'ORDER',\n    'OUT',\n    'OUTER',\n    'OUTPUTFORMAT',\n    'OVER',\n    'OVERLAPS',\n    'OVERLAY',\n    'OVERWRITE',\n    'OWNER',\n    'PARTITION',\n    'PARTITIONED',\n    'PARTITIONS',\n    'PERCENT',\n    'PLACING',\n    'POSITION',\n    'PRECEDING',\n    'PRIMARY',\n    'PRINCIPALS',\n    'PROPERTIES',\n    'PURGE',\n    'QUERY',\n    'RANGE',\n    'RECORDREADER',\n    'RECORDWRITER',\n    'RECOVER',\n    'REDUCE',\n    'REFERENCES',\n    'RENAME',\n    'REPAIR',\n    'REPLACE',\n    'RESPECT',\n    'RESTRICT',\n    'REVOKE',\n    'RIGHT',\n    'RLIKE',\n    'ROLE',\n    'ROLES',\n    'ROLLBACK',\n    'ROLLUP',\n    'ROW',\n    'ROWS',\n    'SCHEMA',\n    'SECOND',\n    'SELECT',\n    'SEMI',\n    'SEPARATED',\n    'SERDE',\n    'SERDEPROPERTIES',\n    'SESSION_USER',\n    'SETS',\n    'SHOW',\n    'SKEWED',\n    'SOME',\n    'SORT',\n    'SORTED',\n    'START',\n    'STATISTICS',\n    'STORED',\n    'STRATIFY',\n    'STRUCT',\n    'SUBSTR',\n    'SUBSTRING',\n    'TABLE',\n    'TABLES',\n    'TBLPROPERTIES',\n    'TEMPORARY',\n    'TERMINATED',\n    'THEN',\n    'TO',\n    'TOUCH',\n    'TRAILING',\n    'TRANSACTION',\n    'TRANSACTIONS',\n    'TRIM',\n    'TRUE',\n    'TRUNCATE',\n    'UNARCHIVE',\n    'UNBOUNDED',\n    'UNCACHE',\n    'UNIQUE',\n    'UNKNOWN',\n    'UNLOCK',\n    'UNSET',\n    'USE',\n    'USER',\n    'USING',\n    'VIEW',\n    'WINDOW',\n    'YEAR',\n    // other\n    'ANALYSE',\n    'ARRAY_ZIP',\n    'COALESCE',\n    'CONTAINS',\n    'CONVERT',\n    'DAYS',\n    'DAY_HOUR',\n    'DAY_MINUTE',\n    'DAY_SECOND',\n    'DECODE',\n    'DEFAULT',\n    'DISTINCTROW',\n    'ENCODE',\n    'EXPLODE',\n    'EXPLODE_OUTER',\n    'FIXED',\n    'GREATEST',\n    'GROUP_CONCAT',\n    'HOURS',\n    'HOUR_MINUTE',\n    'HOUR_SECOND',\n    'IFNULL',\n    'LEAST',\n    'LEVEL',\n    'MINUTE_SECOND',\n    'NULLIF',\n    'OFFSET',\n    'ON',\n    'OPTIMIZE',\n    'REGEXP',\n    'SEPARATOR',\n    'SIZE',\n    'STRING',\n    'TYPE',\n    'TYPES',\n    'UNSIGNED',\n    'VARIABLES',\n    'YEAR_MONTH',\n  ],\n});\n","import { flatKeywordList } from '../../utils';\n\nexport const functions = flatKeywordList({\n  // http://spark.apache.org/docs/latest/sql-ref-functions.html\n  //\n  // http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#aggregate-functions\n  aggregate: [\n    // 'ANY',\n    'APPROX_COUNT_DISTINCT',\n    'APPROX_PERCENTILE',\n    'AVG',\n    'BIT_AND',\n    'BIT_OR',\n    'BIT_XOR',\n    'BOOL_AND',\n    'BOOL_OR',\n    'COLLECT_LIST',\n    'COLLECT_SET',\n    'CORR',\n    'COUNT',\n    'COUNT',\n    'COUNT',\n    'COUNT_IF',\n    'COUNT_MIN_SKETCH',\n    'COVAR_POP',\n    'COVAR_SAMP',\n    'EVERY',\n    'FIRST',\n    'FIRST_VALUE',\n    'GROUPING',\n    'GROUPING_ID',\n    'KURTOSIS',\n    'LAST',\n    'LAST_VALUE',\n    'MAX',\n    'MAX_BY',\n    'MEAN',\n    'MIN',\n    'MIN_BY',\n    'PERCENTILE',\n    'PERCENTILE',\n    'PERCENTILE_APPROX',\n    'SKEWNESS',\n    // 'SOME',\n    'STD',\n    'STDDEV',\n    'STDDEV_POP',\n    'STDDEV_SAMP',\n    'SUM',\n    'VAR_POP',\n    'VAR_SAMP',\n    'VARIANCE',\n  ],\n  // http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#window-functions\n  window: [\n    'CUME_DIST',\n    'DENSE_RANK',\n    'LAG',\n    'LEAD',\n    'NTH_VALUE',\n    'NTILE',\n    'PERCENT_RANK',\n    'RANK',\n    'ROW_NUMBER',\n  ],\n  // http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#array-functions\n  array: [\n    'ARRAY',\n    'ARRAY_CONTAINS',\n    'ARRAY_DISTINCT',\n    'ARRAY_EXCEPT',\n    'ARRAY_INTERSECT',\n    'ARRAY_JOIN',\n    'ARRAY_MAX',\n    'ARRAY_MIN',\n    'ARRAY_POSITION',\n    'ARRAY_REMOVE',\n    'ARRAY_REPEAT',\n    'ARRAY_UNION',\n    'ARRAYS_OVERLAP',\n    'ARRAYS_ZIP',\n    'FLATTEN',\n    'SEQUENCE',\n    'SHUFFLE',\n    'SLICE',\n    'SORT_ARRAY',\n  ],\n  // http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#map-functions\n  map: [\n    'ELEMENT_AT',\n    'ELEMENT_AT',\n    'MAP',\n    'MAP_CONCAT',\n    'MAP_ENTRIES',\n    'MAP_FROM_ARRAYS',\n    'MAP_FROM_ENTRIES',\n    'MAP_KEYS',\n    'MAP_VALUES',\n    'STR_TO_MAP',\n  ],\n  // http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#date-and-timestamp-functions\n  datetime: [\n    'ADD_MONTHS',\n    'CURRENT_DATE',\n    'CURRENT_DATE',\n    'CURRENT_TIMESTAMP',\n    'CURRENT_TIMESTAMP',\n    'CURRENT_TIMEZONE',\n    'DATE_ADD',\n    'DATE_FORMAT',\n    'DATE_FROM_UNIX_DATE',\n    'DATE_PART',\n    'DATE_SUB',\n    'DATE_TRUNC',\n    'DATEDIFF',\n    'DAY',\n    'DAYOFMONTH',\n    'DAYOFWEEK',\n    'DAYOFYEAR',\n    'EXTRACT',\n    'FROM_UNIXTIME',\n    'FROM_UTC_TIMESTAMP',\n    'HOUR',\n    'LAST_DAY',\n    'MAKE_DATE',\n    'MAKE_DT_INTERVAL',\n    'MAKE_INTERVAL',\n    'MAKE_TIMESTAMP',\n    'MAKE_YM_INTERVAL',\n    'MINUTE',\n    'MONTH',\n    'MONTHS_BETWEEN',\n    'NEXT_DAY',\n    'NOW',\n    'QUARTER',\n    'SECOND',\n    'SESSION_WINDOW',\n    'TIMESTAMP_MICROS',\n    'TIMESTAMP_MILLIS',\n    'TIMESTAMP_SECONDS',\n    'TO_DATE',\n    'TO_TIMESTAMP',\n    'TO_UNIX_TIMESTAMP',\n    'TO_UTC_TIMESTAMP',\n    'TRUNC',\n    'UNIX_DATE',\n    'UNIX_MICROS',\n    'UNIX_MILLIS',\n    'UNIX_SECONDS',\n    'UNIX_TIMESTAMP',\n    'WEEKDAY',\n    'WEEKOFYEAR',\n    'WINDOW',\n    'YEAR',\n  ],\n  // http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#json-functions\n  json: [\n    'FROM_JSON',\n    'GET_JSON_OBJECT',\n    'JSON_ARRAY_LENGTH',\n    'JSON_OBJECT_KEYS',\n    'JSON_TUPLE',\n    'SCHEMA_OF_JSON',\n    'TO_JSON',\n  ],\n  // http://spark.apache.org/docs/latest/api/sql/index.html\n  misc: [\n    'ABS',\n    'ACOS',\n    'ACOSH',\n    'AGGREGATE',\n    'ARRAY_SORT',\n    'ASCII',\n    'ASIN',\n    'ASINH',\n    'ASSERT_TRUE',\n    'ATAN',\n    'ATAN2',\n    'ATANH',\n    'BASE64',\n    'BIGINT',\n    'BIN',\n    'BINARY',\n    'BIT_COUNT',\n    'BIT_GET',\n    'BIT_LENGTH',\n    'BOOLEAN',\n    'BROUND',\n    'BTRIM',\n    'CARDINALITY',\n    'CBRT',\n    'CEIL',\n    'CEILING',\n    'CHAR',\n    'CHAR_LENGTH',\n    'CHARACTER_LENGTH',\n    'CHR',\n    'CONCAT',\n    'CONCAT_WS',\n    'CONV',\n    'COS',\n    'COSH',\n    'COT',\n    'CRC32',\n    'CURRENT_CATALOG',\n    'CURRENT_DATABASE',\n    'CURRENT_USER',\n    'DATE',\n    'DECIMAL',\n    'DEGREES',\n    'DOUBLE',\n    // 'E',\n    'ELT',\n    'EXP',\n    'EXPM1',\n    'FACTORIAL',\n    'FIND_IN_SET',\n    'FLOAT',\n    'FLOOR',\n    'FORALL',\n    'FORMAT_NUMBER',\n    'FORMAT_STRING',\n    'FROM_CSV',\n    'GETBIT',\n    'HASH',\n    'HEX',\n    'HYPOT',\n    'INITCAP',\n    'INLINE',\n    'INLINE_OUTER',\n    'INPUT_FILE_BLOCK_LENGTH',\n    'INPUT_FILE_BLOCK_START',\n    'INPUT_FILE_NAME',\n    'INSTR',\n    'INT',\n    'ISNAN',\n    'ISNOTNULL',\n    'ISNULL',\n    'JAVA_METHOD',\n    'LCASE',\n    'LEFT',\n    'LENGTH',\n    'LEVENSHTEIN',\n    'LN',\n    'LOCATE',\n    'LOG',\n    'LOG10',\n    'LOG1P',\n    'LOG2',\n    'LOWER',\n    'LPAD',\n    'LTRIM',\n    'MAP_FILTER',\n    'MAP_ZIP_WITH',\n    'MD5',\n    'MOD',\n    'MONOTONICALLY_INCREASING_ID',\n    'NAMED_STRUCT',\n    'NANVL',\n    'NEGATIVE',\n    'NVL',\n    'NVL2',\n    'OCTET_LENGTH',\n    'OVERLAY',\n    'PARSE_URL',\n    'PI',\n    'PMOD',\n    'POSEXPLODE',\n    'POSEXPLODE_OUTER',\n    'POSITION',\n    'POSITIVE',\n    'POW',\n    'POWER',\n    'PRINTF',\n    'RADIANS',\n    'RAISE_ERROR',\n    'RAND',\n    'RANDN',\n    'RANDOM',\n    'REFLECT',\n    'REGEXP_EXTRACT',\n    'REGEXP_EXTRACT_ALL',\n    'REGEXP_LIKE',\n    'REGEXP_REPLACE',\n    'REPEAT',\n    'REPLACE',\n    'REVERSE',\n    'RIGHT',\n    'RINT',\n    'ROUND',\n    'RPAD',\n    'RTRIM',\n    'SCHEMA_OF_CSV',\n    'SENTENCES',\n    'SHA',\n    'SHA1',\n    'SHA2',\n    'SHIFTLEFT',\n    'SHIFTRIGHT',\n    'SHIFTRIGHTUNSIGNED',\n    'SIGN',\n    'SIGNUM',\n    'SIN',\n    'SINH',\n    'SMALLINT',\n    'SOUNDEX',\n    'SPACE',\n    'SPARK_PARTITION_ID',\n    'SPLIT',\n    'SQRT',\n    'STACK',\n    'SUBSTR',\n    'SUBSTRING',\n    'SUBSTRING_INDEX',\n    'TAN',\n    'TANH',\n    'TIMESTAMP',\n    'TINYINT',\n    'TO_CSV',\n    'TRANSFORM_KEYS',\n    'TRANSFORM_VALUES',\n    'TRANSLATE',\n    'TRIM',\n    'TRY_ADD',\n    'TRY_DIVIDE',\n    'TYPEOF',\n    'UCASE',\n    'UNBASE64',\n    'UNHEX',\n    'UPPER',\n    'UUID',\n    'VERSION',\n    'WIDTH_BUCKET',\n    'XPATH',\n    'XPATH_BOOLEAN',\n    'XPATH_DOUBLE',\n    'XPATH_FLOAT',\n    'XPATH_INT',\n    'XPATH_LONG',\n    'XPATH_NUMBER',\n    'XPATH_SHORT',\n    'XPATH_STRING',\n    'XXHASH64',\n    'ZIP_WITH',\n  ],\n  cast: ['CAST'],\n  // Shorthand functions to use in place of CASE expression\n  caseAbbrev: ['COALESCE', 'NULLIF'],\n  // Parameterized data types\n  // https://spark.apache.org/docs/latest/sql-ref-datatypes.html\n  dataTypes: [\n    'DECIMAL',\n    'DEC',\n    'NUMERIC',\n    // No varchar type in Spark, only STRING. Added for the sake of tests\n    'VARCHAR',\n  ],\n});\n","import { expandPhrases } from 'src/expandPhrases';\nimport Formatter from 'src/formatter/Formatter';\nimport Tokenizer from 'src/lexer/Tokenizer';\nimport { EOF_TOKEN, isToken, type Token, TokenType } from 'src/lexer/token';\nimport { keywords } from './spark.keywords';\nimport { functions } from './spark.functions';\n\n// http://spark.apache.org/docs/latest/sql-ref-syntax.html\nconst reservedCommands = expandPhrases([\n  // queries\n  'WITH',\n  'SELECT [ALL | DISTINCT]',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'WINDOW',\n  'ORDER BY',\n  'SORT BY',\n  'CLUSTER BY',\n  'DISTRIBUTE BY',\n  'LIMIT',\n  // Data manipulation\n  // - insert:\n  'INSERT [INTO | OVERWRITE] [TABLE]',\n  'VALUES',\n  // - truncate:\n  'TRUNCATE TABLE',\n  // - insert overwrite directory:\n  //   https://spark.apache.org/docs/latest/sql-ref-syntax-dml-insert-overwrite-directory.html\n  'INSERT OVERWRITE [LOCAL] DIRECTORY',\n  // - load:\n  //   https://spark.apache.org/docs/latest/sql-ref-syntax-dml-load.html\n  'LOAD DATA [LOCAL] INPATH',\n  '[OVERWRITE] INTO TABLE',\n  // Data definition\n  'CREATE [OR REPLACE] [GLOBAL TEMPORARY | TEMPORARY] VIEW [IF NOT EXISTS]',\n  'CREATE [EXTERNAL] TABLE [IF NOT EXISTS]',\n  'DROP TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER TABLE',\n  'ADD COLUMNS',\n  'DROP {COLUMN | COLUMNS}',\n  'RENAME TO',\n  'RENAME COLUMN',\n  'ALTER COLUMN',\n\n  'ALTER DATABASE',\n  'ALTER VIEW',\n  'CREATE DATABASE',\n  'CREATE FUNCTION',\n  'DROP DATABASE',\n  'DROP FUNCTION',\n  'DROP VIEW',\n  'REPAIR TABLE',\n  'USE DATABASE',\n  // Data Retrieval\n  'TABLESAMPLE',\n  'PIVOT',\n  'TRANSFORM',\n  'EXPLAIN',\n  // Auxiliary\n  'ADD FILE',\n  'ADD JAR',\n  'ANALYZE TABLE',\n  'CACHE TABLE',\n  'CLEAR CACHE',\n  'DESCRIBE DATABASE',\n  'DESCRIBE FUNCTION',\n  'DESCRIBE QUERY',\n  'DESCRIBE TABLE',\n  'LIST FILE',\n  'LIST JAR',\n  'REFRESH',\n  'REFRESH TABLE',\n  'REFRESH FUNCTION',\n  'RESET',\n  'SHOW COLUMNS',\n  'SHOW CREATE TABLE',\n  'SHOW DATABASES',\n  'SHOW FUNCTIONS',\n  'SHOW PARTITIONS',\n  'SHOW TABLE EXTENDED',\n  'SHOW TABLES',\n  'SHOW TBLPROPERTIES',\n  'SHOW VIEWS',\n  'UNCACHE TABLE',\n  // other\n  'LATERAL VIEW',\n]);\n\nconst reservedSetOperations = expandPhrases([\n  'UNION [ALL | DISTINCT]',\n  'EXCEPT [ALL | DISTINCT]',\n  'INTERSECT [ALL | DISTINCT]',\n]);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN',\n  // non-standard-joins\n  '[LEFT] {ANTI | SEMI} JOIN',\n  'NATURAL [LEFT] {ANTI | SEMI} JOIN',\n]);\n\nconst reservedPhrases = ['ON DELETE', 'ON UPDATE', 'CURRENT ROW'];\n\n// http://spark.apache.org/docs/latest/sql-programming-guide.html\nexport default class SparkFormatter extends Formatter {\n  static operators = ['~', '<=>', '&&', '||', '==', '->'];\n\n  tokenizer() {\n    return new Tokenizer({\n      reservedCommands,\n      reservedSetOperations,\n      reservedJoins,\n      reservedDependentClauses: ['WHEN', 'ELSE'],\n      reservedPhrases,\n      reservedLogicalOperators: ['AND', 'OR', 'XOR'],\n      reservedKeywords: keywords,\n      reservedFunctionNames: functions,\n      openParens: ['(', '['],\n      closeParens: [')', ']'],\n      stringTypes: [\n        { quote: \"''\", prefixes: ['R', 'X'] },\n        { quote: '\"\"', prefixes: ['R', 'X'] },\n      ],\n      identTypes: ['``'],\n      variableTypes: [{ quote: '{}', prefixes: ['$'], requirePrefix: true }],\n      operators: SparkFormatter.operators,\n      postProcess,\n    });\n  }\n}\n\nfunction postProcess(tokens: Token[]) {\n  return tokens.map((token, i) => {\n    const prevToken = tokens[i - 1] || EOF_TOKEN;\n    const nextToken = tokens[i + 1] || EOF_TOKEN;\n\n    // [WINDOW](...)\n    if (isToken.WINDOW(token) && nextToken.type === TokenType.OPEN_PAREN) {\n      // This is a function call, treat it as a reserved function name\n      return { ...token, type: TokenType.RESERVED_FUNCTION_NAME };\n    }\n\n    // TODO: deprecate this once ITEMS is merged with COLLECTION\n    if (token.text === 'ITEMS' && token.type === TokenType.RESERVED_KEYWORD) {\n      if (!(prevToken.text === 'COLLECTION' && nextToken.text === 'TERMINATED')) {\n        // this is a word and not COLLECTION ITEMS\n        return { ...token, type: TokenType.IDENTIFIER, text: token.raw };\n      }\n    }\n\n    return token;\n  });\n}\n","import { flatKeywordList } from '../../utils';\n\nexport const functions = flatKeywordList({\n  // https://www.sqlite.org/lang_corefunc.html\n  scalar: [\n    'ABS',\n    'CHANGES',\n    'CHAR',\n    'COALESCE',\n    'FORMAT',\n    'GLOB',\n    'HEX',\n    'IFNULL',\n    'IIF',\n    'INSTR',\n    'LAST_INSERT_ROWID',\n    'LENGTH',\n    'LIKE',\n    'LIKELIHOOD',\n    'LIKELY',\n    'LOAD_EXTENSION',\n    'LOWER',\n    'LTRIM',\n    'NULLIF',\n    'PRINTF',\n    'QUOTE',\n    'RANDOM',\n    'RANDOMBLOB',\n    'REPLACE',\n    'ROUND',\n    'RTRIM',\n    'SIGN',\n    'SOUNDEX',\n    'SQLITE_COMPILEOPTION_GET',\n    'SQLITE_COMPILEOPTION_USED',\n    'SQLITE_OFFSET',\n    'SQLITE_SOURCE_ID',\n    'SQLITE_VERSION',\n    'SUBSTR',\n    'SUBSTRING',\n    'TOTAL_CHANGES',\n    'TRIM',\n    'TYPEOF',\n    'UNICODE',\n    'UNLIKELY',\n    'UPPER',\n    'ZEROBLOB',\n  ],\n  // https://www.sqlite.org/lang_aggfunc.html\n  aggregate: ['AVG', 'COUNT', 'GROUP_CONCAT', 'MAX', 'MIN', 'SUM', 'TOTAL'],\n  // https://www.sqlite.org/lang_datefunc.html\n  datetime: ['DATE', 'TIME', 'DATETIME', 'JULIANDAY', 'UNIXEPOCH', 'STRFTIME'],\n  // https://www.sqlite.org/windowfunctions.html#biwinfunc\n  window: [\n    'row_number',\n    'rank',\n    'dense_rank',\n    'percent_rank',\n    'cume_dist',\n    'ntile',\n    'lag',\n    'lead',\n    'first_value',\n    'last_value',\n    'nth_value',\n  ],\n  // https://www.sqlite.org/lang_mathfunc.html\n  math: [\n    'ACOS',\n    'ACOSH',\n    'ASIN',\n    'ASINH',\n    'ATAN',\n    'ATAN2',\n    'ATANH',\n    'CEIL',\n    'CEILING',\n    'COS',\n    'COSH',\n    'DEGREES',\n    'EXP',\n    'FLOOR',\n    'LN',\n    'LOG',\n    'LOG',\n    'LOG10',\n    'LOG2',\n    'MOD',\n    'PI',\n    'POW',\n    'POWER',\n    'RADIANS',\n    'SIN',\n    'SINH',\n    'SQRT',\n    'TAN',\n    'TANH',\n    'TRUNC',\n  ],\n  // https://www.sqlite.org/json1.html\n  json: [\n    'JSON',\n    'JSON_ARRAY',\n    'JSON_ARRAY_LENGTH',\n    'JSON_ARRAY_LENGTH',\n    'JSON_EXTRACT',\n    'JSON_INSERT',\n    'JSON_OBJECT',\n    'JSON_PATCH',\n    'JSON_REMOVE',\n    'JSON_REPLACE',\n    'JSON_SET',\n    'JSON_TYPE',\n    'JSON_TYPE',\n    'JSON_VALID',\n    'JSON_QUOTE',\n    'JSON_GROUP_ARRAY',\n    'JSON_GROUP_OBJECT',\n    'JSON_EACH',\n    'JSON_TREE',\n  ],\n  cast: ['CAST'],\n  // SQLite allows parameters for all data types\n  // Well, in fact it allows any word as a data type, e.g. CREATE TABLE foo (col1 madeupname(123));\n  // https://www.sqlite.org/datatype3.html\n  dataTypes: [\n    'CHARACTER',\n    'VARCHAR',\n    'VARYING CHARACTER',\n    'NCHAR',\n    'NATIVE CHARACTER',\n    'NVARCHAR',\n    'NUMERIC',\n    'DECIMAL',\n  ],\n});\n","import { flatKeywordList } from '../../utils';\n\nexport const keywords = flatKeywordList({\n  // https://www.sqlite.org/lang_keywords.html\n  all: [\n    'ABORT',\n    'ACTION',\n    'ADD',\n    'AFTER',\n    'ALL',\n    'ALTER',\n    'AND',\n    'ANY',\n    'ARE',\n    'ARRAY',\n    'ALWAYS',\n    'ANALYZE',\n    'AS',\n    'ASC',\n    'ATTACH',\n    'AUTOINCREMENT',\n    'BEFORE',\n    'BEGIN',\n    'BETWEEN',\n    'BY',\n    'CASCADE',\n    'CASE',\n    'CAST',\n    'CHECK',\n    'COLLATE',\n    'COLUMN',\n    'COMMIT',\n    'CONFLICT',\n    'CONSTRAINT',\n    'CREATE',\n    'CROSS',\n    'CURRENT',\n    'CURRENT_DATE',\n    'CURRENT_TIME',\n    'CURRENT_TIMESTAMP',\n    'DATABASE',\n    'DEFAULT',\n    'DEFERRABLE',\n    'DEFERRED',\n    'DELETE',\n    'DESC',\n    'DETACH',\n    'DISTINCT',\n    'DO',\n    'DROP',\n    'EACH',\n    'ELSE',\n    'END',\n    'ESCAPE',\n    'EXCEPT',\n    'EXCLUDE',\n    'EXCLUSIVE',\n    'EXISTS',\n    'EXPLAIN',\n    'FAIL',\n    'FILTER',\n    'FIRST',\n    'FOLLOWING',\n    'FOR',\n    'FOREIGN',\n    'FROM',\n    'FULL',\n    'GENERATED',\n    'GLOB',\n    'GROUP',\n    'GROUPS',\n    'HAVING',\n    'IF',\n    'IGNORE',\n    'IMMEDIATE',\n    'IN',\n    'INDEX',\n    'INDEXED',\n    'INITIALLY',\n    'INNER',\n    'INSERT',\n    'INSTEAD',\n    'INTERSECT',\n    'INTO',\n    'IS',\n    'ISNULL',\n    'JOIN',\n    'KEY',\n    'LAST',\n    'LEFT',\n    'LIKE',\n    'LIMIT',\n    'MATCH',\n    'MATERIALIZED',\n    'NATURAL',\n    'NO',\n    'NOT',\n    'NOTHING',\n    'NOTNULL',\n    'NULL',\n    'NULLS',\n    'OF',\n    'OFFSET',\n    'ON',\n    'ONLY',\n    'OPEN',\n    'OR',\n    'ORDER',\n    'OTHERS',\n    'OUTER',\n    'OVER',\n    'PARTITION',\n    'PLAN',\n    'PRAGMA',\n    'PRECEDING',\n    'PRIMARY',\n    'QUERY',\n    'RAISE',\n    'RANGE',\n    'RECURSIVE',\n    'REFERENCES',\n    'REGEXP',\n    'REINDEX',\n    'RELEASE',\n    'RENAME',\n    'REPLACE',\n    'RESTRICT',\n    'RETURNING',\n    'RIGHT',\n    'ROLLBACK',\n    'ROW',\n    'ROWS',\n    'SAVEPOINT',\n    'SELECT',\n    'SET',\n    'TABLE',\n    'TEMP',\n    'TEMPORARY',\n    'THEN',\n    'TIES',\n    'TO',\n    'TRANSACTION',\n    'TRIGGER',\n    'UNBOUNDED',\n    'UNION',\n    'UNIQUE',\n    'UPDATE',\n    'USING',\n    'VACUUM',\n    'VALUES',\n    'VIEW',\n    'VIRTUAL',\n    'WHEN',\n    'WHERE',\n    'WINDOW',\n    'WITH',\n    'WITHOUT',\n  ],\n});\n","import { expandPhrases } from 'src/expandPhrases';\nimport Formatter from 'src/formatter/Formatter';\nimport Tokenizer from 'src/lexer/Tokenizer';\nimport { functions } from './sqlite.functions';\nimport { keywords } from './sqlite.keywords';\n\nconst reservedCommands = expandPhrases([\n  // queries\n  'WITH [RECURSIVE]',\n  'SELECT [ALL | DISTINCT]',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  // Data manipulation\n  // - insert:\n  'INSERT [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK] INTO',\n  'REPLACE INTO',\n  'VALUES',\n  // - update:\n  'UPDATE [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK]',\n  'SET',\n  // - delete:\n  'DELETE FROM',\n  // Data definition\n  'CREATE [TEMPORARY | TEMP] VIEW [IF NOT EXISTS]',\n  'CREATE [TEMPORARY | TEMP] TABLE [IF NOT EXISTS]',\n  'DROP TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER TABLE',\n  'ADD [COLUMN]',\n  'DROP [COLUMN]',\n  'RENAME [COLUMN]',\n  'RENAME TO',\n\n  // other\n  'SET SCHEMA',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL]', 'EXCEPT', 'INTERSECT']);\n\n// joins - https://www.sqlite.org/syntax/join-operator.html\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN',\n]);\n\nconst reservedPhrases = ['ON DELETE', 'ON UPDATE'];\n\nexport default class SqliteFormatter extends Formatter {\n  // https://www.sqlite.org/lang_expr.html\n  static operators = ['~', '->', '->>', '||', '<<', '>>', '=='];\n\n  tokenizer() {\n    return new Tokenizer({\n      reservedCommands,\n      reservedSetOperations,\n      reservedJoins,\n      reservedDependentClauses: ['WHEN', 'ELSE'],\n      reservedPhrases,\n      reservedKeywords: keywords,\n      reservedFunctionNames: functions,\n      stringTypes: [\n        { quote: \"''\", prefixes: ['X'] },\n        // { quote: '\"\"', prefixes: ['X'] }, // currently conflict with \"\" identifiers\n      ],\n      identTypes: [`\"\"`, '``', '[]'],\n      // https://www.sqlite.org/lang_expr.html#parameters\n      paramTypes: { positional: true, numbered: ['?'], named: [':', '@', '$'] },\n      operators: SqliteFormatter.operators,\n    });\n  }\n}\n","import { flatKeywordList } from '../../utils';\n\nexport const functions = flatKeywordList({\n  // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_9_set_function_specification\n  set: ['GROUPING'],\n  // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_10_window_function\n  window: ['RANK', 'DENSE_RANK', 'PERCENT_RANK', 'CUME_DIST', 'ROW_NUMBER'],\n  // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_27_numeric_value_function\n  numeric: [\n    'POSITION',\n    'OCCURRENCES_REGEX',\n    'POSITION_REGEX',\n    'EXTRACT',\n    'CHAR_LENGTH',\n    'CHARACTER_LENGTH',\n    'OCTET_LENGTH',\n    'CARDINALITY',\n    'ABS',\n    'MOD',\n    'LN',\n    'EXP',\n    'POWER',\n    'SQRT',\n    'FLOOR',\n    'CEIL',\n    'CEILING',\n    'WIDTH_BUCKET',\n  ],\n  // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_29_string_value_function\n  string: [\n    'SUBSTRING',\n    'SUBSTRING_REGEX',\n    'UPPER',\n    'LOWER',\n    'CONVERT',\n    'TRANSLATE',\n    'TRANSLATE_REGEX',\n    'TRIM',\n    'OVERLAY',\n    'NORMALIZE',\n    'SPECIFICTYPE',\n  ],\n  // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_31_datetime_value_function\n  datetime: ['CURRENT_DATE', 'CURRENT_TIME', 'LOCALTIME', 'CURRENT_TIMESTAMP', 'LOCALTIMESTAMP'],\n  // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_38_multiset_value_function\n  // SET serves multiple roles: a SET() function and a SET keyword e.g. in UPDATE table SET ...\n  // multiset: ['SET'], (disabled for now)\n  // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_10_9_aggregate_function\n  aggregate: [\n    'COUNT',\n    'AVG',\n    'MAX',\n    'MIN',\n    'SUM',\n    // 'EVERY',\n    // 'ANY',\n    // 'SOME',\n    'STDDEV_POP',\n    'STDDEV_SAMP',\n    'VAR_SAMP',\n    'VAR_POP',\n    'COLLECT',\n    'FUSION',\n    'INTERSECTION',\n    'COVAR_POP',\n    'COVAR_SAMP',\n    'CORR',\n    'REGR_SLOPE',\n    'REGR_INTERCEPT',\n    'REGR_COUNT',\n    'REGR_R2',\n    'REGR_AVGX',\n    'REGR_AVGY',\n    'REGR_SXX',\n    'REGR_SYY',\n    'REGR_SXY',\n    'PERCENTILE_CONT',\n    'PERCENTILE_DISC',\n  ],\n  // CAST is a pretty complex case, involving multiple forms:\n  // - CAST(col AS int)\n  // - CAST(...) WITH ...\n  // - CAST FROM int\n  // - CREATE CAST(mycol AS int) WITH ...\n  cast: ['CAST'],\n  // Shorthand functions to use in place of CASE expression\n  caseAbbrev: ['COALESCE', 'NULLIF'],\n  // Non-standard functions that have widespread support\n  nonStandard: ['ROUND', 'SIN', 'COS', 'TAN', 'ASIN', 'ACOS', 'ATAN'],\n  // Data types with parameters like VARCHAR(100)\n  // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#predefined-type\n  dataTypes: [\n    'CHARACTER',\n    'CHAR',\n    'CHARACTER VARYING',\n    'CHAR VARYING',\n    'VARCHAR',\n    'CHARACTER LARGE OBJECT',\n    'CHAR LARGE OBJECT',\n    'CLOB',\n    'NATIONAL CHARACTER',\n    'NATIONAL CHAR',\n    'NCHAR',\n    'NATIONAL CHARACTER VARYING',\n    'NATIONAL CHAR VARYING',\n    'NCHAR VARYING',\n    'NATIONAL CHARACTER LARGE OBJECT',\n    'NCHAR LARGE OBJECT',\n    'NCLOB',\n    'BINARY',\n    'BINARY VARYING',\n    'VARBINARY',\n    'BINARY LARGE OBJECT',\n    'BLOB',\n    'NUMERIC',\n    'DECIMAL',\n    'DEC',\n    'TIME',\n    'TIMESTAMP',\n  ],\n});\n","import { flatKeywordList } from '../../utils';\n\nexport const keywords = flatKeywordList({\n  // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#reserved-word\n  all: [\n    'ALL',\n    'ALLOCATE',\n    'ALTER',\n    'ANY', // <- moved over from functions\n    'ARE',\n    'ARRAY',\n    'AS',\n    'ASENSITIVE',\n    'ASYMMETRIC',\n    'AT',\n    'ATOMIC',\n    'AUTHORIZATION',\n    'BEGIN',\n    'BETWEEN',\n    'BIGINT',\n    'BINARY',\n    'BLOB',\n    'BOOLEAN',\n    'BOTH',\n    'BY',\n    'CALL',\n    'CALLED',\n    'CASCADED',\n    'CAST',\n    'CHAR',\n    'CHARACTER',\n    'CHECK',\n    'CLOB',\n    'CLOSE',\n    'COALESCE',\n    'COLLATE',\n    'COLUMN',\n    'COMMIT',\n    'CONDITION',\n    'CONNECT',\n    'CONSTRAINT',\n    'CORRESPONDING',\n    'CREATE',\n    'CROSS',\n    'CUBE',\n    'CURRENT',\n    'CURRENT_CATALOG',\n    'CURRENT_DEFAULT_TRANSFORM_GROUP',\n    'CURRENT_PATH',\n    'CURRENT_ROLE',\n    'CURRENT_SCHEMA',\n    'CURRENT_TRANSFORM_GROUP_FOR_TYPE',\n    'CURRENT_USER',\n    'CURSOR',\n    'CYCLE',\n    'DATE',\n    'DAY',\n    'DEALLOCATE',\n    'DEC',\n    'DECIMAL',\n    'DECLARE',\n    'DEFAULT',\n    'DELETE',\n    'DEREF',\n    'DESCRIBE',\n    'DETERMINISTIC',\n    'DISCONNECT',\n    'DISTINCT',\n    'DOUBLE',\n    'DROP',\n    'DYNAMIC',\n    'EACH',\n    'ELEMENT',\n    'END-EXEC',\n    'ESCAPE',\n    'EVERY', // <- moved over from functions\n    'EXCEPT',\n    'EXEC',\n    'EXECUTE',\n    'EXISTS',\n    'EXTERNAL',\n    'FALSE',\n    'FETCH',\n    'FILTER',\n    'FLOAT',\n    'FOR',\n    'FOREIGN',\n    'FREE',\n    'FROM',\n    'FULL',\n    'FUNCTION',\n    'GET',\n    'GLOBAL',\n    'GRANT',\n    'GROUP',\n    'HAVING',\n    'HOLD',\n    'HOUR',\n    'IDENTITY',\n    'IN',\n    'INDICATOR',\n    'INNER',\n    'INOUT',\n    'INSENSITIVE',\n    'INSERT',\n    'INT',\n    'INTEGER',\n    'INTERSECT',\n    'INTERVAL',\n    'INTO',\n    'IS',\n    'LANGUAGE',\n    'LARGE',\n    'LATERAL',\n    'LEADING',\n    'LEFT',\n    'LIKE',\n    'LIKE_REGEX',\n    'LOCAL',\n    'MATCH',\n    'MEMBER',\n    'MERGE',\n    'METHOD',\n    'MINUTE',\n    'MODIFIES',\n    'MODULE',\n    'MONTH',\n    'MULTISET',\n    'NATIONAL',\n    'NATURAL',\n    'NCHAR',\n    'NCLOB',\n    'NEW',\n    'NO',\n    'NONE',\n    'NOT',\n    'NULL',\n    'NULLIF',\n    'NUMERIC',\n    'OF',\n    'OLD',\n    'ON',\n    'ONLY',\n    'OPEN',\n    'ORDER',\n    'OUT',\n    'OUTER',\n    'OVER',\n    'OVERLAPS',\n    'PARAMETER',\n    'PARTITION',\n    'PRECISION',\n    'PREPARE',\n    'PRIMARY',\n    'PROCEDURE',\n    'RANGE',\n    'READS',\n    'REAL',\n    'RECURSIVE',\n    'REF',\n    'REFERENCES',\n    'REFERENCING',\n    'RELEASE',\n    'RESULT',\n    'RETURN',\n    'RETURNS',\n    'REVOKE',\n    'RIGHT',\n    'ROLLBACK',\n    'ROLLUP',\n    'ROW',\n    'ROWS',\n    'SAVEPOINT',\n    'SCOPE',\n    'SCROLL',\n    'SEARCH',\n    'SECOND',\n    'SELECT',\n    'SENSITIVE',\n    'SESSION_USER',\n    'SET',\n    'SIMILAR',\n    'SMALLINT',\n    'SOME', // <- moved over from functions\n    'SPECIFIC',\n    'SQL',\n    'SQLEXCEPTION',\n    'SQLSTATE',\n    'SQLWARNING',\n    'START',\n    'STATIC',\n    'SUBMULTISET',\n    'SYMMETRIC',\n    'SYSTEM',\n    'SYSTEM_USER',\n    'TABLE',\n    'TABLESAMPLE',\n    'THEN',\n    'TIME',\n    'TIMESTAMP',\n    'TIMEZONE_HOUR',\n    'TIMEZONE_MINUTE',\n    'TO',\n    'TRAILING',\n    'TRANSLATION',\n    'TREAT',\n    'TRIGGER',\n    'TRUE',\n    'UESCAPE',\n    'UNION',\n    'UNIQUE',\n    'UNKNOWN',\n    'UNNEST',\n    'UPDATE',\n    'USER',\n    'USING',\n    'VALUE',\n    'VALUES',\n    'VARBINARY',\n    'VARCHAR',\n    'VARYING',\n    'WHENEVER',\n    'WINDOW',\n    'WITHIN',\n    'WITHOUT',\n    'YEAR',\n  ],\n});\n","import { expandPhrases } from 'src/expandPhrases';\nimport Formatter from 'src/formatter/Formatter';\nimport Tokenizer from 'src/lexer/Tokenizer';\nimport { functions } from './sql.functions';\nimport { keywords } from './sql.keywords';\n\nconst reservedCommands = expandPhrases([\n  // queries\n  'WITH [RECURSIVE]',\n  'SELECT [ALL | DISTINCT]',\n  'FROM',\n  'WHERE',\n  'GROUP BY [ALL | DISTINCT]',\n  'HAVING',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  'FETCH {FIRST | NEXT}',\n  // Data manipulation\n  // - insert:\n  'INSERT INTO',\n  'VALUES',\n  // - update:\n  'UPDATE',\n  'SET',\n  'WHERE CURRENT OF',\n  // - delete:\n  'DELETE FROM',\n  // - truncate:\n  'TRUNCATE TABLE',\n  // Data definition\n  'CREATE [RECURSIVE] VIEW',\n  'CREATE [GLOBAL TEMPORARY | LOCAL TEMPORARY] TABLE',\n  'DROP TABLE',\n  // - alter table:\n  'ALTER TABLE',\n  'ADD COLUMN',\n  'DROP [COLUMN]',\n  'RENAME COLUMN',\n  'RENAME TO',\n  'ALTER [COLUMN]',\n  '{SET | DROP} DEFAULT', // for alter column\n  'ADD SCOPE', // for alter column\n  'DROP SCOPE {CASCADE | RESTRICT}', // for alter column\n  'RESTART WITH', // for alter column\n\n  // other\n  'SET SCHEMA',\n]);\n\nconst reservedSetOperations = expandPhrases([\n  'UNION [ALL | DISTINCT]',\n  'EXCEPT [ALL | DISTINCT]',\n  'INTERSECT [ALL | DISTINCT]',\n]);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN',\n]);\n\nconst reservedPhrases = ['ON DELETE', 'ON UPDATE'];\n\nexport default class SqlFormatter extends Formatter {\n  static operators = [];\n\n  tokenizer() {\n    return new Tokenizer({\n      reservedCommands,\n      reservedSetOperations,\n      reservedJoins,\n      reservedDependentClauses: ['WHEN', 'ELSE'],\n      reservedPhrases,\n      reservedKeywords: keywords,\n      reservedFunctionNames: functions,\n      stringTypes: [{ quote: \"''\", prefixes: ['N', 'X', 'U&'] }],\n      identTypes: [`\"\"`, '``'],\n      paramTypes: { positional: true },\n    });\n  }\n}\n","import { flatKeywordList } from '../../utils';\n\nexport const functions = flatKeywordList({\n  // https://github.com/trinodb/trino/tree/432d2897bdef99388c1a47188743a061c4ac1f34/docs/src/main/sphinx/functions\n  // rg '^\\.\\. function::' ./docs/src/main/sphinx/functions | cut -d' ' -f 3 | cut -d '(' -f 1 | sort | uniq\n  // rg '\\* ' ./docs/src/main/sphinx/functions/list-by-topic.rst | grep    '\\* :func:' | cut -d'`' -f 2\n  // rg '\\* ' ./docs/src/main/sphinx/functions/list-by-topic.rst | grep -v '\\* :func:'\n  // grep -e '^- ' ./docs/src/main/sphinx/functions/list.rst | grep  -e '^- :func:' | cut -d'`' -f2\n  // grep -e '^- ' ./docs/src/main/sphinx/functions/list.rst | grep -ve '^- :func:'\n  all: [\n    'ABS',\n    'ACOS',\n    'ALL_MATCH',\n    'ANY_MATCH',\n    'APPROX_DISTINCT',\n    'APPROX_MOST_FREQUENT',\n    'APPROX_PERCENTILE',\n    'APPROX_SET',\n    'ARBITRARY',\n    'ARRAYS_OVERLAP',\n    'ARRAY_AGG',\n    'ARRAY_DISTINCT',\n    'ARRAY_EXCEPT',\n    'ARRAY_INTERSECT',\n    'ARRAY_JOIN',\n    'ARRAY_MAX',\n    'ARRAY_MIN',\n    'ARRAY_POSITION',\n    'ARRAY_REMOVE',\n    'ARRAY_SORT',\n    'ARRAY_UNION',\n    'ASIN',\n    'ATAN',\n    'ATAN2',\n    'AT_TIMEZONE',\n    'AVG',\n    'BAR',\n    'BETA_CDF',\n    'BING_TILE',\n    'BING_TILES_AROUND',\n    'BING_TILE_AT',\n    'BING_TILE_COORDINATES',\n    'BING_TILE_POLYGON',\n    'BING_TILE_QUADKEY',\n    'BING_TILE_ZOOM_LEVEL',\n    'BITWISE_AND',\n    'BITWISE_AND_AGG',\n    'BITWISE_LEFT_SHIFT',\n    'BITWISE_NOT',\n    'BITWISE_OR',\n    'BITWISE_OR_AGG',\n    'BITWISE_RIGHT_SHIFT',\n    'BITWISE_RIGHT_SHIFT_ARITHMETIC',\n    'BITWISE_XOR',\n    'BIT_COUNT',\n    'BOOL_AND',\n    'BOOL_OR',\n    'CARDINALITY',\n    'CAST',\n    'CBRT',\n    'CEIL',\n    'CEILING',\n    'CHAR2HEXINT',\n    'CHECKSUM',\n    'CHR',\n    'CLASSIFY',\n    'COALESCE',\n    'CODEPOINT',\n    'COLOR',\n    'COMBINATIONS',\n    'CONCAT',\n    'CONCAT_WS',\n    'CONTAINS',\n    'CONTAINS_SEQUENCE',\n    'CONVEX_HULL_AGG',\n    'CORR',\n    'COS',\n    'COSH',\n    'COSINE_SIMILARITY',\n    'COUNT',\n    'COUNT_IF',\n    'COVAR_POP',\n    'COVAR_SAMP',\n    'CRC32',\n    'CUME_DIST',\n    'CURRENT_CATALOG',\n    'CURRENT_DATE',\n    'CURRENT_GROUPS',\n    'CURRENT_SCHEMA',\n    'CURRENT_TIME',\n    'CURRENT_TIMESTAMP',\n    'CURRENT_TIMEZONE',\n    'CURRENT_USER',\n    'DATE',\n    'DATE_ADD',\n    'DATE_DIFF',\n    'DATE_FORMAT',\n    'DATE_PARSE',\n    'DATE_TRUNC',\n    'DAY',\n    'DAY_OF_MONTH',\n    'DAY_OF_WEEK',\n    'DAY_OF_YEAR',\n    'DEGREES',\n    'DENSE_RANK',\n    'DOW',\n    'DOY',\n    'E',\n    'ELEMENT_AT',\n    'EMPTY_APPROX_SET',\n    'EVALUATE_CLASSIFIER_PREDICTIONS',\n    'EVERY',\n    'EXP',\n    'EXTRACT',\n    'FEATURES',\n    'FILTER',\n    'FIRST_VALUE',\n    'FLATTEN',\n    'FLOOR',\n    'FORMAT',\n    'FORMAT_DATETIME',\n    'FORMAT_NUMBER',\n    'FROM_BASE',\n    'FROM_BASE32',\n    'FROM_BASE64',\n    'FROM_BASE64URL',\n    'FROM_BIG_ENDIAN_32',\n    'FROM_BIG_ENDIAN_64',\n    'FROM_ENCODED_POLYLINE',\n    'FROM_GEOJSON_GEOMETRY',\n    'FROM_HEX',\n    'FROM_IEEE754_32',\n    'FROM_IEEE754_64',\n    'FROM_ISO8601_DATE',\n    'FROM_ISO8601_TIMESTAMP',\n    'FROM_ISO8601_TIMESTAMP_NANOS',\n    'FROM_UNIXTIME',\n    'FROM_UNIXTIME_NANOS',\n    'FROM_UTF8',\n    'GEOMETRIC_MEAN',\n    'GEOMETRY_FROM_HADOOP_SHAPE',\n    'GEOMETRY_INVALID_REASON',\n    'GEOMETRY_NEAREST_POINTS',\n    'GEOMETRY_TO_BING_TILES',\n    'GEOMETRY_UNION',\n    'GEOMETRY_UNION_AGG',\n    'GREATEST',\n    'GREAT_CIRCLE_DISTANCE',\n    'HAMMING_DISTANCE',\n    'HASH_COUNTS',\n    'HISTOGRAM',\n    'HMAC_MD5',\n    'HMAC_SHA1',\n    'HMAC_SHA256',\n    'HMAC_SHA512',\n    'HOUR',\n    'HUMAN_READABLE_SECONDS',\n    'IF',\n    'INDEX',\n    'INFINITY',\n    'INTERSECTION_CARDINALITY',\n    'INVERSE_BETA_CDF',\n    'INVERSE_NORMAL_CDF',\n    'IS_FINITE',\n    'IS_INFINITE',\n    'IS_JSON_SCALAR',\n    'IS_NAN',\n    'JACCARD_INDEX',\n    'JSON_ARRAY_CONTAINS',\n    'JSON_ARRAY_GET',\n    'JSON_ARRAY_LENGTH',\n    'JSON_EXISTS',\n    'JSON_EXTRACT',\n    'JSON_EXTRACT_SCALAR',\n    'JSON_FORMAT',\n    'JSON_PARSE',\n    'JSON_QUERY',\n    'JSON_SIZE',\n    'JSON_VALUE',\n    'KURTOSIS',\n    'LAG',\n    'LAST_DAY_OF_MONTH',\n    'LAST_VALUE',\n    'LEAD',\n    'LEARN_CLASSIFIER',\n    'LEARN_LIBSVM_CLASSIFIER',\n    'LEARN_LIBSVM_REGRESSOR',\n    'LEARN_REGRESSOR',\n    'LEAST',\n    'LENGTH',\n    'LEVENSHTEIN_DISTANCE',\n    'LINE_INTERPOLATE_POINT',\n    'LINE_INTERPOLATE_POINTS',\n    'LINE_LOCATE_POINT',\n    'LISTAGG',\n    'LN',\n    'LOCALTIME',\n    'LOCALTIMESTAMP',\n    'LOG',\n    'LOG10',\n    'LOG2',\n    'LOWER',\n    'LPAD',\n    'LTRIM',\n    'LUHN_CHECK',\n    'MAKE_SET_DIGEST',\n    'MAP',\n    'MAP_AGG',\n    'MAP_CONCAT',\n    'MAP_ENTRIES',\n    'MAP_FILTER',\n    'MAP_FROM_ENTRIES',\n    'MAP_KEYS',\n    'MAP_UNION',\n    'MAP_VALUES',\n    'MAP_ZIP_WITH',\n    'MAX',\n    'MAX_BY',\n    'MD5',\n    'MERGE',\n    'MERGE_SET_DIGEST',\n    'MILLISECOND',\n    'MIN',\n    'MINUTE',\n    'MIN_BY',\n    'MOD',\n    'MONTH',\n    'MULTIMAP_AGG',\n    'MULTIMAP_FROM_ENTRIES',\n    'MURMUR3',\n    'NAN',\n    'NGRAMS',\n    'NONE_MATCH',\n    'NORMALIZE',\n    'NORMAL_CDF',\n    'NOW',\n    'NTH_VALUE',\n    'NTILE',\n    'NULLIF',\n    'NUMERIC_HISTOGRAM',\n    'OBJECTID',\n    'OBJECTID_TIMESTAMP',\n    'PARSE_DATA_SIZE',\n    'PARSE_DATETIME',\n    'PARSE_DURATION',\n    'PERCENT_RANK',\n    'PI',\n    'POSITION',\n    'POW',\n    'POWER',\n    'QDIGEST_AGG',\n    'QUARTER',\n    'RADIANS',\n    'RAND',\n    'RANDOM',\n    'RANK',\n    'REDUCE',\n    'REDUCE_AGG',\n    'REGEXP_COUNT',\n    'REGEXP_EXTRACT',\n    'REGEXP_EXTRACT_ALL',\n    'REGEXP_LIKE',\n    'REGEXP_POSITION',\n    'REGEXP_REPLACE',\n    'REGEXP_SPLIT',\n    'REGRESS',\n    'REGR_INTERCEPT',\n    'REGR_SLOPE',\n    'RENDER',\n    'REPEAT',\n    'REPLACE',\n    'REVERSE',\n    'RGB',\n    'ROUND',\n    'ROW_NUMBER',\n    'RPAD',\n    'RTRIM',\n    'SECOND',\n    'SEQUENCE',\n    'SHA1',\n    'SHA256',\n    'SHA512',\n    'SHUFFLE',\n    'SIGN',\n    'SIMPLIFY_GEOMETRY',\n    'SIN',\n    'SKEWNESS',\n    'SLICE',\n    'SOUNDEX',\n    'SPATIAL_PARTITIONING',\n    'SPATIAL_PARTITIONS',\n    'SPLIT',\n    'SPLIT_PART',\n    'SPLIT_TO_MAP',\n    'SPLIT_TO_MULTIMAP',\n    'SPOOKY_HASH_V2_32',\n    'SPOOKY_HASH_V2_64',\n    'SQRT',\n    'STARTS_WITH',\n    'STDDEV',\n    'STDDEV_POP',\n    'STDDEV_SAMP',\n    'STRPOS',\n    'ST_AREA',\n    'ST_ASBINARY',\n    'ST_ASTEXT',\n    'ST_BOUNDARY',\n    'ST_BUFFER',\n    'ST_CENTROID',\n    'ST_CONTAINS',\n    'ST_CONVEXHULL',\n    'ST_COORDDIM',\n    'ST_CROSSES',\n    'ST_DIFFERENCE',\n    'ST_DIMENSION',\n    'ST_DISJOINT',\n    'ST_DISTANCE',\n    'ST_ENDPOINT',\n    'ST_ENVELOPE',\n    'ST_ENVELOPEASPTS',\n    'ST_EQUALS',\n    'ST_EXTERIORRING',\n    'ST_GEOMETRIES',\n    'ST_GEOMETRYFROMTEXT',\n    'ST_GEOMETRYN',\n    'ST_GEOMETRYTYPE',\n    'ST_GEOMFROMBINARY',\n    'ST_INTERIORRINGN',\n    'ST_INTERIORRINGS',\n    'ST_INTERSECTION',\n    'ST_INTERSECTS',\n    'ST_ISCLOSED',\n    'ST_ISEMPTY',\n    'ST_ISRING',\n    'ST_ISSIMPLE',\n    'ST_ISVALID',\n    'ST_LENGTH',\n    'ST_LINEFROMTEXT',\n    'ST_LINESTRING',\n    'ST_MULTIPOINT',\n    'ST_NUMGEOMETRIES',\n    'ST_NUMINTERIORRING',\n    'ST_NUMPOINTS',\n    'ST_OVERLAPS',\n    'ST_POINT',\n    'ST_POINTN',\n    'ST_POINTS',\n    'ST_POLYGON',\n    'ST_RELATE',\n    'ST_STARTPOINT',\n    'ST_SYMDIFFERENCE',\n    'ST_TOUCHES',\n    'ST_UNION',\n    'ST_WITHIN',\n    'ST_X',\n    'ST_XMAX',\n    'ST_XMIN',\n    'ST_Y',\n    'ST_YMAX',\n    'ST_YMIN',\n    'SUBSTR',\n    'SUBSTRING',\n    'SUM',\n    'TAN',\n    'TANH',\n    'TDIGEST_AGG',\n    'TIMESTAMP_OBJECTID',\n    'TIMEZONE_HOUR',\n    'TIMEZONE_MINUTE',\n    'TO_BASE',\n    'TO_BASE32',\n    'TO_BASE64',\n    'TO_BASE64URL',\n    'TO_BIG_ENDIAN_32',\n    'TO_BIG_ENDIAN_64',\n    'TO_CHAR',\n    'TO_DATE',\n    'TO_ENCODED_POLYLINE',\n    'TO_GEOJSON_GEOMETRY',\n    'TO_GEOMETRY',\n    'TO_HEX',\n    'TO_IEEE754_32',\n    'TO_IEEE754_64',\n    'TO_ISO8601',\n    'TO_MILLISECONDS',\n    'TO_SPHERICAL_GEOGRAPHY',\n    'TO_TIMESTAMP',\n    'TO_UNIXTIME',\n    'TO_UTF8',\n    'TRANSFORM',\n    'TRANSFORM_KEYS',\n    'TRANSFORM_VALUES',\n    'TRANSLATE',\n    'TRIM',\n    'TRIM_ARRAY',\n    'TRUNCATE',\n    'TRY',\n    'TRY_CAST',\n    'TYPEOF',\n    'UPPER',\n    'URL_DECODE',\n    'URL_ENCODE',\n    'URL_EXTRACT_FRAGMENT',\n    'URL_EXTRACT_HOST',\n    'URL_EXTRACT_PARAMETER',\n    'URL_EXTRACT_PATH',\n    'URL_EXTRACT_PORT',\n    'URL_EXTRACT_PROTOCOL',\n    'URL_EXTRACT_QUERY',\n    'UUID',\n    'VALUES_AT_QUANTILES',\n    'VALUE_AT_QUANTILE',\n    'VARIANCE',\n    'VAR_POP',\n    'VAR_SAMP',\n    'VERSION',\n    'WEEK',\n    'WEEK_OF_YEAR',\n    'WIDTH_BUCKET',\n    'WILSON_INTERVAL_LOWER',\n    'WILSON_INTERVAL_UPPER',\n    'WITH_TIMEZONE',\n    'WORD_STEM',\n    'XXHASH64',\n    'YEAR',\n    'YEAR_OF_WEEK',\n    'YOW',\n    'ZIP',\n    'ZIP_WITH',\n  ],\n  // https://trino.io/docs/current/sql/match-recognize.html#row-pattern-recognition-expressions\n  rowPattern: ['CLASSIFIER', 'FIRST', 'LAST', 'MATCH_NUMBER', 'NEXT', 'PERMUTE', 'PREV'],\n});\n","import { flatKeywordList } from '../../utils';\n\nexport const keywords = flatKeywordList({\n  // https://github.com/trinodb/trino/blob/432d2897bdef99388c1a47188743a061c4ac1f34/core/trino-parser/src/main/antlr4/io/trino/sql/parser/SqlBase.g4#L858-L1128\n  all: [\n    'ABSENT',\n    'ADD',\n    'ADMIN',\n    'AFTER',\n    'ALL',\n    'ALTER',\n    'ANALYZE',\n    'AND',\n    'ANY',\n    'ARRAY',\n    'AS',\n    'ASC',\n    'AT',\n    'AUTHORIZATION',\n    'BERNOULLI',\n    'BETWEEN',\n    'BOTH',\n    'BY',\n    'CALL',\n    'CASCADE',\n    'CASE',\n    'CATALOGS',\n    'COLUMN',\n    'COLUMNS',\n    'COMMENT',\n    'COMMIT',\n    'COMMITTED',\n    'CONDITIONAL',\n    'CONSTRAINT',\n    'COPARTITION',\n    'CREATE',\n    'CROSS',\n    'CUBE',\n    'CURRENT',\n    'CURRENT_PATH',\n    'CURRENT_ROLE',\n    'DATA',\n    'DEALLOCATE',\n    'DEFAULT',\n    'DEFINE',\n    'DEFINER',\n    'DELETE',\n    'DENY',\n    'DESC',\n    'DESCRIBE',\n    'DESCRIPTOR',\n    'DISTINCT',\n    'DISTRIBUTED',\n    'DOUBLE',\n    'DROP',\n    'ELSE',\n    'EMPTY',\n    'ENCODING',\n    'END',\n    'ERROR',\n    'ESCAPE',\n    'EXCEPT',\n    'EXCLUDING',\n    'EXECUTE',\n    'EXISTS',\n    'EXPLAIN',\n    'FALSE',\n    'FETCH',\n    'FINAL',\n    'FIRST',\n    'FOLLOWING',\n    'FOR',\n    'FROM',\n    'FULL',\n    'FUNCTIONS',\n    'GRANT',\n    'GRANTED',\n    'GRANTS',\n    'GRAPHVIZ',\n    'GROUP',\n    'GROUPING',\n    'GROUPS',\n    'HAVING',\n    'IGNORE',\n    'IN',\n    'INCLUDING',\n    'INITIAL',\n    'INNER',\n    'INPUT',\n    'INSERT',\n    'INTERSECT',\n    'INTERVAL',\n    'INTO',\n    'INVOKER',\n    'IO',\n    'IS',\n    'ISOLATION',\n    'JOIN',\n    'JSON',\n    'JSON_ARRAY',\n    'JSON_OBJECT',\n    'KEEP',\n    'KEY',\n    'KEYS',\n    'LAST',\n    'LATERAL',\n    'LEADING',\n    'LEFT',\n    'LEVEL',\n    'LIKE',\n    'LIMIT',\n    'LOCAL',\n    'LOGICAL',\n    'MATCH',\n    'MATCHED',\n    'MATCHES',\n    'MATCH_RECOGNIZE',\n    'MATERIALIZED',\n    'MEASURES',\n    'NATURAL',\n    'NEXT',\n    'NFC',\n    'NFD',\n    'NFKC',\n    'NFKD',\n    'NO',\n    'NONE',\n    'NOT',\n    'NULL',\n    'NULLS',\n    'OBJECT',\n    'OF',\n    'OFFSET',\n    'OMIT',\n    'ON',\n    'ONE',\n    'ONLY',\n    'OPTION',\n    'OR',\n    'ORDER',\n    'ORDINALITY',\n    'OUTER',\n    'OUTPUT',\n    'OVER',\n    'OVERFLOW',\n    'PARTITION',\n    'PARTITIONS',\n    'PASSING',\n    'PAST',\n    'PATH',\n    'PATTERN',\n    'PER',\n    'PERMUTE',\n    'PRECEDING',\n    'PRECISION',\n    'PREPARE',\n    'PRIVILEGES',\n    'PROPERTIES',\n    'PRUNE',\n    'QUOTES',\n    'RANGE',\n    'READ',\n    'RECURSIVE',\n    'REFRESH',\n    'RENAME',\n    'REPEATABLE',\n    'RESET',\n    'RESPECT',\n    'RESTRICT',\n    'RETURNING',\n    'REVOKE',\n    'RIGHT',\n    'ROLE',\n    'ROLES',\n    'ROLLBACK',\n    'ROLLUP',\n    'ROW',\n    'ROWS',\n    'RUNNING',\n    'SCALAR',\n    'SCHEMA',\n    'SCHEMAS',\n    'SECURITY',\n    'SEEK',\n    'SELECT',\n    'SERIALIZABLE',\n    'SESSION',\n    'SET',\n    'SETS',\n    'SHOW',\n    'SKIP',\n    'SOME',\n    'START',\n    'STATS',\n    'STRING',\n    'SUBSET',\n    'SYSTEM',\n    'TABLE',\n    'TABLES',\n    'TABLESAMPLE',\n    'TEXT',\n    'THEN',\n    'TIES',\n    'TIME',\n    'TIMESTAMP',\n    'TO',\n    'TRAILING',\n    'TRANSACTION',\n    'TRUE',\n    'TYPE',\n    'UESCAPE',\n    'UNBOUNDED',\n    'UNCOMMITTED',\n    'UNCONDITIONAL',\n    'UNION',\n    'UNIQUE',\n    'UNKNOWN',\n    'UNMATCHED',\n    'UNNEST',\n    'UPDATE',\n    'USE',\n    'USER',\n    'USING',\n    'UTF16',\n    'UTF32',\n    'UTF8',\n    'VALIDATE',\n    'VALUE',\n    'VALUES',\n    'VERBOSE',\n    'VIEW',\n    'WHEN',\n    'WHERE',\n    'WINDOW',\n    'WITH',\n    'WITHIN',\n    'WITHOUT',\n    'WORK',\n    'WRAPPER',\n    'WRITE',\n    'ZONE',\n  ],\n  // https://github.com/trinodb/trino/blob/432d2897bdef99388c1a47188743a061c4ac1f34/core/trino-main/src/main/java/io/trino/metadata/TypeRegistry.java#L131-L168\n  // or https://trino.io/docs/current/language/types.html\n  types: [\n    'BIGINT',\n    'INT',\n    'INTEGER',\n    'SMALLINT',\n    'TINYINT',\n    'BOOLEAN',\n    'DATE',\n    'DECIMAL',\n    'REAL',\n    'DOUBLE',\n    'HYPERLOGLOG',\n    'QDIGEST',\n    'TDIGEST',\n    'P4HYPERLOGLOG',\n    'INTERVAL',\n    'TIMESTAMP',\n    'TIME',\n    'VARBINARY',\n    'VARCHAR',\n    'CHAR',\n    'ROW',\n    'ARRAY',\n    'MAP',\n    'JSON',\n    'JSON2016',\n    'IPADDRESS',\n    'GEOMETRY',\n    'UUID',\n    'SETDIGEST',\n    'JONIREGEXP',\n    'RE2JREGEXP',\n    'LIKEPATTERN',\n    'COLOR',\n    'CODEPOINTS',\n    'FUNCTION',\n    'JSONPATH',\n  ],\n});\n","import { expandPhrases } from 'src/expandPhrases';\nimport Formatter from 'src/formatter/Formatter';\nimport Tokenizer from 'src/lexer/Tokenizer';\nimport { functions } from './trino.functions';\nimport { keywords } from './trino.keywords';\n\n// https://github.com/trinodb/trino/blob/432d2897bdef99388c1a47188743a061c4ac1f34/core/trino-parser/src/main/antlr4/io/trino/sql/parser/SqlBase.g4#L41\nconst reservedCommands = expandPhrases([\n  // queries\n  'WITH [RECURSIVE]',\n  'SELECT [ALL | DISTINCT]',\n  'FROM',\n  'WHERE',\n  'GROUP BY [ALL | DISTINCT]',\n  'HAVING',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  'FETCH {FIRST | NEXT}',\n  // Data manipulation\n  // - insert:\n  'INSERT INTO',\n  'VALUES',\n  // - update:\n  'UPDATE',\n  'SET',\n  // - delete:\n  'DELETE FROM',\n  // - truncate:\n  'TRUNCATE TABLE',\n  // Data definition\n  'CREATE [OR REPLACE] [MATERIALIZED] VIEW',\n  'CREATE TABLE [IF NOT EXISTS]',\n  'DROP TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER TABLE [IF EXISTS]',\n  'ADD COLUMN [IF NOT EXISTS]',\n  'DROP COLUMN [IF EXISTS]',\n  'RENAME COLUMN [IF EXISTS]',\n  'RENAME TO',\n  'SET AUTHORIZATION [USER | ROLE]',\n  'SET PROPERTIES',\n  'EXECUTE',\n\n  'ALTER SCHEMA',\n  'ALTER MATERIALIZED VIEW',\n  'ALTER VIEW',\n  'CREATE SCHEMA',\n  'CREATE ROLE',\n  'DROP SCHEMA',\n  'DROP COLUMN',\n  'DROP MATERIALIZED VIEW',\n  'DROP VIEW',\n  'DROP ROLE',\n  // Auxiliary\n  'EXPLAIN',\n  'ANALYZE',\n  'EXPLAIN ANALYZE',\n  'EXPLAIN ANALYZE VERBOSE',\n  'USE',\n\n  'COMMENT ON TABLE',\n  'COMMENT ON COLUMN',\n  'DESCRIBE INPUT',\n  'DESCRIBE OUTPUT',\n\n  'REFRESH MATERIALIZED VIEW',\n  'RESET SESSION',\n  'SET SESSION',\n  'SET PATH',\n  'SET TIME ZONE',\n\n  'SHOW GRANTS',\n  'SHOW CREATE TABLE',\n  'SHOW CREATE SCHEMA',\n  'SHOW CREATE VIEW',\n  'SHOW CREATE MATERIALIZED VIEW',\n  'SHOW TABLES',\n  'SHOW SCHEMAS',\n  'SHOW CATALOGS',\n  'SHOW COLUMNS',\n  'SHOW STATS FOR',\n  'SHOW ROLES',\n  'SHOW CURRENT ROLES',\n  'SHOW ROLE GRANTS',\n  'SHOW FUNCTIONS',\n  'SHOW SESSION',\n\n  // MATCH_RECOGNIZE\n  'MATCH_RECOGNIZE',\n  'MEASURES',\n  'ONE ROW PER MATCH',\n  'ALL ROWS PER MATCH',\n  'AFTER MATCH',\n  'PATTERN',\n  'SUBSET',\n  'DEFINE',\n]);\n\n// https://github.com/trinodb/trino/blob/432d2897bdef99388c1a47188743a061c4ac1f34/core/trino-parser/src/main/antlr4/io/trino/sql/parser/SqlBase.g4#L231-L235\n// https://github.com/trinodb/trino/blob/432d2897bdef99388c1a47188743a061c4ac1f34/core/trino-parser/src/main/antlr4/io/trino/sql/parser/SqlBase.g4#L288-L291\nconst reservedSetOperations = expandPhrases([\n  'UNION [ALL | DISTINCT]',\n  'EXCEPT [ALL | DISTINCT]',\n  'INTERSECT [ALL | DISTINCT]',\n]);\n\n// https://github.com/trinodb/trino/blob/432d2897bdef99388c1a47188743a061c4ac1f34/core/trino-parser/src/main/antlr4/io/trino/sql/parser/SqlBase.g4#L299-L313\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN',\n]);\n\nexport default class TrinoFormatter extends Formatter {\n  // https://trino.io/docs/current/functions/list.html#id1\n  // https://trino.io/docs/current/sql/match-recognize.html#row-pattern-syntax\n  static operators = ['||', '->'];\n\n  tokenizer() {\n    return new Tokenizer({\n      reservedCommands,\n      reservedSetOperations,\n      reservedJoins,\n      reservedDependentClauses: ['WHEN', 'ELSE'],\n      reservedKeywords: keywords,\n      reservedFunctionNames: functions,\n      // https://trino.io/docs/current/sql/match-recognize.html#row-pattern-syntax\n      openParens: ['(', '[', '{', '{-'],\n      closeParens: [')', ']', '}', '-}'],\n      // https://trino.io/docs/current/language/types.html#string\n      // https://trino.io/docs/current/language/types.html#varbinary\n      stringTypes: [{ quote: \"''\", prefixes: ['X', 'U&'] }],\n      // https://trino.io/docs/current/language/reserved.html\n      identTypes: ['\"\"'],\n      paramTypes: { positional: true },\n      operators: TrinoFormatter.operators,\n    });\n  }\n}\n","import { flatKeywordList } from '../../utils';\n\nexport const functions = flatKeywordList({\n  // https://docs.microsoft.com/en-us/sql/t-sql/functions/functions?view=sql-server-ver15\n  aggregate: [\n    'APPROX_COUNT_DISTINCT',\n    'AVG',\n    'CHECKSUM_AGG',\n    'COUNT',\n    'COUNT_BIG',\n    'GROUPING',\n    'GROUPING_ID',\n    'MAX',\n    'MIN',\n    'STDEV',\n    'STDEVP',\n    'SUM',\n    'VAR',\n    'VARP',\n  ],\n  analytic: [\n    'CUME_DIST',\n    'FIRST_VALUE',\n    'LAG',\n    'LAST_VALUE',\n    'LEAD',\n    'PERCENTILE_CONT',\n    'PERCENTILE_DISC',\n    'PERCENT_RANK',\n    'Collation - COLLATIONPROPERTY',\n    'Collation - TERTIARY_WEIGHTS',\n  ],\n  configuration: [\n    '@@DBTS',\n    '@@LANGID',\n    '@@LANGUAGE',\n    '@@LOCK_TIMEOUT',\n    '@@MAX_CONNECTIONS',\n    '@@MAX_PRECISION',\n    '@@NESTLEVEL',\n    '@@OPTIONS',\n    '@@REMSERVER',\n    '@@SERVERNAME',\n    '@@SERVICENAME',\n    '@@SPID',\n    '@@TEXTSIZE',\n    '@@VERSION',\n  ],\n  conversion: ['CAST', 'CONVERT', 'PARSE', 'TRY_CAST', 'TRY_CONVERT', 'TRY_PARSE'],\n  cryptographic: [\n    'ASYMKEY_ID',\n    'ASYMKEYPROPERTY',\n    'CERTPROPERTY',\n    'CERT_ID',\n    'CRYPT_GEN_RANDOM',\n    'DECRYPTBYASYMKEY',\n    'DECRYPTBYCERT',\n    'DECRYPTBYKEY',\n    'DECRYPTBYKEYAUTOASYMKEY',\n    'DECRYPTBYKEYAUTOCERT',\n    'DECRYPTBYPASSPHRASE',\n    'ENCRYPTBYASYMKEY',\n    'ENCRYPTBYCERT',\n    'ENCRYPTBYKEY',\n    'ENCRYPTBYPASSPHRASE',\n    'HASHBYTES',\n    'IS_OBJECTSIGNED',\n    'KEY_GUID',\n    'KEY_ID',\n    'KEY_NAME',\n    'SIGNBYASYMKEY',\n    'SIGNBYCERT',\n    'SYMKEYPROPERTY',\n    'VERIFYSIGNEDBYCERT',\n    'VERIFYSIGNEDBYASYMKEY',\n  ],\n  cursor: ['@@CURSOR_ROWS', '@@FETCH_STATUS', 'CURSOR_STATUS'],\n  dataType: [\n    'DATALENGTH',\n    'IDENT_CURRENT',\n    'IDENT_INCR',\n    'IDENT_SEED',\n    'IDENTITY',\n    'SQL_VARIANT_PROPERTY',\n  ],\n  datetime: [\n    '@@DATEFIRST',\n    'CURRENT_TIMESTAMP',\n    'CURRENT_TIMEZONE',\n    'CURRENT_TIMEZONE_ID',\n    'DATEADD',\n    'DATEDIFF',\n    'DATEDIFF_BIG',\n    'DATEFROMPARTS',\n    'DATENAME',\n    'DATEPART',\n    'DATETIME2FROMPARTS',\n    'DATETIMEFROMPARTS',\n    'DATETIMEOFFSETFROMPARTS',\n    'DAY',\n    'EOMONTH',\n    'GETDATE',\n    'GETUTCDATE',\n    'ISDATE',\n    'MONTH',\n    'SMALLDATETIMEFROMPARTS',\n    'SWITCHOFFSET',\n    'SYSDATETIME',\n    'SYSDATETIMEOFFSET',\n    'SYSUTCDATETIME',\n    'TIMEFROMPARTS',\n    'TODATETIMEOFFSET',\n    'YEAR',\n    'JSON',\n    'ISJSON',\n    'JSON_VALUE',\n    'JSON_QUERY',\n    'JSON_MODIFY',\n  ],\n  mathematical: [\n    'ABS',\n    'ACOS',\n    'ASIN',\n    'ATAN',\n    'ATN2',\n    'CEILING',\n    'COS',\n    'COT',\n    'DEGREES',\n    'EXP',\n    'FLOOR',\n    'LOG',\n    'LOG10',\n    'PI',\n    'POWER',\n    'RADIANS',\n    'RAND',\n    'ROUND',\n    'SIGN',\n    'SIN',\n    'SQRT',\n    'SQUARE',\n    'TAN',\n    'CHOOSE',\n    'GREATEST',\n    'IIF',\n    'LEAST',\n  ],\n  metadata: [\n    '@@PROCID',\n    'APP_NAME',\n    'APPLOCK_MODE',\n    'APPLOCK_TEST',\n    'ASSEMBLYPROPERTY',\n    'COL_LENGTH',\n    'COL_NAME',\n    'COLUMNPROPERTY',\n    'DATABASEPROPERTYEX',\n    'DB_ID',\n    'DB_NAME',\n    'FILE_ID',\n    'FILE_IDEX',\n    'FILE_NAME',\n    'FILEGROUP_ID',\n    'FILEGROUP_NAME',\n    'FILEGROUPPROPERTY',\n    'FILEPROPERTY',\n    'FILEPROPERTYEX',\n    'FULLTEXTCATALOGPROPERTY',\n    'FULLTEXTSERVICEPROPERTY',\n    'INDEX_COL',\n    'INDEXKEY_PROPERTY',\n    'INDEXPROPERTY',\n    'NEXT VALUE FOR',\n    'OBJECT_DEFINITION',\n    'OBJECT_ID',\n    'OBJECT_NAME',\n    'OBJECT_SCHEMA_NAME',\n    'OBJECTPROPERTY',\n    'OBJECTPROPERTYEX',\n    'ORIGINAL_DB_NAME',\n    'PARSENAME',\n    'SCHEMA_ID',\n    'SCHEMA_NAME',\n    'SCOPE_IDENTITY',\n    'SERVERPROPERTY',\n    'STATS_DATE',\n    'TYPE_ID',\n    'TYPE_NAME',\n    'TYPEPROPERTY',\n  ],\n  ranking: ['DENSE_RANK', 'NTILE', 'RANK', 'ROW_NUMBER', 'PUBLISHINGSERVERNAME'],\n  security: [\n    'CERTENCODED',\n    'CERTPRIVATEKEY',\n    'CURRENT_USER',\n    'DATABASE_PRINCIPAL_ID',\n    'HAS_DBACCESS',\n    'HAS_PERMS_BY_NAME',\n    'IS_MEMBER',\n    'IS_ROLEMEMBER',\n    'IS_SRVROLEMEMBER',\n    'LOGINPROPERTY',\n    'ORIGINAL_LOGIN',\n    'PERMISSIONS',\n    'PWDENCRYPT',\n    'PWDCOMPARE',\n    'SESSION_USER',\n    'SESSIONPROPERTY',\n    'SUSER_ID',\n    'SUSER_NAME',\n    'SUSER_SID',\n    'SUSER_SNAME',\n    'SYSTEM_USER',\n    'USER',\n    'USER_ID',\n    'USER_NAME',\n  ],\n  string: [\n    'ASCII',\n    'CHAR',\n    'CHARINDEX',\n    'CONCAT',\n    'CONCAT_WS',\n    'DIFFERENCE',\n    'FORMAT',\n    'LEFT',\n    'LEN',\n    'LOWER',\n    'LTRIM',\n    'NCHAR',\n    'PATINDEX',\n    'QUOTENAME',\n    'REPLACE',\n    'REPLICATE',\n    'REVERSE',\n    'RIGHT',\n    'RTRIM',\n    'SOUNDEX',\n    'SPACE',\n    'STR',\n    'STRING_AGG',\n    'STRING_ESCAPE',\n    'STUFF',\n    'SUBSTRING',\n    'TRANSLATE',\n    'TRIM',\n    'UNICODE',\n    'UPPER',\n  ],\n  system: [\n    '$PARTITION',\n    '@@ERROR',\n    '@@IDENTITY',\n    '@@PACK_RECEIVED',\n    '@@ROWCOUNT',\n    '@@TRANCOUNT',\n    'BINARY_CHECKSUM',\n    'CHECKSUM',\n    'COMPRESS',\n    'CONNECTIONPROPERTY',\n    'CONTEXT_INFO',\n    'CURRENT_REQUEST_ID',\n    'CURRENT_TRANSACTION_ID',\n    'DECOMPRESS',\n    'ERROR_LINE',\n    'ERROR_MESSAGE',\n    'ERROR_NUMBER',\n    'ERROR_PROCEDURE',\n    'ERROR_SEVERITY',\n    'ERROR_STATE',\n    'FORMATMESSAGE',\n    'GET_FILESTREAM_TRANSACTION_CONTEXT',\n    'GETANSINULL',\n    'HOST_ID',\n    'HOST_NAME',\n    'ISNULL',\n    'ISNUMERIC',\n    'MIN_ACTIVE_ROWVERSION',\n    'NEWID',\n    'NEWSEQUENTIALID',\n    'ROWCOUNT_BIG',\n    'SESSION_CONTEXT',\n    'XACT_STATE',\n  ],\n  statistical: [\n    '@@CONNECTIONS',\n    '@@CPU_BUSY',\n    '@@IDLE',\n    '@@IO_BUSY',\n    '@@PACK_SENT',\n    '@@PACKET_ERRORS',\n    '@@TIMETICKS',\n    '@@TOTAL_ERRORS',\n    '@@TOTAL_READ',\n    '@@TOTAL_WRITE',\n    'TEXTPTR',\n    'TEXTVALID',\n  ],\n  trigger: ['COLUMNS_UPDATED', 'EVENTDATA', 'TRIGGER_NESTLEVEL', 'UPDATE'],\n  // Shorthand functions to use in place of CASE expression\n  caseAbbrev: ['COALESCE', 'NULLIF'],\n  // Parameterized types\n  // https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql?view=sql-server-ver15\n  dataTypes: [\n    'DECIMAL',\n    'NUMERIC',\n    'FLOAT',\n    'REAL',\n    'DATETIME2',\n    'DATETIMEOFFSET',\n    'TIME',\n    'CHAR',\n    'VARCHAR',\n    'NCHAR',\n    'NVARCHAR',\n    'BINARY',\n    'VARBINARY',\n  ],\n});\n","import { flatKeywordList } from '../../utils';\n\nexport const keywords = flatKeywordList({\n  // https://docs.microsoft.com/en-us/sql/t-sql/language-elements/reserved-keywords-transact-sql?view=sql-server-ver15\n  standard: [\n    'ADD',\n    'ALL',\n    'ALTER',\n    'AND',\n    'ANY',\n    'AS',\n    'ASC',\n    'AUTHORIZATION',\n    'BACKUP',\n    'BEGIN',\n    'BETWEEN',\n    'BREAK',\n    'BROWSE',\n    'BULK',\n    'BY',\n    'CASCADE',\n    'CHECK',\n    'CHECKPOINT',\n    'CLOSE',\n    'CLUSTERED',\n    'COALESCE',\n    'COLLATE',\n    'COLUMN',\n    'COMMIT',\n    'COMPUTE',\n    'CONSTRAINT',\n    'CONTAINS',\n    'CONTAINSTABLE',\n    'CONTINUE',\n    'CONVERT',\n    'CREATE',\n    'CROSS',\n    'CURRENT',\n    'CURRENT_DATE',\n    'CURRENT_TIME',\n    'CURRENT_TIMESTAMP',\n    'CURRENT_USER',\n    'CURSOR',\n    'DATABASE',\n    'DBCC',\n    'DEALLOCATE',\n    'DECLARE',\n    'DEFAULT',\n    'DELETE',\n    'DENY',\n    'DESC',\n    'DISK',\n    'DISTINCT',\n    'DISTRIBUTED',\n    'DOUBLE',\n    'DROP',\n    'DUMP',\n    'ERRLVL',\n    'ESCAPE',\n    'EXEC',\n    'EXECUTE',\n    'EXISTS',\n    'EXIT',\n    'EXTERNAL',\n    'FETCH',\n    'FILE',\n    'FILLFACTOR',\n    'FOR',\n    'FOREIGN',\n    'FREETEXT',\n    'FREETEXTTABLE',\n    'FROM',\n    'FULL',\n    'FUNCTION',\n    'GOTO',\n    'GRANT',\n    'GROUP',\n    'HAVING',\n    'HOLDLOCK',\n    'IDENTITY',\n    'IDENTITYCOL',\n    'IDENTITY_INSERT',\n    'IF',\n    'IN',\n    'INDEX',\n    'INNER',\n    'INSERT',\n    'INTERSECT',\n    'INTO',\n    'IS',\n    'JOIN',\n    'KEY',\n    'KILL',\n    'LEFT',\n    'LIKE',\n    'LINENO',\n    'LOAD',\n    'MERGE',\n    'NATIONAL',\n    'NOCHECK',\n    'NONCLUSTERED',\n    'NOT',\n    'NULL',\n    'NULLIF',\n    'OF',\n    'OFF',\n    'OFFSETS',\n    'ON',\n    'OPEN',\n    'OPENDATASOURCE',\n    'OPENQUERY',\n    'OPENROWSET',\n    'OPENXML',\n    'OPTION',\n    'OR',\n    'ORDER',\n    'OUTER',\n    'OVER',\n    'PERCENT',\n    'PIVOT',\n    'PLAN',\n    'PRECISION',\n    'PRIMARY',\n    'PRINT',\n    'PROC',\n    'PROCEDURE',\n    'PUBLIC',\n    'RAISERROR',\n    'READ',\n    'READTEXT',\n    'RECONFIGURE',\n    'REFERENCES',\n    'REPLICATION',\n    'RESTORE',\n    'RESTRICT',\n    'RETURN',\n    'REVERT',\n    'REVOKE',\n    'RIGHT',\n    'ROLLBACK',\n    'ROWCOUNT',\n    'ROWGUIDCOL',\n    'RULE',\n    'SAVE',\n    'SCHEMA',\n    'SECURITYAUDIT',\n    'SELECT',\n    'SEMANTICKEYPHRASETABLE',\n    'SEMANTICSIMILARITYDETAILSTABLE',\n    'SEMANTICSIMILARITYTABLE',\n    'SESSION_USER',\n    'SET',\n    'SETUSER',\n    'SHUTDOWN',\n    'SOME',\n    'STATISTICS',\n    'SYSTEM_USER',\n    'TABLE',\n    'TABLESAMPLE',\n    'TEXTSIZE',\n    'THEN',\n    'TO',\n    'TOP',\n    'TRAN',\n    'TRANSACTION',\n    'TRIGGER',\n    'TRUNCATE',\n    'TRY_CONVERT',\n    'TSEQUAL',\n    'UNION',\n    'UNIQUE',\n    'UNPIVOT',\n    'UPDATE',\n    'UPDATETEXT',\n    'USE',\n    'USER',\n    'VALUES',\n    'VARYING',\n    'VIEW',\n    'WAITFOR',\n    'WHERE',\n    'WHILE',\n    'WITH',\n    'WITHIN GROUP',\n    'WRITETEXT',\n  ],\n  odbc: [\n    'ABSOLUTE',\n    'ACTION',\n    'ADA',\n    'ADD',\n    'ALL',\n    'ALLOCATE',\n    'ALTER',\n    'AND',\n    'ANY',\n    'ARE',\n    'AS',\n    'ASC',\n    'ASSERTION',\n    'AT',\n    'AUTHORIZATION',\n    'AVG',\n    'BEGIN',\n    'BETWEEN',\n    'BIT',\n    'BIT_LENGTH',\n    'BOTH',\n    'BY',\n    'CASCADE',\n    'CASCADED',\n    'CAST',\n    'CATALOG',\n    'CHAR',\n    'CHARACTER',\n    'CHARACTER_LENGTH',\n    'CHAR_LENGTH',\n    'CHECK',\n    'CLOSE',\n    'COALESCE',\n    'COLLATE',\n    'COLLATION',\n    'COLUMN',\n    'COMMIT',\n    'CONNECT',\n    'CONNECTION',\n    'CONSTRAINT',\n    'CONSTRAINTS',\n    'CONTINUE',\n    'CONVERT',\n    'CORRESPONDING',\n    'COUNT',\n    'CREATE',\n    'CROSS',\n    'CURRENT',\n    'CURRENT_DATE',\n    'CURRENT_TIME',\n    'CURRENT_TIMESTAMP',\n    'CURRENT_USER',\n    'CURSOR',\n    'DATE',\n    'DAY',\n    'DEALLOCATE',\n    'DEC',\n    'DECIMAL',\n    'DECLARE',\n    'DEFAULT',\n    'DEFERRABLE',\n    'DEFERRED',\n    'DELETE',\n    'DESC',\n    'DESCRIBE',\n    'DESCRIPTOR',\n    'DIAGNOSTICS',\n    'DISCONNECT',\n    'DISTINCT',\n    'DOMAIN',\n    'DOUBLE',\n    'DROP',\n    'END-EXEC',\n    'ESCAPE',\n    'EXCEPTION',\n    'EXEC',\n    'EXECUTE',\n    'EXISTS',\n    'EXTERNAL',\n    'EXTRACT',\n    'FALSE',\n    'FETCH',\n    'FIRST',\n    'FLOAT',\n    'FOR',\n    'FOREIGN',\n    'FORTRAN',\n    'FOUND',\n    'FROM',\n    'FULL',\n    'GET',\n    'GLOBAL',\n    'GO',\n    'GOTO',\n    'GRANT',\n    'GROUP',\n    'HAVING',\n    'HOUR',\n    'IDENTITY',\n    'IMMEDIATE',\n    'IN',\n    'INCLUDE',\n    'INDEX',\n    'INDICATOR',\n    'INITIALLY',\n    'INNER',\n    'INPUT',\n    'INSENSITIVE',\n    'INSERT',\n    'INT',\n    'INTEGER',\n    'INTERSECT',\n    'INTERVAL',\n    'INTO',\n    'IS',\n    'ISOLATION',\n    'JOIN',\n    'KEY',\n    'LANGUAGE',\n    'LAST',\n    'LEADING',\n    'LEFT',\n    'LEVEL',\n    'LIKE',\n    'LOCAL',\n    'LOWER',\n    'MATCH',\n    'MAX',\n    'MIN',\n    'MINUTE',\n    'MODULE',\n    'MONTH',\n    'NAMES',\n    'NATIONAL',\n    'NATURAL',\n    'NCHAR',\n    'NEXT',\n    'NO',\n    'NONE',\n    'NOT',\n    'NULL',\n    'NULLIF',\n    'NUMERIC',\n    'OCTET_LENGTH',\n    'OF',\n    'ONLY',\n    'OPEN',\n    'OPTION',\n    'OR',\n    'ORDER',\n    'OUTER',\n    'OUTPUT',\n    'OVERLAPS',\n    'PAD',\n    'PARTIAL',\n    'PASCAL',\n    'POSITION',\n    'PRECISION',\n    'PREPARE',\n    'PRESERVE',\n    'PRIMARY',\n    'PRIOR',\n    'PRIVILEGES',\n    'PROCEDURE',\n    'PUBLIC',\n    'READ',\n    'REAL',\n    'REFERENCES',\n    'RELATIVE',\n    'RESTRICT',\n    'REVOKE',\n    'RIGHT',\n    'ROLLBACK',\n    'ROWS',\n    'SCHEMA',\n    'SCROLL',\n    'SECOND',\n    'SECTION',\n    'SELECT',\n    'SESSION',\n    'SESSION_USER',\n    'SET',\n    'SIZE',\n    'SMALLINT',\n    'SOME',\n    'SPACE',\n    'SQL',\n    'SQLCA',\n    'SQLCODE',\n    'SQLERROR',\n    'SQLSTATE',\n    'SQLWARNING',\n    'SUBSTRING',\n    'SUM',\n    'SYSTEM_USER',\n    'TABLE',\n    'TEMPORARY',\n    'TIME',\n    'TIMESTAMP',\n    'TIMEZONE_HOUR',\n    'TIMEZONE_MINUTE',\n    'TO',\n    'TRAILING',\n    'TRANSACTION',\n    'TRANSLATE',\n    'TRANSLATION',\n    'TRIM',\n    'TRUE',\n    'UNION',\n    'UNIQUE',\n    'UNKNOWN',\n    'UPDATE',\n    'UPPER',\n    'USAGE',\n    'USER',\n    'VALUE',\n    'VALUES',\n    'VARCHAR',\n    'VARYING',\n    'VIEW',\n    'WHENEVER',\n    'WHERE',\n    'WITH',\n    'WORK',\n    'WRITE',\n    'YEAR',\n    'ZONE',\n  ],\n});\n","import { expandPhrases } from 'src/expandPhrases';\nimport Formatter from 'src/formatter/Formatter';\nimport Tokenizer from 'src/lexer/Tokenizer';\nimport { functions } from './tsql.functions';\nimport { keywords } from './tsql.keywords';\n\nconst reservedCommands = expandPhrases([\n  // queries\n  'WITH',\n  'SELECT [ALL | DISTINCT]',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'WINDOW',\n  'PARTITION BY',\n  'ORDER BY',\n  'OFFSET',\n  'FETCH {FIRST | NEXT}',\n  // Data manipulation\n  // - insert:\n  'INSERT [INTO]',\n  'VALUES',\n  // - update:\n  'UPDATE',\n  'SET',\n  'WHERE CURRENT OF',\n  // - delete:\n  'DELETE [FROM]',\n  // - truncate:\n  'TRUNCATE TABLE',\n  // - merge:\n  'MERGE [INTO]',\n  'WHEN [NOT] MATCHED [BY TARGET | BY SOURCE] [THEN]',\n  'UPDATE SET',\n  // Data definition\n  'CREATE [OR ALTER] [MATERIALIZED] VIEW',\n  'CREATE TABLE',\n  'DROP TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER TABLE',\n  'ADD',\n  'DROP COLUMN [IF EXISTS]',\n  'ALTER COLUMN',\n\n  // https://docs.microsoft.com/en-us/sql/t-sql/statements/statements?view=sql-server-ver15\n  'ADD SENSITIVITY CLASSIFICATION',\n  'ADD SIGNATURE',\n  'AGGREGATE',\n  'ANSI_DEFAULTS',\n  'ANSI_NULLS',\n  'ANSI_NULL_DFLT_OFF',\n  'ANSI_NULL_DFLT_ON',\n  'ANSI_PADDING',\n  'ANSI_WARNINGS',\n  'APPLICATION ROLE',\n  'ARITHABORT',\n  'ARITHIGNORE',\n  'ASSEMBLY',\n  'ASYMMETRIC KEY',\n  'AUTHORIZATION',\n  'AVAILABILITY GROUP',\n  'BACKUP',\n  'BACKUP CERTIFICATE',\n  'BACKUP MASTER KEY',\n  'BACKUP SERVICE MASTER KEY',\n  'BEGIN CONVERSATION TIMER',\n  'BEGIN DIALOG CONVERSATION',\n  'BROKER PRIORITY',\n  'BULK INSERT',\n  'CERTIFICATE',\n  'CLOSE MASTER KEY',\n  'CLOSE SYMMETRIC KEY',\n  'COLLATE',\n  'COLUMN ENCRYPTION KEY',\n  'COLUMN MASTER KEY',\n  'COLUMNSTORE INDEX',\n  'CONCAT_NULL_YIELDS_NULL',\n  'CONTEXT_INFO',\n  'CONTRACT',\n  'CREDENTIAL',\n  'CRYPTOGRAPHIC PROVIDER',\n  'CURSOR_CLOSE_ON_COMMIT',\n  'DATABASE',\n  'DATABASE AUDIT SPECIFICATION',\n  'DATABASE ENCRYPTION KEY',\n  'DATABASE HADR',\n  'DATABASE SCOPED CONFIGURATION',\n  'DATABASE SCOPED CREDENTIAL',\n  'DATABASE SET',\n  'DATEFIRST',\n  'DATEFORMAT',\n  'DEADLOCK_PRIORITY',\n  'DENY',\n  'DENY XML',\n  'DISABLE TRIGGER',\n  'ENABLE TRIGGER',\n  'END CONVERSATION',\n  'ENDPOINT',\n  'EVENT NOTIFICATION',\n  'EVENT SESSION',\n  'EXECUTE AS',\n  'EXTERNAL DATA SOURCE',\n  'EXTERNAL FILE FORMAT',\n  'EXTERNAL LANGUAGE',\n  'EXTERNAL LIBRARY',\n  'EXTERNAL RESOURCE POOL',\n  'EXTERNAL TABLE',\n  'FIPS_FLAGGER',\n  'FMTONLY',\n  'FORCEPLAN',\n  'FULLTEXT CATALOG',\n  'FULLTEXT INDEX',\n  'FULLTEXT STOPLIST',\n  'FUNCTION',\n  'GET CONVERSATION GROUP',\n  'GET_TRANSMISSION_STATUS',\n  'GRANT',\n  'GRANT XML',\n  'IDENTITY_INSERT',\n  'IMPLICIT_TRANSACTIONS',\n  'INDEX',\n  'LANGUAGE',\n  'LOCK_TIMEOUT',\n  'LOGIN',\n  'MASTER KEY',\n  'MESSAGE TYPE',\n  'MOVE CONVERSATION',\n  'NOCOUNT',\n  'NOEXEC',\n  'NUMERIC_ROUNDABORT',\n  'OFFSETS',\n  'OPEN MASTER KEY',\n  'OPEN SYMMETRIC KEY',\n  'PARSEONLY',\n  'PARTITION FUNCTION',\n  'PARTITION SCHEME',\n  'PROCEDURE',\n  'QUERY_GOVERNOR_COST_LIMIT',\n  'QUEUE',\n  'QUOTED_IDENTIFIER',\n  'RECEIVE',\n  'REMOTE SERVICE BINDING',\n  'REMOTE_PROC_TRANSACTIONS',\n  'RESOURCE GOVERNOR',\n  'RESOURCE POOL',\n  'RESTORE',\n  'RESTORE FILELISTONLY',\n  'RESTORE HEADERONLY',\n  'RESTORE LABELONLY',\n  'RESTORE MASTER KEY',\n  'RESTORE REWINDONLY',\n  'RESTORE SERVICE MASTER KEY',\n  'RESTORE VERIFYONLY',\n  'REVERT',\n  'REVOKE',\n  'REVOKE XML',\n  'ROLE',\n  'ROUTE',\n  'ROWCOUNT',\n  'RULE',\n  'SCHEMA',\n  'SEARCH PROPERTY LIST',\n  'SECURITY POLICY',\n  'SELECTIVE XML INDEX',\n  'SEND',\n  'SENSITIVITY CLASSIFICATION',\n  'SEQUENCE',\n  'SERVER AUDIT',\n  'SERVER AUDIT SPECIFICATION',\n  'SERVER CONFIGURATION',\n  'SERVER ROLE',\n  'SERVICE',\n  'SERVICE MASTER KEY',\n  'SETUSER',\n  'SHOWPLAN_ALL',\n  'SHOWPLAN_TEXT',\n  'SHOWPLAN_XML',\n  'SIGNATURE',\n  'SPATIAL INDEX',\n  'STATISTICS',\n  'STATISTICS IO',\n  'STATISTICS PROFILE',\n  'STATISTICS TIME',\n  'STATISTICS XML',\n  'SYMMETRIC KEY',\n  'SYNONYM',\n  'TABLE',\n  'TABLE IDENTITY',\n  'TEXTSIZE',\n  'TRANSACTION ISOLATION LEVEL',\n  'TRIGGER',\n  'TYPE',\n  'UPDATE STATISTICS',\n  'USER',\n  'WORKLOAD GROUP',\n  'XACT_ABORT',\n  'XML INDEX',\n  'XML SCHEMA COLLECTION',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL]', 'EXCEPT', 'INTERSECT']);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  // non-standard joins\n  '{CROSS | OUTER} APPLY',\n]);\n\nconst reservedPhrases = ['ON DELETE', 'ON UPDATE'];\n\n// https://docs.microsoft.com/en-us/sql/t-sql/language-reference?view=sql-server-ver15\nexport default class TSqlFormatter extends Formatter {\n  static operators = ['~', '!<', '!>', '+=', '-=', '*=', '/=', '%=', '|=', '&=', '^=', '::'];\n\n  tokenizer() {\n    return new Tokenizer({\n      reservedCommands,\n      reservedSetOperations,\n      reservedJoins,\n      reservedDependentClauses: ['WHEN', 'ELSE'],\n      reservedPhrases,\n      reservedKeywords: keywords,\n      reservedFunctionNames: functions,\n      stringTypes: [{ quote: \"''\", prefixes: ['N'] }],\n      identTypes: [`\"\"`, '[]'],\n      identChars: { first: '#@', rest: '#@$' },\n      paramTypes: { named: ['@'], quoted: ['@'] },\n      operators: TSqlFormatter.operators,\n      // TODO: Support for money constants\n    });\n  }\n}\n","import { flatKeywordList } from '../../utils';\n\nexport const keywords = flatKeywordList({\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/restricted-keywords/list-of-restricted-keywords.html\n  all: [\n    'ABORT',\n    'ABSOLUTE',\n    'ACCESS',\n    'ACCESSIBLE',\n    'ACCOUNT',\n    'ACTION',\n    'ACTIVE',\n    'ADD',\n    'ADMIN',\n    'AFTER',\n    'AGAINST',\n    'AGGREGATE',\n    'AGGREGATES',\n    'AGGREGATOR',\n    'AGGREGATOR_ID',\n    'AGGREGATOR_PLAN_HASH',\n    'AGGREGATORS',\n    'ALGORITHM',\n    'ALL',\n    'ALSO',\n    'ALTER',\n    'ALWAYS',\n    'ANALYZE',\n    'AND',\n    'ANY',\n    'ARGHISTORY',\n    'ARRANGE',\n    'ARRANGEMENT',\n    'ARRAY',\n    'AS',\n    'ASC',\n    'ASCII',\n    'ASENSITIVE',\n    'ASM',\n    'ASSERTION',\n    'ASSIGNMENT',\n    'AST',\n    'ASYMMETRIC',\n    'ASYNC',\n    'AT',\n    'ATTACH',\n    'ATTRIBUTE',\n    'AUTHORIZATION',\n    'AUTO',\n    'AUTO_INCREMENT',\n    'AUTO_REPROVISION',\n    'AUTOSTATS',\n    'AUTOSTATS_CARDINALITY_MODE',\n    'AUTOSTATS_ENABLED',\n    'AUTOSTATS_HISTOGRAM_MODE',\n    'AUTOSTATS_SAMPLING',\n    'AVAILABILITY',\n    'AVG',\n    'AVG_ROW_LENGTH',\n    'AVRO',\n    'AZURE',\n    'BACKGROUND',\n    '_BACKGROUND_THREADS_FOR_CLEANUP',\n    'BACKUP',\n    'BACKUP_HISTORY',\n    'BACKUP_ID',\n    'BACKWARD',\n    'BATCH',\n    'BATCHES',\n    'BATCH_INTERVAL',\n    '_BATCH_SIZE_LIMIT',\n    'BEFORE',\n    'BEGIN',\n    'BETWEEN',\n    'BIGINT',\n    'BINARY',\n    '_BINARY',\n    'BIT',\n    'BLOB',\n    'BOOL',\n    'BOOLEAN',\n    'BOOTSTRAP',\n    'BOTH',\n    '_BT',\n    'BTREE',\n    'BUCKET_COUNT',\n    'BUCKETS',\n    'BY',\n    'BYTE',\n    'BYTE_LENGTH',\n    'CACHE',\n    'CALL',\n    'CALL_FOR_PIPELINE',\n    'CALLED',\n    'CAPTURE',\n    'CASCADE',\n    'CASCADED',\n    'CASE',\n    'CATALOG',\n    'CHAIN',\n    'CHANGE',\n    'CHAR',\n    'CHARACTER',\n    'CHARACTERISTICS',\n    'CHARSET',\n    'CHECK',\n    'CHECKPOINT',\n    '_CHECK_CAN_CONNECT',\n    '_CHECK_CONSISTENCY',\n    'CHECKSUM',\n    '_CHECKSUM',\n    'CLASS',\n    'CLEAR',\n    'CLIENT',\n    'CLIENT_FOUND_ROWS',\n    'CLOSE',\n    'CLUSTER',\n    'CLUSTERED',\n    'CNF',\n    'COALESCE',\n    'COLLATE',\n    'COLLATION',\n    'COLUMN',\n    'COLUMNAR',\n    'COLUMNS',\n    'COLUMNSTORE',\n    'COLUMNSTORE_SEGMENT_ROWS',\n    'COMMENT',\n    'COMMENTS',\n    'COMMIT',\n    'COMMITTED',\n    '_COMMIT_LOG_TAIL',\n    'COMPACT',\n    'COMPILE',\n    'COMPRESSED',\n    'COMPRESSION',\n    'CONCURRENT',\n    'CONCURRENTLY',\n    'CONDITION',\n    'CONFIGURATION',\n    'CONNECTION',\n    'CONNECTIONS',\n    'CONFIG',\n    'CONSTRAINT',\n    'CONTAINS',\n    'CONTENT',\n    'CONTINUE',\n    '_CONTINUE_REPLAY',\n    'CONVERSION',\n    'CONVERT',\n    'COPY',\n    '_CORE',\n    'COST',\n    'CREATE',\n    'CREDENTIALS',\n    'CROSS',\n    'CUBE',\n    'CSV',\n    'CUME_DIST',\n    'CURRENT',\n    'CURRENT_CATALOG',\n    'CURRENT_DATE',\n    'CURRENT_SCHEMA',\n    'CURRENT_SECURITY_GROUPS',\n    'CURRENT_SECURITY_ROLES',\n    'CURRENT_TIME',\n    'CURRENT_TIMESTAMP',\n    'CURRENT_USER',\n    'CURSOR',\n    'CYCLE',\n    'DATA',\n    'DATABASE',\n    'DATABASES',\n    'DATE',\n    'DATETIME',\n    'DAY',\n    'DAY_HOUR',\n    'DAY_MICROSECOND',\n    'DAY_MINUTE',\n    'DAY_SECOND',\n    'DEALLOCATE',\n    'DEC',\n    'DECIMAL',\n    'DECLARE',\n    'DEFAULT',\n    'DEFAULTS',\n    'DEFERRABLE',\n    'DEFERRED',\n    'DEFINED',\n    'DEFINER',\n    'DELAYED',\n    'DELAY_KEY_WRITE',\n    'DELETE',\n    'DELIMITER',\n    'DELIMITERS',\n    'DENSE_RANK',\n    'DESC',\n    'DESCRIBE',\n    'DETACH',\n    'DETERMINISTIC',\n    'DICTIONARY',\n    'DIFFERENTIAL',\n    'DIRECTORY',\n    'DISABLE',\n    'DISCARD',\n    '_DISCONNECT',\n    'DISK',\n    'DISTINCT',\n    'DISTINCTROW',\n    'DISTRIBUTED_JOINS',\n    'DIV',\n    'DO',\n    'DOCUMENT',\n    'DOMAIN',\n    'DOUBLE',\n    'DROP',\n    '_DROP_PROFILE',\n    'DUAL',\n    'DUMP',\n    'DUPLICATE',\n    'DURABILITY',\n    'DYNAMIC',\n    'EARLIEST',\n    'EACH',\n    'ECHO',\n    'ELECTION',\n    'ELSE',\n    'ELSEIF',\n    'ENABLE',\n    'ENCLOSED',\n    'ENCODING',\n    'ENCRYPTED',\n    'END',\n    'ENGINE',\n    'ENGINES',\n    'ENUM',\n    'ERRORS',\n    'ESCAPE',\n    'ESCAPED',\n    'ESTIMATE',\n    'EVENT',\n    'EVENTS',\n    'EXCEPT',\n    'EXCLUDE',\n    'EXCLUDING',\n    'EXCLUSIVE',\n    'EXECUTE',\n    'EXISTS',\n    'EXIT',\n    'EXPLAIN',\n    'EXTENDED',\n    'EXTENSION',\n    'EXTERNAL',\n    'EXTERNAL_HOST',\n    'EXTERNAL_PORT',\n    'EXTRACTOR',\n    'EXTRACTORS',\n    'EXTRA_JOIN',\n    '_FAILOVER',\n    'FAILED_LOGIN_ATTEMPTS',\n    'FAILURE',\n    'FALSE',\n    'FAMILY',\n    'FAULT',\n    'FETCH',\n    'FIELDS',\n    'FILE',\n    'FILES',\n    'FILL',\n    'FIX_ALTER',\n    'FIXED',\n    'FLOAT',\n    'FLOAT4',\n    'FLOAT8',\n    'FLUSH',\n    'FOLLOWING',\n    'FOR',\n    'FORCE',\n    'FORCE_COMPILED_MODE',\n    'FORCE_INTERPRETER_MODE',\n    'FOREGROUND',\n    'FOREIGN',\n    'FORMAT',\n    'FORWARD',\n    'FREEZE',\n    'FROM',\n    'FS',\n    '_FSYNC',\n    'FULL',\n    'FULLTEXT',\n    'FUNCTION',\n    'FUNCTIONS',\n    'GC',\n    'GCS',\n    'GET_FORMAT',\n    '_GC',\n    '_GCX',\n    'GENERATE',\n    'GEOGRAPHY',\n    'GEOGRAPHYPOINT',\n    'GEOMETRY',\n    'GEOMETRYPOINT',\n    'GLOBAL',\n    '_GLOBAL_VERSION_TIMESTAMP',\n    'GRANT',\n    'GRANTED',\n    'GRANTS',\n    'GROUP',\n    'GROUPING',\n    'GROUPS',\n    'GZIP',\n    'HANDLE',\n    'HANDLER',\n    'HARD_CPU_LIMIT_PERCENTAGE',\n    'HASH',\n    'HAS_TEMP_TABLES',\n    'HAVING',\n    'HDFS',\n    'HEADER',\n    'HEARTBEAT_NO_LOGGING',\n    'HIGH_PRIORITY',\n    'HISTOGRAM',\n    'HOLD',\n    'HOLDING',\n    'HOST',\n    'HOSTS',\n    'HOUR',\n    'HOUR_MICROSECOND',\n    'HOUR_MINUTE',\n    'HOUR_SECOND',\n    'IDENTIFIED',\n    'IDENTITY',\n    'IF',\n    'IGNORE',\n    'ILIKE',\n    'IMMEDIATE',\n    'IMMUTABLE',\n    'IMPLICIT',\n    'IMPORT',\n    'IN',\n    'INCLUDING',\n    'INCREMENT',\n    'INCREMENTAL',\n    'INDEX',\n    'INDEXES',\n    'INFILE',\n    'INHERIT',\n    'INHERITS',\n    '_INIT_PROFILE',\n    'INIT',\n    'INITIALIZE',\n    'INITIALLY',\n    'INJECT',\n    'INLINE',\n    'INNER',\n    'INOUT',\n    'INPUT',\n    'INSENSITIVE',\n    'INSERT',\n    'INSERT_METHOD',\n    'INSTANCE',\n    'INSTEAD',\n    'IN',\n    'INT',\n    'INT1',\n    'INT2',\n    'INT3',\n    'INT4',\n    'INT8',\n    'INTEGER',\n    '_INTERNAL_DYNAMIC_TYPECAST',\n    'INTERPRETER_MODE',\n    'INTERSECT',\n    'INTERVAL',\n    'INTO',\n    'INVOKER',\n    'ISOLATION',\n    'ITERATE',\n    'JOIN',\n    'JSON',\n    'KAFKA',\n    'KEY',\n    'KEY_BLOCK_SIZE',\n    'KEYS',\n    'KILL',\n    'KILLALL',\n    'LABEL',\n    'LAG',\n    'LANGUAGE',\n    'LARGE',\n    'LAST',\n    'LAST_VALUE',\n    'LATERAL',\n    'LATEST',\n    'LC_COLLATE',\n    'LC_CTYPE',\n    'LEAD',\n    'LEADING',\n    'LEAF',\n    'LEAKPROOF',\n    'LEAVE',\n    'LEAVES',\n    'LEFT',\n    'LEVEL',\n    'LICENSE',\n    'LIKE',\n    'LIMIT',\n    'LINES',\n    'LISTEN',\n    'LLVM',\n    'LOADDATA_WHERE',\n    'LOAD',\n    'LOCAL',\n    'LOCALTIME',\n    'LOCALTIMESTAMP',\n    'LOCATION',\n    'LOCK',\n    'LONG',\n    'LONGBLOB',\n    'LONGTEXT',\n    'LOOP',\n    'LOW_PRIORITY',\n    '_LS',\n    'LZ4',\n    'MANAGEMENT',\n    '_MANAGEMENT_THREAD',\n    'MAPPING',\n    'MASTER',\n    'MATCH',\n    'MATERIALIZED',\n    'MAXVALUE',\n    'MAX_CONCURRENCY',\n    'MAX_ERRORS',\n    'MAX_PARTITIONS_PER_BATCH',\n    'MAX_QUEUE_DEPTH',\n    'MAX_RETRIES_PER_BATCH_PARTITION',\n    'MAX_ROWS',\n    'MBC',\n    'MPL',\n    'MEDIUMBLOB',\n    'MEDIUMINT',\n    'MEDIUMTEXT',\n    'MEMBER',\n    'MEMORY',\n    'MEMORY_PERCENTAGE',\n    '_MEMSQL_TABLE_ID_LOOKUP',\n    'MEMSQL',\n    'MEMSQL_DESERIALIZE',\n    'MEMSQL_IMITATING_KAFKA',\n    'MEMSQL_SERIALIZE',\n    'MERGE',\n    'METADATA',\n    'MICROSECOND',\n    'MIDDLEINT',\n    'MIN_ROWS',\n    'MINUS',\n    'MINUTE_MICROSECOND',\n    'MINUTE_SECOND',\n    'MINVALUE',\n    'MOD',\n    'MODE',\n    'MODEL',\n    'MODIFIES',\n    'MODIFY',\n    'MONTH',\n    'MOVE',\n    'MPL',\n    'NAMES',\n    'NAMED',\n    'NAMESPACE',\n    'NATIONAL',\n    'NATURAL',\n    'NCHAR',\n    'NEXT',\n    'NO',\n    'NODE',\n    'NONE',\n    'NO_QUERY_REWRITE',\n    'NOPARAM',\n    'NOT',\n    'NOTHING',\n    'NOTIFY',\n    'NOWAIT',\n    'NO_WRITE_TO_BINLOG',\n    'NO_QUERY_REWRITE',\n    'NORELY',\n    'NTH_VALUE',\n    'NTILE',\n    'NULL',\n    'NULLCOLS',\n    'NULLS',\n    'NUMERIC',\n    'NVARCHAR',\n    'OBJECT',\n    'OF',\n    'OFF',\n    'OFFLINE',\n    'OFFSET',\n    'OFFSETS',\n    'OIDS',\n    'ON',\n    'ONLINE',\n    'ONLY',\n    'OPEN',\n    'OPERATOR',\n    'OPTIMIZATION',\n    'OPTIMIZE',\n    'OPTIMIZER',\n    'OPTIMIZER_STATE',\n    'OPTION',\n    'OPTIONS',\n    'OPTIONALLY',\n    'OR',\n    'ORDER',\n    'ORDERED_SERIALIZE',\n    'ORPHAN',\n    'OUT',\n    'OUT_OF_ORDER',\n    'OUTER',\n    'OUTFILE',\n    'OVER',\n    'OVERLAPS',\n    'OVERLAY',\n    'OWNED',\n    'OWNER',\n    'PACK_KEYS',\n    'PAIRED',\n    'PARSER',\n    'PARQUET',\n    'PARTIAL',\n    'PARTITION',\n    'PARTITION_ID',\n    'PARTITIONING',\n    'PARTITIONS',\n    'PASSING',\n    'PASSWORD',\n    'PASSWORD_LOCK_TIME',\n    'PAUSE',\n    '_PAUSE_REPLAY',\n    'PERIODIC',\n    'PERSISTED',\n    'PIPELINE',\n    'PIPELINES',\n    'PLACING',\n    'PLAN',\n    'PLANS',\n    'PLANCACHE',\n    'PLUGINS',\n    'POOL',\n    'POOLS',\n    'PORT',\n    'PRECEDING',\n    'PRECISION',\n    'PREPARE',\n    'PRESERVE',\n    'PRIMARY',\n    'PRIOR',\n    'PRIVILEGES',\n    'PROCEDURAL',\n    'PROCEDURE',\n    'PROCEDURES',\n    'PROCESS',\n    'PROCESSLIST',\n    'PROFILE',\n    'PROFILES',\n    'PROGRAM',\n    'PROMOTE',\n    'PROXY',\n    'PURGE',\n    'QUARTER',\n    'QUERIES',\n    'QUERY',\n    'QUERY_TIMEOUT',\n    'QUEUE',\n    'RANGE',\n    'RANK',\n    'READ',\n    '_READ',\n    'READS',\n    'REAL',\n    'REASSIGN',\n    'REBALANCE',\n    'RECHECK',\n    'RECORD',\n    'RECURSIVE',\n    'REDUNDANCY',\n    'REDUNDANT',\n    'REF',\n    'REFERENCE',\n    'REFERENCES',\n    'REFRESH',\n    'REGEXP',\n    'REINDEX',\n    'RELATIVE',\n    'RELEASE',\n    'RELOAD',\n    'RELY',\n    'REMOTE',\n    'REMOVE',\n    'RENAME',\n    'REPAIR',\n    '_REPAIR_TABLE',\n    'REPEAT',\n    'REPEATABLE',\n    '_REPL',\n    '_REPROVISIONING',\n    'REPLACE',\n    'REPLICA',\n    'REPLICATE',\n    'REPLICATING',\n    'REPLICATION',\n    'REQUIRE',\n    'RESOURCE',\n    'RESOURCE_POOL',\n    'RESET',\n    'RESTART',\n    'RESTORE',\n    'RESTRICT',\n    'RESULT',\n    '_RESURRECT',\n    'RETRY',\n    'RETURN',\n    'RETURNING',\n    'RETURNS',\n    'REVERSE',\n    'RG_POOL',\n    'REVOKE',\n    'RIGHT',\n    'RIGHT_ANTI_JOIN',\n    'RIGHT_SEMI_JOIN',\n    'RIGHT_STRAIGHT_JOIN',\n    'RLIKE',\n    'ROLES',\n    'ROLLBACK',\n    'ROLLUP',\n    'ROUTINE',\n    'ROW',\n    'ROW_COUNT',\n    'ROW_FORMAT',\n    'ROW_NUMBER',\n    'ROWS',\n    'ROWSTORE',\n    'RULE',\n    '_RPC',\n    'RUNNING',\n    'S3',\n    'SAFE',\n    'SAVE',\n    'SAVEPOINT',\n    'SCALAR',\n    'SCHEMA',\n    'SCHEMAS',\n    'SCHEMA_BINDING',\n    'SCROLL',\n    'SEARCH',\n    'SECOND',\n    'SECOND_MICROSECOND',\n    'SECURITY',\n    'SELECT',\n    'SEMI_JOIN',\n    '_SEND_THREADS',\n    'SENSITIVE',\n    'SEPARATOR',\n    'SEQUENCE',\n    'SEQUENCES',\n    'SERIAL',\n    'SERIALIZABLE',\n    'SERIES',\n    'SERVICE_USER',\n    'SERVER',\n    'SESSION',\n    'SESSION_USER',\n    'SET',\n    'SETOF',\n    'SECURITY_LISTS_INTERSECT',\n    'SHA',\n    'SHARD',\n    'SHARDED',\n    'SHARDED_ID',\n    'SHARE',\n    'SHOW',\n    'SHUTDOWN',\n    'SIGNAL',\n    'SIGNED',\n    'SIMILAR',\n    'SIMPLE',\n    'SITE',\n    'SKIP',\n    'SKIPPED_BATCHES',\n    '__SLEEP',\n    'SMALLINT',\n    'SNAPSHOT',\n    '_SNAPSHOT',\n    '_SNAPSHOTS',\n    'SOFT_CPU_LIMIT_PERCENTAGE',\n    'SOME',\n    'SONAME',\n    'SPARSE',\n    'SPATIAL',\n    'SPATIAL_CHECK_INDEX',\n    'SPECIFIC',\n    'SQL',\n    'SQL_BIG_RESULT',\n    'SQL_BUFFER_RESULT',\n    'SQL_CACHE',\n    'SQL_CALC_FOUND_ROWS',\n    'SQLEXCEPTION',\n    'SQL_MODE',\n    'SQL_NO_CACHE',\n    'SQL_NO_LOGGING',\n    'SQL_SMALL_RESULT',\n    'SQLSTATE',\n    'SQLWARNING',\n    'STDIN',\n    'STDOUT',\n    'STOP',\n    'STORAGE',\n    'STRAIGHT_JOIN',\n    'STRICT',\n    'STRING',\n    'STRIP',\n    'SUCCESS',\n    'SUPER',\n    'SYMMETRIC',\n    'SYNC_SNAPSHOT',\n    'SYNC',\n    '_SYNC',\n    '_SYNC2',\n    '_SYNC_PARTITIONS',\n    '_SYNC_SNAPSHOT',\n    'SYNCHRONIZE',\n    'SYSID',\n    'SYSTEM',\n    'TABLE',\n    'TABLE_CHECKSUM',\n    'TABLES',\n    'TABLESPACE',\n    'TAGS',\n    'TARGET_SIZE',\n    'TASK',\n    'TEMP',\n    'TEMPLATE',\n    'TEMPORARY',\n    'TEMPTABLE',\n    '_TERM_BUMP',\n    'TERMINATE',\n    'TERMINATED',\n    'TEXT',\n    'THEN',\n    'TIME',\n    'TIMEOUT',\n    'TIMESTAMP',\n    'TIMESTAMPADD',\n    'TIMESTAMPDIFF',\n    'TIMEZONE',\n    'TINYBLOB',\n    'TINYINT',\n    'TINYTEXT',\n    'TO',\n    'TRACELOGS',\n    'TRADITIONAL',\n    'TRAILING',\n    'TRANSFORM',\n    'TRANSACTION',\n    '_TRANSACTIONS_EXPERIMENTAL',\n    'TREAT',\n    'TRIGGER',\n    'TRIGGERS',\n    'TRUE',\n    'TRUNC',\n    'TRUNCATE',\n    'TRUSTED',\n    'TWO_PHASE',\n    '_TWOPCID',\n    'TYPE',\n    'TYPES',\n    'UNBOUNDED',\n    'UNCOMMITTED',\n    'UNDEFINED',\n    'UNDO',\n    'UNENCRYPTED',\n    'UNENFORCED',\n    'UNHOLD',\n    'UNICODE',\n    'UNION',\n    'UNIQUE',\n    '_UNITTEST',\n    'UNKNOWN',\n    'UNLISTEN',\n    '_UNLOAD',\n    'UNLOCK',\n    'UNLOGGED',\n    'UNPIVOT',\n    'UNSIGNED',\n    'UNTIL',\n    'UPDATE',\n    'UPGRADE',\n    'USAGE',\n    'USE',\n    'USER',\n    'USERS',\n    'USING',\n    'UTC_DATE',\n    'UTC_TIME',\n    'UTC_TIMESTAMP',\n    '_UTF8',\n    'VACUUM',\n    'VALID',\n    'VALIDATE',\n    'VALIDATOR',\n    'VALUE',\n    'VALUES',\n    'VARBINARY',\n    'VARCHAR',\n    'VARCHARACTER',\n    'VARIABLES',\n    'VARIADIC',\n    'VARYING',\n    'VERBOSE',\n    'VIEW',\n    'VOID',\n    'VOLATILE',\n    'VOTING',\n    'WAIT',\n    '_WAKE',\n    'WARNINGS',\n    'WEEK',\n    'WHEN',\n    'WHERE',\n    'WHILE',\n    'WHITESPACE',\n    'WINDOW',\n    'WITH',\n    'WITHOUT',\n    'WITHIN',\n    '_WM_HEARTBEAT',\n    'WORK',\n    'WORKLOAD',\n    'WRAPPER',\n    'WRITE',\n    'XACT_ID',\n    'XOR',\n    'YEAR',\n    'YEAR_MONTH',\n    'YES',\n    'ZEROFILL',\n    'ZONE',\n  ],\n});\n","import { flatKeywordList } from '../../utils';\n\nexport const functions = flatKeywordList({\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/vector-functions/vector-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/window-functions/window-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/string-functions/string-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/conditional-functions/conditional-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/numeric-functions/numeric-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/geospatial-functions/geospatial-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/json-functions/json-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/information-functions/information-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/aggregate-functions/aggregate-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/time-series-functions/time-series-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/identifier-generation-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/date-and-time-functions/date-and-time-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/distinct-count-estimation-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/full-text-search-functions/full-text-search-functions.html\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference/regular-expression-functions.html\n  all: [\n    'ABS',\n    'ACOS',\n    'ADDDATE',\n    'ADDTIME',\n    'AES_DECRYPT',\n    'AES_ENCRYPT',\n    'ANY_VALUE',\n    'APPROX_COUNT_DISTINCT',\n    'APPROX_COUNT_DISTINCT_ACCUMULATE',\n    'APPROX_COUNT_DISTINCT_COMBINE',\n    'APPROX_COUNT_DISTINCT_ESTIMATE',\n    'APPROX_GEOGRAPHY_INTERSECTS',\n    'APPROX_PERCENTILE',\n    'ASCII',\n    'ASIN',\n    'ATAN',\n    'ATAN2',\n    'AVG',\n    'BIN',\n    'BINARY',\n    'BIT_AND',\n    'BIT_COUNT',\n    'BIT_OR',\n    'BIT_XOR',\n    'CAST',\n    'CEIL',\n    'CEILING',\n    'CHAR',\n    'CHARACTER_LENGTH',\n    'CHAR_LENGTH',\n    'CHARSET',\n    'COALESCE',\n    'COERCIBILITY',\n    'COLLATION',\n    'COLLECT',\n    'CONCAT',\n    'CONCAT_WS',\n    'CONNECTION_ID',\n    'CONV',\n    'CONVERT',\n    'CONVERT_TZ',\n    'COS',\n    'COT',\n    'COUNT',\n    'CUME_DIST',\n    'CURDATE',\n    'CURRENT_DATE',\n    'CURRENT_ROLE',\n    'CURRENT_TIME',\n    'CURRENT_TIMESTAMP',\n    'CURRENT_USER',\n    'CURTIME',\n    'DATABASE',\n    'DATE',\n    'DATE_ADD',\n    'DATEDIFF',\n    'DATE_FORMAT',\n    'DATE_SUB',\n    'DATE_TRUNC',\n    'DAY',\n    'DAYNAME',\n    'DAYOFMONTH',\n    'DAYOFWEEK',\n    'DAYOFYEAR',\n    'DECODE',\n    'DEFAULT',\n    'DEGREES',\n    'DENSE_RANK',\n    'DIV',\n    'DOT_PRODUCT',\n    'ELT',\n    'EUCLIDEAN_DISTANCE',\n    'EXP',\n    'EXTRACT',\n    'FIELD',\n    'FIRST',\n    'FIRST_VALUE',\n    'FLOOR',\n    'FORMAT',\n    'FOUND_ROWS',\n    'FROM_BASE64',\n    'FROM_DAYS',\n    'FROM_UNIXTIME',\n    'GEOGRAPHY_AREA',\n    'GEOGRAPHY_CONTAINS',\n    'GEOGRAPHY_DISTANCE',\n    'GEOGRAPHY_INTERSECTS',\n    'GEOGRAPHY_LATITUDE',\n    'GEOGRAPHY_LENGTH',\n    'GEOGRAPHY_LONGITUDE',\n    'GEOGRAPHY_POINT',\n    'GEOGRAPHY_WITHIN_DISTANCE',\n    'GEOMETRY_AREA',\n    'GEOMETRY_CONTAINS',\n    'GEOMETRY_DISTANCE',\n    'GEOMETRY_FILTER',\n    'GEOMETRY_INTERSECTS',\n    'GEOMETRY_LENGTH',\n    'GEOMETRY_POINT',\n    'GEOMETRY_WITHIN_DISTANCE',\n    'GEOMETRY_X',\n    'GEOMETRY_Y',\n    'GREATEST',\n    'GROUPING',\n    'GROUP_CONCAT',\n    'HEX',\n    'HIGHLIGHT',\n    'HOUR',\n    'ICU_VERSION',\n    'IF',\n    'IFNULL',\n    'INET_ATON',\n    'INET_NTOA',\n    'INET6_ATON',\n    'INET6_NTOA',\n    'INITCAP',\n    'INSERT',\n    'INSTR',\n    'INTERVAL',\n    'IS',\n    'IS NULL',\n    'JSON_AGG',\n    'JSON_ARRAY_CONTAINS_DOUBLE',\n    'JSON_ARRAY_CONTAINS_JSON',\n    'JSON_ARRAY_CONTAINS_STRING',\n    'JSON_ARRAY_PUSH_DOUBLE',\n    'JSON_ARRAY_PUSH_JSON',\n    'JSON_ARRAY_PUSH_STRING',\n    'JSON_DELETE_KEY',\n    'JSON_EXTRACT_DOUBLE',\n    'JSON_EXTRACT_JSON',\n    'JSON_EXTRACT_STRING',\n    'JSON_EXTRACT_BIGINT',\n    'JSON_GET_TYPE',\n    'JSON_LENGTH',\n    'JSON_SET_DOUBLE',\n    'JSON_SET_JSON',\n    'JSON_SET_STRING',\n    'JSON_SPLICE_DOUBLE',\n    'JSON_SPLICE_JSON',\n    'JSON_SPLICE_STRING',\n    'LAG',\n    'LAST_DAY',\n    'LAST_VALUE',\n    'LCASE',\n    'LEAD',\n    'LEAST',\n    'LEFT',\n    'LENGTH',\n    'LIKE',\n    'LN',\n    'LOCALTIME',\n    'LOCALTIMESTAMP',\n    'LOCATE',\n    'LOG',\n    'LOG10',\n    'LOG2',\n    'LPAD',\n    'LTRIM',\n    'MATCH',\n    'MAX',\n    'MD5',\n    'MEDIAN',\n    'MICROSECOND',\n    'MIN',\n    'MINUTE',\n    'MOD',\n    'MONTH',\n    'MONTHNAME',\n    'MONTHS_BETWEEN',\n    'NOT',\n    'NOW',\n    'NTH_VALUE',\n    'NTILE',\n    'NULLIF',\n    'OCTET_LENGTH',\n    'PERCENT_RANK',\n    'PERCENTILE_CONT',\n    'PERCENTILE_DISC',\n    'PI',\n    'PIVOT',\n    'POSITION',\n    'POW',\n    'POWER',\n    'QUARTER',\n    'QUOTE',\n    'RADIANS',\n    'RAND',\n    'RANK',\n    'REGEXP',\n    'REPEAT',\n    'REPLACE',\n    'REVERSE',\n    'RIGHT',\n    'RLIKE',\n    'ROUND',\n    'ROW_COUNT',\n    'ROW_NUMBER',\n    'RPAD',\n    'RTRIM',\n    'SCALAR',\n    'SCHEMA',\n    'SEC_TO_TIME',\n    'SHA1',\n    'SHA2',\n    'SIGMOID',\n    'SIGN',\n    'SIN',\n    'SLEEP',\n    'SPLIT',\n    'SOUNDEX',\n    'SOUNDS LIKE',\n    'SOURCE_POS_WAIT',\n    'SPACE',\n    'SQRT',\n    'STDDEV',\n    'STDDEV_POP',\n    'STDDEV_SAMP',\n    'STR_TO_DATE',\n    'SUBDATE',\n    'SUBSTR',\n    'SUBSTRING',\n    'SUBSTRING_INDEX',\n    'SUM',\n    'SYS_GUID',\n    'TAN',\n    'TIME',\n    'TIMEDIFF',\n    'TIME_BUCKET',\n    'TIME_FORMAT',\n    'TIMESTAMP',\n    'TIMESTAMPADD',\n    'TIMESTAMPDIFF',\n    'TIME_TO_SEC',\n    'TO_BASE64',\n    'TO_CHAR',\n    'TO_DAYS',\n    'TO_JSON',\n    'TO_NUMBER',\n    'TO_SECONDS',\n    'TO_TIMESTAMP',\n    'TRIM',\n    'TRUNC',\n    'TRUNCATE',\n    'UCASE',\n    'UNHEX',\n    'UNIX_TIMESTAMP',\n    'UPDATEXML',\n    'UPPER',\n    'USER',\n    'UTC_DATE',\n    'UTC_TIME',\n    'UTC_TIMESTAMP',\n    'UUID',\n    'VALUES',\n    'VARIANCE',\n    'VAR_POP',\n    'VAR_SAMP',\n    'VECTOR_SUB',\n    'VERSION',\n    'WEEK',\n    'WEEKDAY',\n    'WEEKOFYEAR',\n    'YEAR',\n    // Data types with parameters\n    // https://docs.singlestore.com/managed-service/en/reference/sql-reference/data-types.html\n    'BIT',\n    'TINYINT',\n    'SMALLINT',\n    'MEDIUMINT',\n    'INT',\n    'INTEGER',\n    'BIGINT',\n    'DECIMAL',\n    'DEC',\n    'NUMERIC',\n    'FIXED',\n    'FLOAT',\n    'DOUBLE',\n    'DOUBLE PRECISION',\n    'REAL',\n    'DATETIME',\n    'TIMESTAMP',\n    'TIME',\n    'YEAR',\n    'CHAR',\n    'NATIONAL CHAR',\n    'VARCHAR',\n    'NATIONAL VARCHAR',\n    'BINARY',\n    'VARBINARY',\n    'BLOB',\n    'TEXT',\n    'ENUM',\n  ],\n});\n","import { expandPhrases } from 'src/expandPhrases';\nimport Formatter from 'src/formatter/Formatter';\nimport Tokenizer from 'src/lexer/Tokenizer';\nimport { EOF_TOKEN, isToken, type Token, TokenType } from 'src/lexer/token';\nimport { keywords } from './singlestoredb.keywords';\nimport { functions } from './singlestoredb.functions';\n\nconst reservedCommands = expandPhrases([\n  // queries\n  'WITH',\n  'SELECT [ALL | DISTINCT | DISTINCTROW]',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'ORDER BY',\n  'LIMIT',\n  'OFFSET',\n  // Data manipulation\n  // - insert:\n  'INSERT [IGNORE] [INTO]',\n  'VALUES',\n  'REPLACE [INTO]',\n  // - update:\n  'UPDATE',\n  'SET',\n  // - delete:\n  'DELETE [FROM]',\n  // - truncate:\n  'TRUNCATE [TABLE]',\n  // Data definition\n  'CREATE VIEW',\n  'CREATE [ROWSTORE] [REFERENCE | TEMPORARY | GLOBAL TEMPORARY] TABLE [IF NOT EXISTS]',\n  'CREATE [OR REPLACE] [TEMPORARY] PROCEDURE [IF NOT EXISTS]',\n  'CREATE [OR REPLACE] [EXTERNAL] FUNCTION',\n  'DROP [TEMPORARY] TABLE [IF EXISTS]',\n  // - alter table:\n  'ALTER [ONLINE] TABLE',\n  'ADD [COLUMN]',\n  'ADD [UNIQUE] {INDEX | KEY}',\n  'DROP [COLUMN]',\n  'MODIFY [COLUMN]',\n  'CHANGE',\n  'RENAME [TO | AS]',\n\n  // https://docs.singlestore.com/managed-service/en/reference/sql-reference.html\n  'ADD AGGREGATOR',\n  'ADD LEAF',\n  'AGGREGATOR SET AS MASTER',\n  'ALTER DATABASE',\n  'ALTER PIPELINE',\n  'ALTER RESOURCE POOL',\n  'ALTER USER',\n  'ALTER VIEW',\n  'ANALYZE TABLE',\n  'ATTACH DATABASE',\n  'ATTACH LEAF',\n  'ATTACH LEAF ALL',\n  'BACKUP DATABASE',\n  'BINLOG',\n  'BOOTSTRAP AGGREGATOR',\n  'CACHE INDEX',\n  'CALL',\n  'CHANGE',\n  'CHANGE MASTER TO',\n  'CHANGE REPLICATION FILTER',\n  'CHANGE REPLICATION SOURCE TO',\n  'CHECK BLOB CHECKSUM',\n  'CHECK TABLE',\n  'CHECKSUM TABLE',\n  'CLEAR ORPHAN DATABASES',\n  'CLONE',\n  'COMMIT',\n  'CREATE DATABASE',\n  'CREATE GROUP',\n  'CREATE INDEX',\n  'CREATE LINK',\n  'CREATE MILESTONE',\n  'CREATE PIPELINE',\n  'CREATE RESOURCE POOL',\n  'CREATE ROLE',\n  'CREATE USER',\n  'DEALLOCATE PREPARE',\n  'DESCRIBE',\n  'DETACH DATABASE',\n  'DETACH PIPELINE',\n  'DO',\n  'DROP DATABASE',\n  'DROP FUNCTION',\n  'DROP INDEX',\n  'DROP LINK',\n  'DROP PIPELINE',\n  'DROP PROCEDURE',\n  'DROP RESOURCE POOL',\n  'DROP ROLE',\n  'DROP USER',\n  'DROP VIEW',\n  'EXECUTE',\n  'EXPLAIN',\n  'FLUSH',\n  'FORCE',\n  'GRANT',\n  'HANDLER',\n  'HELP',\n  'KILL CONNECTION',\n  'KILLALL QUERIES',\n  'LOAD DATA',\n  'LOAD INDEX INTO CACHE',\n  'LOAD XML',\n  'LOCK INSTANCE FOR BACKUP',\n  'LOCK TABLES',\n  'MASTER_POS_WAIT',\n  'OPTIMIZE TABLE',\n  'PREPARE',\n  'PURGE BINARY LOGS',\n  'REBALANCE PARTITIONS',\n  'RELEASE SAVEPOINT',\n  'REMOVE AGGREGATOR',\n  'REMOVE LEAF',\n  'REPAIR TABLE',\n  'REPLACE',\n  'REPLICATE DATABASE',\n  'RESET',\n  'RESET MASTER',\n  'RESET PERSIST',\n  'RESET REPLICA',\n  'RESET SLAVE',\n  'RESTART',\n  'RESTORE DATABASE',\n  'RESTORE REDUNDANCY',\n  'REVOKE',\n  'ROLLBACK',\n  'ROLLBACK TO SAVEPOINT',\n  'SAVEPOINT',\n  'SET CHARACTER SET',\n  'SET DEFAULT ROLE',\n  'SET NAMES',\n  'SET PASSWORD',\n  'SET RESOURCE GROUP',\n  'SET ROLE',\n  'SET TRANSACTION',\n  'SHOW',\n  'SHOW CHARACTER SET',\n  'SHOW COLLATION',\n  'SHOW COLUMNS',\n  'SHOW CREATE DATABASE',\n  'SHOW CREATE FUNCTION',\n  'SHOW CREATE PIPELINE',\n  'SHOW CREATE PROCEDURE',\n  'SHOW CREATE TABLE',\n  'SHOW CREATE USER',\n  'SHOW CREATE VIEW',\n  'SHOW DATABASES',\n  'SHOW ENGINE',\n  'SHOW ENGINES',\n  'SHOW ERRORS',\n  'SHOW FUNCTION CODE',\n  'SHOW FUNCTION STATUS',\n  'SHOW GRANTS',\n  'SHOW INDEX',\n  'SHOW MASTER STATUS',\n  'SHOW OPEN TABLES',\n  'SHOW PLUGINS',\n  'SHOW PRIVILEGES',\n  'SHOW PROCEDURE CODE',\n  'SHOW PROCEDURE STATUS',\n  'SHOW PROCESSLIST',\n  'SHOW PROFILE',\n  'SHOW PROFILES',\n  'SHOW RELAYLOG EVENTS',\n  'SHOW REPLICA STATUS',\n  'SHOW REPLICAS',\n  'SHOW SLAVE',\n  'SHOW SLAVE HOSTS',\n  'SHOW STATUS',\n  'SHOW TABLE STATUS',\n  'SHOW TABLES',\n  'SHOW VARIABLES',\n  'SHOW WARNINGS',\n  'SHUTDOWN',\n  'SNAPSHOT DATABASE',\n  'SOURCE_POS_WAIT',\n  'START GROUP_REPLICATION',\n  'START PIPELINE',\n  'START REPLICA',\n  'START SLAVE',\n  'START TRANSACTION',\n  'STOP GROUP_REPLICATION',\n  'STOP PIPELINE',\n  'STOP REPLICA',\n  'STOP REPLICATING',\n  'STOP SLAVE',\n  'TEST PIPELINE',\n  'TRUNCATE TABLE',\n  'UNLOCK INSTANCE',\n  'UNLOCK TABLES',\n  'USE',\n  'XA',\n  // flow control\n  'ITERATE',\n  'LEAVE',\n  'LOOP',\n  'REPEAT',\n  'RETURN',\n  'WHILE',\n]);\n\nconst reservedSetOperations = expandPhrases([\n  'UNION [ALL | DISTINCT]',\n  'EXCEPT',\n  'INTERSECT',\n  'MINUS',\n]);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL {LEFT | RIGHT} [OUTER] JOIN',\n  // non-standard joins\n  'STRAIGHT_JOIN',\n]);\n\nconst reservedPhrases = ['ON DELETE', 'ON UPDATE', 'CHARACTER SET'];\n\nexport default class SingleStoreDbFormatter extends Formatter {\n  static operators = ['~', ':=', '<=>', '<<', '>>', '&&', '||'];\n\n  tokenizer() {\n    return new Tokenizer({\n      reservedCommands,\n      reservedSetOperations,\n      reservedJoins,\n      reservedDependentClauses: ['WHEN', 'ELSE', 'ELSEIF'],\n      reservedPhrases,\n      reservedLogicalOperators: ['AND', 'OR'],\n      reservedKeywords: keywords,\n      reservedFunctionNames: functions,\n      // TODO: support _binary\"some string\" prefix\n      stringTypes: [\n        { quote: \"''\", prefixes: ['B', 'X'] },\n        { quote: '\"\"', prefixes: ['B', 'X'] },\n      ],\n      identTypes: ['``'],\n      identChars: { first: '$', rest: '$', allowFirstCharNumber: true },\n      variableTypes: [\n        { regex: '@[A-Za-z0-9_$]+' },\n        { quote: '``', prefixes: ['@'], requirePrefix: true },\n      ],\n      lineCommentTypes: ['--', '#'],\n      operators: SingleStoreDbFormatter.operators,\n      postProcess,\n    });\n  }\n}\n\nfunction postProcess(tokens: Token[]) {\n  return tokens.map((token, i) => {\n    const nextToken = tokens[i + 1] || EOF_TOKEN;\n    if (isToken.SET(token) && nextToken.text === '(') {\n      // This is SET datatype, not SET statement\n      return { ...token, type: TokenType.RESERVED_FUNCTION_NAME };\n    }\n    return token;\n  });\n}\n","import BigQueryFormatter from 'src/languages/bigquery/bigquery.formatter';\nimport Db2Formatter from 'src/languages/db2/db2.formatter';\nimport HiveFormatter from 'src/languages/hive/hive.formatter';\nimport MariaDbFormatter from 'src/languages/mariadb/mariadb.formatter';\nimport MySqlFormatter from 'src/languages/mysql/mysql.formatter';\nimport N1qlFormatter from 'src/languages/n1ql/n1ql.formatter';\nimport PlSqlFormatter from 'src/languages/plsql/plsql.formatter';\nimport PostgreSqlFormatter from 'src/languages/postgresql/postgresql.formatter';\nimport RedshiftFormatter from 'src/languages/redshift/redshift.formatter';\nimport SparkFormatter from 'src/languages/spark/spark.formatter';\nimport SqliteFormatter from 'src/languages/sqlite/sqlite.formatter';\nimport SqlFormatter from 'src/languages/sql/sql.formatter';\nimport TrinoFormatter from 'src/languages/trino/trino.formatter';\nimport TSqlFormatter from 'src/languages/tsql/tsql.formatter';\nimport SingleStoreDbFormatter from './languages/singlestoredb/singlestoredb.formatter';\n\nimport type { FormatOptions } from './FormatOptions';\nimport { ParamItems } from './formatter/Params';\n\nexport const formatters = {\n  bigquery: BigQueryFormatter,\n  db2: Db2Formatter,\n  hive: HiveFormatter,\n  mariadb: MariaDbFormatter,\n  mysql: MySqlFormatter,\n  n1ql: N1qlFormatter,\n  plsql: PlSqlFormatter,\n  postgresql: PostgreSqlFormatter,\n  redshift: RedshiftFormatter,\n  singlestoredb: SingleStoreDbFormatter,\n  spark: SparkFormatter,\n  sql: SqlFormatter,\n  sqlite: SqliteFormatter,\n  trino: TrinoFormatter,\n  tsql: TSqlFormatter,\n};\nexport type SqlLanguage = keyof typeof formatters;\nexport const supportedDialects = Object.keys(formatters);\n\nconst defaultOptions: FormatOptions = {\n  language: 'sql',\n  tabWidth: 2,\n  useTabs: false,\n  keywordCase: 'preserve',\n  indentStyle: 'standard',\n  logicalOperatorNewline: 'before',\n  tabulateAlias: false,\n  commaPosition: 'after',\n  expressionWidth: 50,\n  linesBetweenQueries: 1,\n  denseOperators: false,\n  newlineBeforeSemicolon: false,\n};\n\n/**\n * Format whitespace in a query to make it easier to read.\n *\n * @param {string} query - input SQL query string\n * @param {FormatOptions} cfg Configuration options (see docs in README)\n * @return {string} formatted query\n */\nexport const format = (query: string, cfg: Partial<FormatOptions> = {}): string => {\n  if (typeof query !== 'string') {\n    throw new Error('Invalid query argument. Expected string, instead got ' + typeof query);\n  }\n\n  const options = validateConfig({\n    ...defaultOptions,\n    ...cfg,\n  });\n\n  const FormatterCls =\n    typeof options.language === 'string' ? formatters[options.language] : options.language;\n\n  return new FormatterCls(options).format(query);\n};\n\nexport class ConfigError extends Error {}\n\nfunction validateConfig(cfg: FormatOptions): FormatOptions {\n  if (typeof cfg.language === 'string' && !supportedDialects.includes(cfg.language)) {\n    throw new ConfigError(`Unsupported SQL dialect: ${cfg.language}`);\n  }\n\n  if ('multilineLists' in cfg) {\n    throw new ConfigError('multilineLists config is no more supported.');\n  }\n  if ('newlineBeforeOpenParen' in cfg) {\n    throw new ConfigError('newlineBeforeOpenParen config is no more supported.');\n  }\n  if ('newlineBeforeCloseParen' in cfg) {\n    throw new ConfigError('newlineBeforeCloseParen config is no more supported.');\n  }\n  if ('aliasAs' in cfg) {\n    throw new ConfigError('aliasAs config is no more supported.');\n  }\n\n  if (cfg.expressionWidth <= 0) {\n    throw new ConfigError(\n      `expressionWidth config must be positive number. Received ${cfg.expressionWidth} instead.`\n    );\n  }\n\n  if (cfg.commaPosition === 'before' && cfg.useTabs) {\n    throw new ConfigError(\n      'commaPosition: before does not work when tabs are used for indentation.'\n    );\n  }\n\n  if (cfg.params && !validateParams(cfg.params)) {\n    // eslint-disable-next-line no-console\n    console.warn('WARNING: All \"params\" option values should be strings.');\n  }\n\n  return cfg;\n}\n\nfunction validateParams(params: ParamItems | string[]): boolean {\n  const paramValues = params instanceof Array ? params : Object.values(params);\n  return paramValues.every(p => typeof p === 'string');\n}\n\nexport type FormatFn = typeof format;\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","indentString","cfg","indentStyle","repeat","useTabs","tabWidth","isTabularStyle","TokenType","Params","params","this","index","text","NodeType","EOF_TOKEN","type","EOF","raw","start","Infinity","end","testToken","compareToken","token","isToken","AS","RESERVED_KEYWORD","AND","RESERVED_LOGICAL_OPERATOR","ARRAY","BETWEEN","CASE","RESERVED_CASE_START","CAST","RESERVED_FUNCTION_NAME","BY","END","RESERVED_CASE_END","FROM","RESERVED_COMMAND","LIMIT","SELECT","test","SET","STRUCT","TABLE","WINDOW","WITH","isReserved","RESERVED_PHRASE","RESERVED_DEPENDENT_CLAUSE","RESERVED_SET_OPERATION","RESERVED_JOIN","Parser","tokens","stat","statements","statement","push","children","look","DELIMITER","next","hasSemicolon","length","expression","limitClause","clause","setOperation","functionCall","arraySubscript","parenthesis","betweenPredicate","allColumnsAsterisk","nextTokenNode","name","expressionsUntilClauseEnd","nameToken","set_operation","function_call","IDENTIFIER","array_subscript","arrayToken","OPEN_PAREN","openParen","closeParen","CLOSE_PAREN","between_predicate","betweenToken","expr1","andToken","expr2","limitToken","t","COMMA","limit_clause","offset","count","all_columns_asterisk","extraPredicate","ahead","last","arr","sortByLengthDesc","strings","sort","a","b","localeCompare","maxLength","reduce","max","cur","Math","equalizeWhitespace","s","replace","flatKeywordList","values","flat","Set","PRECEDING_WHITESPACE_REGEX","formatCommaPositions","query","commaPosition","indent","lines","groups","i","group","match","groupCommaDelimitedLines","split","flatMap","commaLines","maxLineLength","trimTrailingCommas","map","line","formatTabular","whitespace","RegExp","removeLastIndent","trimStart","formatBefore","Error","join","WS","InlineBlock","expressionWidth","inlineWidth","node","betweenWidth","isForbiddenToken","total","sum","LINE_COMMENT","BLOCK_COMMENT","Layout","indentation","items","item","SPACE","NO_SPACE","trimHorizontalWhitespace","NO_NEWLINE","trimWhitespace","NEWLINE","addNewline","MANDATORY_NEWLINE","INDENT","addIndentation","SINGLE_INDENT","isHorizontalWhitespace","pop","isRemovableWhitespace","newline","getLevel","itemToString","getSingleIndent","ExpressionFormatter","layout","inline","nodes","inlineBlock","formatFunctionCall","formatArraySubscript","formatParenthesis","formatBetweenPredicate","formatClause","formatSetOperation","formatLimitClause","formatAllColumnsAsterisk","formatToken","add","show","isInlineBlock","formatSubExpression","increaseBlockLevel","decreaseBlockLevel","showNonTabular","increaseTopLevel","decreaseTopLevel","_node","format","formatLineComment","formatBlockComment","formatJoin","formatDependentClause","formatLogicalOperator","formatKeyword","formatCaseStart","formatCaseEnd","formatComma","OPERATOR","formatOperator","QUOTED_IDENTIFIER","STRING","NUMBER","VARIABLE","NAMED_PARAMETER","QUOTED_PARAMETER","NUMBERED_PARAMETER","POSITIONAL_PARAMETER","formatLiteral","precedingWhitespace","splitBlockComment","forEach","comment","language","denseOperators","logicalOperatorNewline","formatMultilineBlockEnd","isTabularToken","tokenText","tail","includes","padEnd","padStart","toTabularFormat","showToken","isParameter","keywordCase","toLowerCase","INDENT_TYPE_TOP_LEVEL","Indentation","indentTypes","Formatter","cls","constructor","cachedTokenizer","tokenizer","tokenize","paramTypes","ast","parse","formattedQuery","formatAst","postFormat","trimEnd","formatStatement","linesBetweenQueries","newlineBeforeSemicolon","toString","tabulateAlias","newQuery","aliasLines","splitLines","matches","precedingText","as","alias","aliasMaxLength","formatAliasPositions","escapeRegExp","string","WHITESPACE_REGEX","patternToRegex","pattern","toCaseInsensitivePattern","prefix","char","toUpperCase","escapeParen","paren","withDashes","specialDelimiterMap","patternList","specialDelimiters","standardDelimiterPattern","parens","rejectIdentCharsPattern","rest","dashes","reservedWord","reservedKeywords","identChars","avoidIdentChars","reservedKeywordsPattern","parameter","typesRegex","quotePatterns","String","entries","left","right","keys","singleQuotePattern","quoteTypes","prefixes","requirePrefix","quote","stringPattern","identifier","specialChars","identifierPattern","first","allowFirstCharNumber","letter","number","firstChars","restChars","TokenizerEngine","rules","input","getWhitespace","getNextToken","slice","lastIndex","exec","previousToken","matchToken","matchReservedWordToken","matchPlaceholderToken","tokenType","tokenRule","rule","regex","transform","matchedToken","outToken","Tokenizer","dialectRules","buildDialectRules","paramTypesOverrides","buildParamRules","postProcess","polyadOperators","varTypes","lineCommentTypes","validRules","_a","openParens","_b","closeParens","_c","identTypes","v","reservedCommands","reservedSetOperations","reservedDependentClauses","reservedJoins","reservedPhrases","_d","reservedLogicalOperators","_e","reservedFunctionNames","variableTypes","varType","undefined","stringTypes","operators","_f","named","quoted","numbered","positional","paramChars","quoteChar","tokenKey","fromEntries","filter","expandPhrases","phrases","expandSinglePhrase","phrase","buildCombinations","parsePhrase","trim","REQUIRED_PART","REQUIRED_BLOCK","OPTIONAL_BLOCK","result","requiredMatch","optionalBlockMatch","choices","requiredBlockMatch","head","keywords","datatypes","stringFormat","misc","ddl","functions","aead","aggregateAnalytic","aggregate","approximateAggregate","array","bitwise","conversion","date","datetime","debugging","federatedQuery","geography","hash","hll","interval","json","math","navigation","net","numbering","security","statisticalAggregate","time","timestamp","uuid","conditional","legacyAggregate","legacyBitwise","legacyCasting","legacyComparison","legacyDatetime","legacyIp","legacyJson","legacyMath","legacyRegex","legacyString","legacyTableWildcard","legacyUrl","legacyWindow","legacyMisc","other","pivot","dataTypes","BigQueryFormatter","prevToken","detectArraySubscripts","processed","endIndex","findClosingAngleBracketIndex","typeDefTokens","formatTypeDefToken","combineParameterizedTypes","startIndex","level","scalar","table","row","olap","cast","standard","Db2Formatter","masking","window","nonReserved","reserved","fileTypes","HiveFormatter","all","MariaDbFormatter","nextToken","MySqlFormatter","N1qlFormatter","numeric","character","comparison","largeObject","collection","hierarchical","dataMining","xml","encoding","nullRelated","env","objectReference","model","PlSqlFormatter","previousReservedToken","binary","bitstring","datatype","enum","geometry","network","textsearch","sequence","range","set","sysInfo","sysAdmin","trigger","eventTrigger","stats","PostgreSqlFormatter","dateTime","spatial","hyperLogLog","machineLearning","superType","dataType","dataConversionParams","dataLoadParams","dataFormatParams","copyAuthParams","copyCompressionParams","copyMiscParams","compressionEncodings","RedshiftFormatter","caseAbbrev","SparkFormatter","SqliteFormatter","nonStandard","SqlFormatter","rowPattern","types","TrinoFormatter","analytic","configuration","cryptographic","cursor","mathematical","metadata","ranking","system","statistical","odbc","TSqlFormatter","SingleStoreDbFormatter","formatters","bigquery","db2","hive","mariadb","mysql","n1ql","plsql","postgresql","redshift","singlestoredb","spark","sql","sqlite","trino","tsql","supportedDialects","defaultOptions","options","validateConfig","FormatterCls","ConfigError","Array","every","p","console","warn"],"sourceRoot":""}